--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -105,9 +105,6 @@
 find_package(Qt5Test REQUIRED)
 include_directories(${Qt5Test_INCLUDE_DIRS})
 
-pkg_check_modules(UNITYVOICE REQUIRED libunityvoice-1 REQUIRED)
-include_directories(${UNITYVOICE_INCLUDE_DIRS})
-
 find_package(Vala 0.12)
 
 find_package(GObjectIntrospection 0.9.12)
--- a/service/CMakeLists.txt
+++ b/service/CMakeLists.txt
@@ -29,7 +29,6 @@
   SqliteUsageTracker.cpp
   UsageTracker.cpp
   Voice.cpp
-  VoiceImpl.cpp
   Window.cpp
   WindowImpl.cpp
   WindowContext.cpp
--- a/service/Factory.cpp
+++ b/service/Factory.cpp
@@ -24,7 +24,6 @@
 #include <service/WindowImpl.h>
 #include <service/QueryImpl.h>
 #include <service/SqliteUsageTracker.h>
-#include <service/VoiceImpl.h>
 #include <service/WindowImpl.h>
 #include <common/DBusTypes.h>
 
@@ -37,7 +36,6 @@
 Factory::Factory() :
 		m_sessionBus(QDBusConnection::sessionBus()), m_queryCounter(0) {
 	DBusTypes::registerMetaTypes();
-	LibUnityVoice::UnityVoice::registerMetaTypes();
 }
 
 Factory::~Factory() {
@@ -110,13 +108,6 @@
 }
 
 Voice::Ptr Factory::singletonVoice() {
-	if (m_voice.isNull()) {
-		QSharedPointer<ComCanonicalUnityVoiceInterface> voiceInterface(
-				new ComCanonicalUnityVoiceInterface(
-						DBusTypes::UNITY_VOICE_DBUS_NAME,
-						DBusTypes::UNITY_VOICE_DBUS_PATH, sessionBus()));
-		m_voice.reset(new VoiceImpl(voiceInterface));
-	}
 	return m_voice;
 }
 
--- a/service/VoiceImpl.cpp
+++ b/service/VoiceImpl.cpp
@@ -1,76 +0,0 @@
-/*
- * Copyright (C) 2013 Canonical, Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3, as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranties of
- * MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
- * PURPOSE.  See the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along
- * with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Author: Marcus Tomlinson <marcus.tomlinson@canonical.com>
- */
-
-#include <service/VoiceImpl.h>
-
-using namespace hud::service;
-
-VoiceImpl::VoiceImpl(
-		QSharedPointer<ComCanonicalUnityVoiceInterface> voiceInterface) :
-		m_voiceInterface(voiceInterface), m_isListening(false) {
-
-	// connect voice interface signals to local signals
-	connect(m_voiceInterface.data(), SIGNAL( HeardSomething() ), this,
-			SIGNAL( HeardSomething() ));
-	connect(m_voiceInterface.data(), SIGNAL( Listening() ), this,
-			SIGNAL( Listening() ));
-	connect(m_voiceInterface.data(), SIGNAL( Loading() ), this,
-			SIGNAL( Loading() ));
-}
-
-VoiceImpl::~VoiceImpl() {
-}
-
-QString VoiceImpl::listen(const QList<QStringList>& commands) {
-	// return immediately if no commands were supplied
-	if (commands.isEmpty() || m_isListening) {
-		return QString();
-	}
-
-	// call voice interface listen() asynchronously
-	m_isListening = true;
-	QDBusPendingCall listen_async = m_voiceInterface->asyncCall("listen",
-			QVariant::fromValue(commands));
-
-	// connect a call watcher to the async call
-	QDBusPendingCallWatcher watcher(listen_async, this);
-	connect(&watcher, SIGNAL(finished(QDBusPendingCallWatcher*)), this,
-			SLOT(listenFinished(QDBusPendingCallWatcher*)));
-
-	// wait for async call to complete
-	m_listenWait.exec();
-	m_isListening = false;
-
-	// return query set by listenFinished
-	return m_query;
-}
-
-void VoiceImpl::listenFinished(QDBusPendingCallWatcher *call) {
-	QDBusPendingReply<QString> query = *call;
-
-	// set m_query accordingly
-	if (query.isError()) {
-		qWarning() << query.error();
-		m_query = "";
-	} else {
-		m_query = query;
-	}
-
-	// notify listen() that the async call is complete
-	m_listenWait.quit();
-}
--- a/service/VoiceImpl.h
+++ b/service/VoiceImpl.h
@@ -1,52 +0,0 @@
-/*
- * Copyright (C) 2013 Canonical, Ltd.
- *
- * This program is free software: you can redistribute it and/or modify it
- * under the terms of the GNU General Public License version 3, as published
- * by the Free Software Foundation.
- *
- * This program is distributed in the hope that it will be useful, but
- * WITHOUT ANY WARRANTY; without even the implied warranties of
- * MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
- * PURPOSE.  See the GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along
- * with this program.  If not, see <http://www.gnu.org/licenses/>.
- *
- * Author: Marcus Tomlinson <marcus.tomlinson@canonical.com>
- */
-
-#ifndef HUD_SERVICE_VOICEIMPL_H_
-#define HUD_SERVICE_VOICEIMPL_H_
-
-#include <libunityvoice/VoiceInterface.h>
-#include <service/Voice.h>
-
-namespace hud {
-namespace service {
-
-class VoiceImpl: public Voice {
-Q_OBJECT
-
-public:
-	explicit VoiceImpl(
-			QSharedPointer<ComCanonicalUnityVoiceInterface> voiceInterface);
-
-	virtual ~VoiceImpl();
-
-	QString listen(const QList<QStringList>& commands) override;
-
-private Q_SLOTS:
-	void listenFinished(QDBusPendingCallWatcher *call);
-
-private:
-	QSharedPointer<ComCanonicalUnityVoiceInterface> m_voiceInterface;
-	QString m_query;
-	QEventLoop m_listenWait;
-	bool m_isListening = false;
-};
-
-} // namespace service
-} // namespace hud
-
-#endif // HUD_SERVICE_VOICEIMPL_H_
