From 6003c192c4370937918f7563f2f111dd68a6f820 Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Sat, 5 Apr 2014 19:32:34 -0400
Subject: [PATCH 06/19] Remove Network panel

---
 configure.ac                                     |   20 -
 man/unity-control-center.xml                     |   11 -
 panels/Makefile.am                               |    4 -
 panels/network/Makefile.am                       |   73 -
 panels/network/cc-network-panel.c                | 1225 ------------
 panels/network/cc-network-panel.h                |   72 -
 panels/network/net-device-mobile.c               |  572 ------
 panels/network/net-device-mobile.h               |   59 -
 panels/network/net-device-wifi.c                 | 2191 ----------------------
 panels/network/net-device-wifi.h                 |   58 -
 panels/network/net-device-wired.c                |  259 ---
 panels/network/net-device-wired.h                |   58 -
 panels/network/net-device.c                      |  379 ----
 panels/network/net-device.h                      |   62 -
 panels/network/net-object.c                      |  353 ----
 panels/network/net-object.h                      |   94 -
 panels/network/net-proxy.c                       |  543 ------
 panels/network/net-proxy.h                       |   59 -
 panels/network/net-vpn.c                         |  518 -----
 panels/network/net-vpn.h                         |   61 -
 panels/network/network-dialogs.c                 |  550 ------
 panels/network/network-dialogs.h                 |   43 -
 panels/network/network-mobile.ui                 |  378 ----
 panels/network/network-module.c                  |   41 -
 panels/network/network-proxy.ui                  |  442 -----
 panels/network/network-vpn.ui                    |  336 ----
 panels/network/network-wifi.ui                   | 1087 -----------
 panels/network/network-wired.ui                  |  332 ----
 panels/network/network.ui                        |  355 ----
 panels/network/panel-cell-renderer-mode.c        |  144 --
 panels/network/panel-cell-renderer-mode.h        |   61 -
 panels/network/panel-cell-renderer-pixbuf.c      |   82 -
 panels/network/panel-cell-renderer-pixbuf.h      |   61 -
 panels/network/panel-cell-renderer-security.c    |  153 --
 panels/network/panel-cell-renderer-security.h    |   69 -
 panels/network/panel-cell-renderer-separator.c   |  130 --
 panels/network/panel-cell-renderer-separator.h   |   62 -
 panels/network/panel-cell-renderer-signal.c      |  161 --
 panels/network/panel-cell-renderer-signal.h      |   61 -
 panels/network/panel-cell-renderer-text.c        |   82 -
 panels/network/panel-cell-renderer-text.h        |   61 -
 panels/network/panel-common.c                    |  699 -------
 panels/network/panel-common.h                    |   53 -
 panels/network/rfkill-glib.c                     |  299 ---
 panels/network/rfkill-glib.h                     |   65 -
 panels/network/rfkill.h                          |  107 --
 panels/network/unity-network-panel.desktop.in.in |   13 -
 po/POTFILES.in                                   |   14 -
 po/POTFILES.skip                                 |    1 -
 shell/completions/unity-control-center.in        |    9 -
 50 files changed, 12622 deletions(-)
 delete mode 100644 panels/network/Makefile.am
 delete mode 100644 panels/network/cc-network-panel.c
 delete mode 100644 panels/network/cc-network-panel.h
 delete mode 100644 panels/network/net-device-mobile.c
 delete mode 100644 panels/network/net-device-mobile.h
 delete mode 100644 panels/network/net-device-wifi.c
 delete mode 100644 panels/network/net-device-wifi.h
 delete mode 100644 panels/network/net-device-wired.c
 delete mode 100644 panels/network/net-device-wired.h
 delete mode 100644 panels/network/net-device.c
 delete mode 100644 panels/network/net-device.h
 delete mode 100644 panels/network/net-object.c
 delete mode 100644 panels/network/net-object.h
 delete mode 100644 panels/network/net-proxy.c
 delete mode 100644 panels/network/net-proxy.h
 delete mode 100644 panels/network/net-vpn.c
 delete mode 100644 panels/network/net-vpn.h
 delete mode 100644 panels/network/network-dialogs.c
 delete mode 100644 panels/network/network-dialogs.h
 delete mode 100644 panels/network/network-mobile.ui
 delete mode 100644 panels/network/network-module.c
 delete mode 100644 panels/network/network-proxy.ui
 delete mode 100644 panels/network/network-vpn.ui
 delete mode 100644 panels/network/network-wifi.ui
 delete mode 100644 panels/network/network-wired.ui
 delete mode 100644 panels/network/network.ui
 delete mode 100644 panels/network/panel-cell-renderer-mode.c
 delete mode 100644 panels/network/panel-cell-renderer-mode.h
 delete mode 100644 panels/network/panel-cell-renderer-pixbuf.c
 delete mode 100644 panels/network/panel-cell-renderer-pixbuf.h
 delete mode 100644 panels/network/panel-cell-renderer-security.c
 delete mode 100644 panels/network/panel-cell-renderer-security.h
 delete mode 100644 panels/network/panel-cell-renderer-separator.c
 delete mode 100644 panels/network/panel-cell-renderer-separator.h
 delete mode 100644 panels/network/panel-cell-renderer-signal.c
 delete mode 100644 panels/network/panel-cell-renderer-signal.h
 delete mode 100644 panels/network/panel-cell-renderer-text.c
 delete mode 100644 panels/network/panel-cell-renderer-text.h
 delete mode 100644 panels/network/panel-common.c
 delete mode 100644 panels/network/panel-common.h
 delete mode 100644 panels/network/rfkill-glib.c
 delete mode 100644 panels/network/rfkill-glib.h
 delete mode 100644 panels/network/rfkill.h
 delete mode 100644 panels/network/unity-network-panel.desktop.in.in

diff --git a/configure.ac b/configure.ac
index 776ad4e..5edf8a8 100644
--- a/configure.ac
+++ b/configure.ac
@@ -96,7 +96,6 @@ PA_REQUIRED_VERSION=2.0
 CANBERRA_REQUIRED_VERSION=0.13
 GDKPIXBUF_REQUIRED_VERSION=2.23.0
 POLKIT_REQUIRED_VERSION=0.103
-NETWORK_MANAGER_REQUIRED_VERSION=0.8.992
 LIBNOTIFY_REQUIRED_VERSION=0.7.3
 GNOME_DESKTOP_REQUIRED_VERSION=3.5.91
 SCHEMAS_REQUIRED_VERSION=3.7.2.2
@@ -126,7 +125,6 @@ PKG_CHECK_MODULES(INFO_PANEL, $COMMON_MODULES libgtop-2.0 gl x11
 PKG_CHECK_MODULES(MEDIA_PANEL, $COMMON_MODULES)
 PKG_CHECK_MODULES(MOUSE_PANEL, $COMMON_MODULES xi >= 1.2
                   unity-settings-daemon x11)
-PKG_CHECK_MODULES(NETWORK_PANEL, $COMMON_MODULES)
 PKG_CHECK_MODULES(POWER_PANEL, $COMMON_MODULES upower-glib >= 0.9.1
                   unity-settings-daemon)
 PKG_CHECK_MODULES(REGION_PANEL, $COMMON_MODULES
@@ -152,17 +150,6 @@ AM_PROG_VALAC([0.20.0])
 GDESKTOP_PREFIX=`$PKG_CONFIG --variable prefix gsettings-desktop-schemas`
 AC_SUBST(GDESKTOP_PREFIX)
 
-# Check for NetworkManager ~0.9
-PKG_CHECK_MODULES(NETWORK_MANAGER, NetworkManager >= $NETWORK_MANAGER_REQUIRED_VERSION
-                  libnm-glib >= $NETWORK_MANAGER_REQUIRED_VERSION
-                  libnm-util >= $NETWORK_MANAGER_REQUIRED_VERSION
-		  libnm-gtk >= $NETWORK_MANAGER_REQUIRED_VERSION,
-                  [have_networkmanager=yes], have_networkmanager=no)
-if test "x$have_networkmanager" = xno ; then
-        AC_MSG_WARN(*** Network panel will not be built (NetworkManager ~0.9 or newer not found) ***)
-fi
-AM_CONDITIONAL(BUILD_NETWORK, [test x$have_networkmanager = xyes])
-
 # Optional dependency for the user accounts panel
 AC_ARG_WITH([cheese],
             AS_HELP_STRING([--with-cheese], [enable cheese webcam support]),,
@@ -378,8 +365,6 @@ panels/power/unity-power-panel.desktop.in
 panels/power/icons/Makefile
 panels/power/icons/24x24/Makefile
 panels/power/icons/48x48/Makefile
-panels/network/Makefile
-panels/network/unity-network-panel.desktop.in
 panels/universal-access/Makefile
 panels/universal-access/unity-universal-access-panel.desktop.in
 panels/user-accounts/Makefile
@@ -392,11 +377,6 @@ man/Makefile
 ])
 
 AC_MSG_NOTICE([unity-control-center was configured with the following options:])
-if test "x$have_networkmanager" = "xyes"; then
-	AC_MSG_NOTICE([** NetworkManager (Network panel)])
-else
-	AC_MSG_NOTICE([   Network panel disabled])
-fi
 if test "x$have_cheese" = "xyes"; then
 	AC_MSG_NOTICE([** Cheese (Users panel webcam support)])
 else
diff --git a/man/unity-control-center.xml b/man/unity-control-center.xml
index d2deb35..a89a269 100644
--- a/man/unity-control-center.xml
+++ b/man/unity-control-center.xml
@@ -116,17 +116,6 @@
                         </varlistentry>
 
                         <varlistentry>
-                                <term><option>network</option></term>
-
-                                <listitem><para>The network panel provides
-                                a view of available network devices (wired,
-                                wireless or mobile) and their current
-                                configuration. It also provides a way to
-                                create new VPN connections and configure
-                                proxy settings.</para></listitem>
-                        </varlistentry>
-
-                        <varlistentry>
                                 <term><option>online-accounts</option></term>
 
                                 <listitem><para>The online-accounts panel
diff --git a/panels/Makefile.am b/panels/Makefile.am
index cfaa485..4426de7 100644
--- a/panels/Makefile.am
+++ b/panels/Makefile.am
@@ -12,8 +12,4 @@ SUBDIRS= \
 	universal-access \
 	user-accounts
 
-if BUILD_NETWORK
-SUBDIRS += network
-endif
-
 -include $(top_srcdir)/git.mk
diff --git a/panels/network/Makefile.am b/panels/network/Makefile.am
deleted file mode 100644
index e0f18e2..0000000
--- a/panels/network/Makefile.am
+++ /dev/null
@@ -1,73 +0,0 @@
-cappletname = network
-
-INCLUDES = 						\
-	$(PANEL_CFLAGS)					\
-	$(NETWORK_PANEL_CFLAGS)				\
-	$(NETWORK_MANAGER_CFLAGS)			\
-	-DGNOMECC_UI_DIR="\"$(uidir)\""			\
-	-DGNOMELOCALEDIR="\"$(datadir)/locale\""	\
-	-DGNOMECC_DATA_DIR="\"$(pkgdatadir)\""		\
-	$(NULL)
-
-ccpanelsdir = $(PANELS_DIR)
-ccpanels_LTLIBRARIES = libnetwork.la
-
-libnetwork_la_SOURCES =					\
-	network-module.c				\
-	panel-common.c					\
-	panel-common.h					\
-	net-object.c					\
-	net-object.h					\
-	net-device.c					\
-	net-device.h					\
-	net-device-wifi.c				\
-	net-device-wifi.h				\
-	net-device-wired.c				\
-	net-device-wired.h				\
-	net-device-mobile.c				\
-	net-device-mobile.h				\
-	net-vpn.c					\
-	net-vpn.h					\
-	net-proxy.c					\
-	net-proxy.h					\
-	panel-cell-renderer-mode.c			\
-	panel-cell-renderer-mode.h			\
-	panel-cell-renderer-security.c			\
-	panel-cell-renderer-security.h			\
-	panel-cell-renderer-signal.c			\
-	panel-cell-renderer-signal.h			\
-	panel-cell-renderer-separator.c			\
-	panel-cell-renderer-separator.h			\
-	panel-cell-renderer-text.c			\
-	panel-cell-renderer-text.h			\
-	panel-cell-renderer-pixbuf.c			\
-	panel-cell-renderer-pixbuf.h			\
-	network-dialogs.c				\
-	network-dialogs.h				\
-	cc-network-panel.c				\
-	cc-network-panel.h				\
-	rfkill-glib.c					\
-	rfkill-glib.h					\
-	rfkill.h
-
-libnetwork_la_LIBADD = $(PANEL_LIBS) $(NETWORK_PANEL_LIBS) $(NETWORK_MANAGER_LIBS)
-libnetwork_la_LDFLAGS = $(PANEL_LDFLAGS)
-
-uidir = $(pkgdatadir)/ui
-dist_ui_DATA =						\
-	network-proxy.ui				\
-	network-vpn.ui					\
-	network-wifi.ui					\
-	network-wired.ui				\
-	network-mobile.ui				\
-	network.ui
-
-@INTLTOOL_DESKTOP_RULE@
-
-desktopdir = $(datadir)/applications
-desktop_in_files = unity-network-panel.desktop.in
-desktop_DATA = $(desktop_in_files:.desktop.in=.desktop)
-
-CLEANFILES = $(desktop_in_files) $(desktop_DATA)
-
--include $(top_srcdir)/git.mk
diff --git a/panels/network/cc-network-panel.c b/panels/network/cc-network-panel.c
deleted file mode 100644
index 339c732..0000000
--- a/panels/network/cc-network-panel.c
+++ /dev/null
@@ -1,1225 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010-2012 Richard Hughes <richard@hughsie.com>
- * Copyright (C) 2012 Thomas Bechtold <thomasbechtold@jpberlin.de>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#include <config.h>
-#include <glib/gi18n.h>
-#include <stdlib.h>
-
-#include "cc-network-panel.h"
-
-#include "nm-remote-settings.h"
-#include "nm-client.h"
-#include "nm-device.h"
-#include "nm-device-modem.h"
-
-#include "net-device.h"
-#include "net-device-mobile.h"
-#include "net-device-wifi.h"
-#include "net-device-wired.h"
-#include "net-object.h"
-#include "net-proxy.h"
-#include "net-vpn.h"
-
-#include "rfkill-glib.h"
-
-#include "panel-common.h"
-
-#include "network-dialogs.h"
-
-CC_PANEL_REGISTER (CcNetworkPanel, cc_network_panel)
-
-#define NETWORK_PANEL_PRIVATE(o) \
-        (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_NETWORK_PANEL, CcNetworkPanelPrivate))
-
-typedef enum {
-        OPERATION_NULL,
-        OPERATION_SHOW_DEVICE,
-        OPERATION_CREATE_WIFI,
-        OPERATION_CONNECT_HIDDEN,
-        OPERATION_CONNECT_8021X,
-        OPERATION_CONNECT_MOBILE
-} CmdlineOperation;
-
-struct _CcNetworkPanelPrivate
-{
-        GCancellable     *cancellable;
-        GtkBuilder       *builder;
-        GtkWidget        *treeview;
-        NMClient         *client;
-        NMRemoteSettings *remote_settings;
-        gboolean          updating_device;
-        guint             add_header_widgets_idle;
-        guint             nm_warning_idle;
-        guint             refresh_idle;
-
-        /* Killswitch stuff */
-        GtkWidget        *kill_switch_header;
-        CcRfkillGlib       *rfkill;
-        GtkSwitch        *rfkill_switch;
-        GHashTable       *killswitches;
-
-        /* wireless dialog stuff */
-        CmdlineOperation  arg_operation;
-        gchar            *arg_device;
-        gchar            *arg_access_point;
-        gboolean          operation_done;
-};
-
-enum {
-        PANEL_DEVICES_COLUMN_ICON,
-        PANEL_DEVICES_COLUMN_TITLE,
-        PANEL_DEVICES_COLUMN_SORT,
-        PANEL_DEVICES_COLUMN_OBJECT,
-        PANEL_DEVICES_COLUMN_LAST
-};
-
-enum {
-        PROP_0,
-        PROP_ARGV
-};
-
-static NetObject *find_in_model_by_id (CcNetworkPanel *panel, const gchar *id);
-static void handle_argv (CcNetworkPanel *panel);
-
-static void
-cc_network_panel_get_property (GObject    *object,
-                               guint       property_id,
-                               GValue     *value,
-                               GParamSpec *pspec)
-{
-        switch (property_id) {
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-        }
-}
-
-static CmdlineOperation
-cmdline_operation_from_string (const gchar *string)
-{
-        if (g_strcmp0 (string, "create-wifi") == 0)
-                return OPERATION_CREATE_WIFI;
-        if (g_strcmp0 (string, "connect-hidden-wifi") == 0)
-                return OPERATION_CONNECT_HIDDEN;
-        if (g_strcmp0 (string, "connect-8021x-wifi") == 0)
-                return OPERATION_CONNECT_8021X;
-        if (g_strcmp0 (string, "connect-3g") == 0)
-                return OPERATION_CONNECT_MOBILE;
-        if (g_strcmp0 (string, "show-device") == 0)
-                return OPERATION_SHOW_DEVICE;
-
-        g_warning ("Invalid additional argument %s", string);
-        return OPERATION_NULL;
-}
-
-static void
-reset_command_line_args (CcNetworkPanel *self)
-{
-	self->priv->arg_operation = OPERATION_NULL;
-	g_clear_pointer (&self->priv->arg_device, g_free);
-	g_clear_pointer (&self->priv->arg_access_point, g_free);
-}
-
-static gboolean
-verify_argv (CcNetworkPanel *self,
-	     const char    **args)
-{
-	switch (self->priv->arg_operation) {
-	case OPERATION_CONNECT_MOBILE:
-	case OPERATION_CONNECT_8021X:
-	case OPERATION_SHOW_DEVICE:
-		if (self->priv->arg_device == NULL) {
-			g_warning ("Operation %s requires an object path", args[0]);
-		        return FALSE;
-                }
-	default:
-		return TRUE;
-	}
-}
-
-static void
-cc_network_panel_set_property (GObject      *object,
-                               guint         property_id,
-                               const GValue *value,
-                               GParamSpec   *pspec)
-{
-        CcNetworkPanel *self = CC_NETWORK_PANEL (object);
-        CcNetworkPanelPrivate *priv = self->priv;
-
-        switch (property_id) {
-        case PROP_ARGV: {
-                gchar **args;
-
-                reset_command_line_args (self);
-
-                args = g_value_get_boxed (value);
-
-                if (args) {
-                        g_debug ("Invoked with operation %s", args[0]);
-
-                        if (args[0])
-                                priv->arg_operation = cmdline_operation_from_string (args[0]);
-                        if (args[0] && args[1])
-                                priv->arg_device = g_strdup (args[1]);
-                        if (args[0] && args[1] && args[2])
-                                priv->arg_access_point = g_strdup (args[2]);
-
-                        if (verify_argv (self, (const char **) args) == FALSE) {
-                                reset_command_line_args (self);
-                                return;
-                        }
-
-                        g_debug ("Calling handle_argv() after setting property");
-                        handle_argv (self);
-                }
-                break;
-        }
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-        }
-}
-
-static void
-cc_network_panel_dispose (GObject *object)
-{
-        CcNetworkPanelPrivate *priv = CC_NETWORK_PANEL (object)->priv;
-
-        if (priv->cancellable != NULL)
-                g_cancellable_cancel (priv->cancellable);
-
-        g_clear_object (&priv->cancellable);
-        g_clear_object (&priv->builder);
-        g_clear_object (&priv->client);
-        g_clear_object (&priv->remote_settings);
-        g_clear_object (&priv->kill_switch_header);
-        g_clear_object (&priv->rfkill);
-        g_clear_pointer (&priv->killswitches, g_hash_table_destroy);
-        priv->rfkill_switch = NULL;
-
-        if (priv->refresh_idle != 0) {
-                g_source_remove (priv->refresh_idle);
-                priv->refresh_idle = 0;
-        }
-        if (priv->nm_warning_idle != 0) {
-                g_source_remove (priv->nm_warning_idle);
-                priv->nm_warning_idle = 0;
-        }
-        if (priv->add_header_widgets_idle != 0) {
-                g_source_remove (priv->add_header_widgets_idle);
-                priv->add_header_widgets_idle = 0;
-        }
-
-        G_OBJECT_CLASS (cc_network_panel_parent_class)->dispose (object);
-}
-
-static void
-cc_network_panel_finalize (GObject *object)
-{
-        CcNetworkPanel *panel = CC_NETWORK_PANEL (object);
-
-        reset_command_line_args (panel);
-
-        G_OBJECT_CLASS (cc_network_panel_parent_class)->finalize (object);
-}
-
-static const char *
-cc_network_panel_get_help_uri (CcPanel *panel)
-{
-        if (!g_strcmp0(g_getenv("XDG_CURRENT_DESKTOP"), "Unity"))
-            return "help:ubuntu-help/net";
-        else
-            return "help:gnome-help/net";
-}
-
-static void
-cc_network_panel_class_init (CcNetworkPanelClass *klass)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-	CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
-
-        g_type_class_add_private (klass, sizeof (CcNetworkPanelPrivate));
-
-	panel_class->get_help_uri = cc_network_panel_get_help_uri;
-
-        object_class->get_property = cc_network_panel_get_property;
-        object_class->set_property = cc_network_panel_set_property;
-        object_class->dispose = cc_network_panel_dispose;
-        object_class->finalize = cc_network_panel_finalize;
-
-        g_object_class_override_property (object_class, PROP_ARGV, "argv");
-}
-
-static NetObject *
-get_selected_object (CcNetworkPanel *panel)
-{
-        GtkTreeSelection *selection;
-        GtkTreeModel *model;
-        GtkTreeIter iter;
-        NetObject *object = NULL;
-
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (panel->priv->treeview));
-        if (!gtk_tree_selection_get_selected (selection, &model, &iter)) {
-                return NULL;
-        }
-
-        gtk_tree_model_get (model, &iter,
-                            PANEL_DEVICES_COLUMN_OBJECT, &object,
-                            -1);
-
-        return object;
-}
-
-static void
-select_first_device (CcNetworkPanel *panel)
-{
-        GtkTreePath *path;
-        GtkTreeSelection *selection;
-
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (panel->priv->treeview));
-
-        /* select the first device */
-        path = gtk_tree_path_new_from_string ("0");
-        gtk_tree_selection_select_path (selection, path);
-        gtk_tree_path_free (path);
-}
-
-static void
-select_tree_iter (CcNetworkPanel *panel, GtkTreeIter *iter)
-{
-        GtkTreeSelection *selection;
-
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (panel->priv->treeview));
-
-        gtk_tree_selection_select_iter (selection, iter);
-}
-
-static void
-object_removed_cb (NetObject *object, CcNetworkPanel *panel)
-{
-        gboolean ret;
-        NetObject *object_tmp;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        GtkTreeSelection *selection;
-
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (panel->priv->treeview));
-
-        /* remove device from model */
-        model = GTK_TREE_MODEL (gtk_builder_get_object (panel->priv->builder,
-                                                        "liststore_devices"));
-        ret = gtk_tree_model_get_iter_first (model, &iter);
-        if (!ret)
-                return;
-
-        /* get the other elements */
-        do {
-                gtk_tree_model_get (model, &iter,
-                                    PANEL_DEVICES_COLUMN_OBJECT, &object_tmp,
-                                    -1);
-                if (g_strcmp0 (net_object_get_id (object),
-                               net_object_get_id (object_tmp)) == 0) {
-                        g_object_unref (object_tmp);
-                        if (!gtk_list_store_remove (GTK_LIST_STORE (model), &iter))
-                                gtk_tree_model_get_iter_first (model, &iter);
-                        gtk_tree_selection_select_iter (selection, &iter);
-
-                        break;
-                }
-                g_object_unref (object_tmp);
-        } while (gtk_tree_model_iter_next (model, &iter));
-}
-
-static gboolean
-handle_argv_for_device (CcNetworkPanel *panel,
-			NMDevice       *device,
-			GtkTreeIter    *iter)
-{
-        CcNetworkPanelPrivate *priv = panel->priv;
-        NMDeviceType type;
-
-        if (priv->arg_operation == OPERATION_NULL)
-                return TRUE;
-
-        type = nm_device_get_device_type (device);
-
-        if (type == NM_DEVICE_TYPE_WIFI &&
-            (priv->arg_operation == OPERATION_CREATE_WIFI ||
-             priv->arg_operation == OPERATION_CONNECT_HIDDEN)) {
-                g_debug ("Selecting wifi device");
-                select_tree_iter (panel, iter);
-
-                if (priv->arg_operation == OPERATION_CREATE_WIFI)
-                        cc_network_panel_create_wifi_network (panel, priv->client, priv->remote_settings);
-                else
-                        cc_network_panel_connect_to_hidden_network (panel, priv->client, priv->remote_settings);
-
-                reset_command_line_args (panel); /* done */
-                return TRUE;
-        } else if (g_strcmp0 (nm_object_get_path (NM_OBJECT (device)), priv->arg_device) == 0) {
-                if (priv->arg_operation == OPERATION_CONNECT_MOBILE) {
-                        cc_network_panel_connect_to_3g_network (panel, priv->client, priv->remote_settings, device);
-
-                        reset_command_line_args (panel); /* done */
-                        select_tree_iter (panel, iter);
-                        return TRUE;
-                } else if (priv->arg_operation == OPERATION_CONNECT_8021X) {
-                        cc_network_panel_connect_to_8021x_network (panel, priv->client, priv->remote_settings, device, priv->arg_access_point);
-                        reset_command_line_args (panel); /* done */
-                        select_tree_iter (panel, iter);
-                        return TRUE;
-                }
-                else if (priv->arg_operation == OPERATION_SHOW_DEVICE) {
-                        select_tree_iter (panel, iter);
-                        reset_command_line_args (panel); /* done */
-                        return TRUE;
-                }
-        }
-
-        return FALSE;
-}
-
-static void
-handle_argv (CcNetworkPanel *panel)
-{
-        GtkTreeModel *model;
-        GtkTreeIter iter;
-        gboolean ret;
-
-        if (panel->priv->arg_operation == OPERATION_NULL)
-                return;
-
-        model = GTK_TREE_MODEL (gtk_builder_get_object (panel->priv->builder,
-                                                        "liststore_devices"));
-        ret = gtk_tree_model_get_iter_first (model, &iter);
-        while (ret) {
-                GObject *object_tmp;
-                NMDevice *device;
-                gboolean done = FALSE;
-
-                gtk_tree_model_get (model, &iter,
-                                    PANEL_DEVICES_COLUMN_OBJECT, &object_tmp,
-                                    -1);
-                if (g_object_class_find_property (G_OBJECT_GET_CLASS (object_tmp), "nm-device") != NULL) {
-                        g_object_get (object_tmp, "nm-device", &device, NULL);
-                        done = handle_argv_for_device (panel, device, &iter);
-                        g_object_unref (device);
-                }
-
-                g_object_unref (object_tmp);
-
-                if (done)
-                        return;
-
-                ret = gtk_tree_model_iter_next (model, &iter);
-        }
-
-        g_debug ("Could not handle argv operation, no matching device yet?");
-}
-
-static gboolean
-panel_add_device (CcNetworkPanel *panel, NMDevice *device)
-{
-        const gchar *title;
-        GtkListStore *liststore_devices;
-        GtkTreeIter iter;
-        NMDeviceType type;
-        NetDevice *net_device;
-        CcNetworkPanelPrivate *priv = panel->priv;
-        GtkNotebook *notebook;
-        GtkSizeGroup *size_group;
-        GType device_g_type;
-
-        /* do we have an existing object with this id? */
-        if (find_in_model_by_id (panel, nm_device_get_udi (device)) != NULL)
-                goto out;
-
-        type = nm_device_get_device_type (device);
-
-        g_debug ("device %s type %i path %s",
-                 nm_device_get_udi (device), type, nm_object_get_path (NM_OBJECT (device)));
-
-        /* map the NMDeviceType to the GType */
-        switch (type) {
-        case NM_DEVICE_TYPE_ETHERNET:
-                device_g_type = NET_TYPE_DEVICE_WIRED;
-                break;
-        case NM_DEVICE_TYPE_MODEM:
-                device_g_type = NET_TYPE_DEVICE_MOBILE;
-                break;
-        case NM_DEVICE_TYPE_WIFI:
-                device_g_type = NET_TYPE_DEVICE_WIFI;
-                break;
-        default:
-                goto out;
-        }
-
-        /* create device */
-        title = panel_device_to_localized_string (device);
-        net_device = g_object_new (device_g_type,
-                                   "panel", panel,
-                                   "removable", FALSE,
-                                   "cancellable", panel->priv->cancellable,
-                                   "client", panel->priv->client,
-                                   "remote-settings", panel->priv->remote_settings,
-                                   "nm-device", device,
-                                   "id", nm_device_get_udi (device),
-                                   "title", title,
-                                   NULL);
-
-        /* add as a panel */
-        if (device_g_type != NET_TYPE_DEVICE) {
-                notebook = GTK_NOTEBOOK (gtk_builder_get_object (panel->priv->builder,
-                                                                 "notebook_types"));
-                size_group = GTK_SIZE_GROUP (gtk_builder_get_object (panel->priv->builder,
-                                                                     "sizegroup1"));
-                net_object_add_to_notebook (NET_OBJECT (net_device),
-                                            notebook,
-                                            size_group);
-        }
-
-        liststore_devices = GTK_LIST_STORE (gtk_builder_get_object (priv->builder,
-                                            "liststore_devices"));
-        g_signal_connect_object (net_device, "removed",
-                                 G_CALLBACK (object_removed_cb), panel, 0);
-        gtk_list_store_append (liststore_devices, &iter);
-        gtk_list_store_set (liststore_devices,
-                            &iter,
-                            PANEL_DEVICES_COLUMN_ICON, panel_device_to_icon_name (device),
-                            PANEL_DEVICES_COLUMN_SORT, panel_device_to_sortable_string (device),
-                            PANEL_DEVICES_COLUMN_TITLE, title,
-                            PANEL_DEVICES_COLUMN_OBJECT, net_device,
-                            -1);
-
-out:
-        return FALSE;
-}
-
-static void
-panel_remove_device (CcNetworkPanel *panel, NMDevice *device)
-{
-        gboolean ret;
-        NetObject *object_tmp;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-
-        /* remove device from model */
-        model = GTK_TREE_MODEL (gtk_builder_get_object (panel->priv->builder,
-                                                        "liststore_devices"));
-        ret = gtk_tree_model_get_iter_first (model, &iter);
-        if (!ret)
-                return;
-
-        /* get the other elements */
-        do {
-                gtk_tree_model_get (model, &iter,
-                                    PANEL_DEVICES_COLUMN_OBJECT, &object_tmp,
-                                    -1);
-                if (g_strcmp0 (net_object_get_id (object_tmp),
-                               nm_device_get_udi (device)) == 0) {
-                        gtk_list_store_remove (GTK_LIST_STORE (model), &iter);
-                        g_object_unref (object_tmp);
-                        break;
-                }
-                g_object_unref (object_tmp);
-        } while (gtk_tree_model_iter_next (model, &iter));
-}
-
-static void
-panel_add_devices_columns (CcNetworkPanel *panel, GtkTreeView *treeview)
-{
-        CcNetworkPanelPrivate *priv = panel->priv;
-        GtkCellRenderer *renderer;
-        GtkListStore *liststore_devices;
-        GtkTreeViewColumn *column;
-
-        /* image */
-        renderer = gtk_cell_renderer_pixbuf_new ();
-        g_object_set (renderer, "stock-size", gtk_icon_size_from_name ("cc-sidebar-list"), NULL);
-        gtk_cell_renderer_set_padding (renderer, 4, 4);
-
-        column = gtk_tree_view_column_new_with_attributes ("icon", renderer,
-                                                           "icon-name", PANEL_DEVICES_COLUMN_ICON,
-                                                           NULL);
-        gtk_tree_view_append_column (treeview, column);
-
-        /* column for text */
-        renderer = gtk_cell_renderer_text_new ();
-        g_object_set (renderer,
-                      "wrap-mode", PANGO_WRAP_WORD,
-                      "ellipsize", PANGO_ELLIPSIZE_END,
-                      NULL);
-        column = gtk_tree_view_column_new_with_attributes ("title", renderer,
-                                                           "markup", PANEL_DEVICES_COLUMN_TITLE,
-                                                           NULL);
-        gtk_tree_view_column_set_sort_column_id (column, PANEL_DEVICES_COLUMN_SORT);
-        liststore_devices = GTK_LIST_STORE (gtk_builder_get_object (priv->builder,
-                                            "liststore_devices"));
-        gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (liststore_devices),
-                                              PANEL_DEVICES_COLUMN_SORT,
-                                              GTK_SORT_ASCENDING);
-        gtk_tree_view_append_column (treeview, column);
-        gtk_tree_view_column_set_expand (column, TRUE);
-}
-
-static void
-nm_devices_treeview_clicked_cb (GtkTreeSelection *selection, CcNetworkPanel *panel)
-{
-        CcNetworkPanelPrivate *priv = panel->priv;
-        const gchar *id_tmp;
-        const gchar *needle;
-        GList *l;
-        GList *panels = NULL;
-        GtkNotebook *notebook;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        GtkWidget *widget;
-        guint i = 0;
-        NetObject *object = NULL;
-
-        if (!gtk_tree_selection_get_selected (selection, &model, &iter)) {
-                g_debug ("no row selected");
-                goto out;
-        }
-
-        /* find the widget in the notebook that matches the object ID */
-        object = get_selected_object (panel);
-        needle = net_object_get_id (object);
-        notebook = GTK_NOTEBOOK (gtk_builder_get_object (priv->builder,
-                                                         "notebook_types"));
-        panels = gtk_container_get_children (GTK_CONTAINER (notebook));
-        for (l = panels; l != NULL; l = l->next) {
-                widget = GTK_WIDGET (l->data);
-                id_tmp = g_object_get_data (G_OBJECT (widget), "NetObject::id");
-                if (g_strcmp0 (needle, id_tmp) == 0) {
-                        gtk_notebook_set_current_page (notebook, i);
-
-                        /* object is deletable? */
-                        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder,
-                                                                     "remove_toolbutton"));
-                        gtk_widget_set_sensitive (widget,
-                                                  net_object_get_removable (object));
-                        break;
-                }
-                i++;
-        }
-out:
-        g_list_free (panels);
-}
-
-static void
-panel_add_proxy_device (CcNetworkPanel *panel)
-{
-        gchar *title;
-        GtkListStore *liststore_devices;
-        GtkTreeIter iter;
-        NetProxy *proxy;
-        GtkNotebook *notebook;
-        GtkSizeGroup *size_group;
-
-        /* add proxy to notebook */
-        proxy = net_proxy_new ();
-        notebook = GTK_NOTEBOOK (gtk_builder_get_object (panel->priv->builder,
-                                                         "notebook_types"));
-        size_group = GTK_SIZE_GROUP (gtk_builder_get_object (panel->priv->builder,
-                                                             "sizegroup1"));
-        net_object_add_to_notebook (NET_OBJECT (proxy),
-                                    notebook,
-                                    size_group);
-
-        /* add proxy to device list */
-        liststore_devices = GTK_LIST_STORE (gtk_builder_get_object (panel->priv->builder,
-                                            "liststore_devices"));
-        title = g_strdup_printf ("%s", _("Network proxy"));
-        gtk_list_store_append (liststore_devices, &iter);
-        gtk_list_store_set (liststore_devices,
-                            &iter,
-                            PANEL_DEVICES_COLUMN_ICON, "preferences-system-network",
-                            PANEL_DEVICES_COLUMN_TITLE, title,
-                            PANEL_DEVICES_COLUMN_SORT, "9",
-                            PANEL_DEVICES_COLUMN_OBJECT, proxy,
-                            -1);
-        g_free (title);
-        g_object_unref (proxy);
-}
-
-static void
-cc_network_panel_notify_enable_active_cb (GtkSwitch *sw,
-                                          GParamSpec *pspec,
-                                          CcNetworkPanel *panel)
-{
-	gboolean enable;
-	struct rfkill_event event;
-
-	enable = gtk_switch_get_active (sw);
-	g_debug ("Setting killswitch to %d", enable);
-
-	memset (&event, 0, sizeof(event));
-	event.op = RFKILL_OP_CHANGE_ALL;
-	event.type = RFKILL_TYPE_ALL;
-	event.soft = enable ? 1 : 0;
-	if (cc_rfkill_glib_send_event (panel->priv->rfkill, &event) < 0)
-		g_warning ("Setting the killswitch %s failed", enable ? "on" : "off");
-}
-
-static void
-connection_state_changed (NMActiveConnection *c, GParamSpec *pspec, CcNetworkPanel *panel)
-{
-}
-
-static void
-active_connections_changed (NMClient *client, GParamSpec *pspec, gpointer user_data)
-{
-        CcNetworkPanel *panel = user_data;
-        const GPtrArray *connections;
-        int i, j;
-
-        g_debug ("Active connections changed:");
-        connections = nm_client_get_active_connections (client);
-        for (i = 0; connections && (i < connections->len); i++) {
-                NMActiveConnection *connection;
-                const GPtrArray *devices;
-
-                connection = g_ptr_array_index (connections, i);
-                g_debug ("    %s", nm_object_get_path (NM_OBJECT (connection)));
-                devices = nm_active_connection_get_devices (connection);
-                for (j = 0; devices && j < devices->len; j++)
-                        g_debug ("           %s", nm_device_get_udi (g_ptr_array_index (devices, j)));
-                if (NM_IS_VPN_CONNECTION (connection))
-                        g_debug ("           VPN base connection: %s", nm_active_connection_get_specific_object (connection));
-
-                if (g_object_get_data (G_OBJECT (connection), "has-state-changed-handler") == NULL) {
-                        g_signal_connect_object (connection, "notify::state",
-                                                 G_CALLBACK (connection_state_changed), panel, 0);
-                        g_object_set_data (G_OBJECT (connection), "has-state-changed-handler", GINT_TO_POINTER (TRUE));
-                }
-        }
-}
-
-static void
-device_added_cb (NMClient *client, NMDevice *device, CcNetworkPanel *panel)
-{
-        g_debug ("New device added");
-        panel_add_device (panel, device);
-}
-
-static void
-device_removed_cb (NMClient *client, NMDevice *device, CcNetworkPanel *panel)
-{
-        g_debug ("Device removed");
-        panel_remove_device (panel, device);
-}
-
-static void
-manager_running (NMClient *client, GParamSpec *pspec, gpointer user_data)
-{
-        const GPtrArray *devices;
-        int i;
-        NMDevice *device_tmp;
-        GtkListStore *liststore_devices;
-        gboolean selected = FALSE;
-        CcNetworkPanel *panel = CC_NETWORK_PANEL (user_data);
-
-        /* clear all devices we added */
-        if (!nm_client_get_manager_running (client)) {
-                g_debug ("NM disappeared");
-                liststore_devices = GTK_LIST_STORE (gtk_builder_get_object (panel->priv->builder,
-                                                    "liststore_devices"));
-                gtk_list_store_clear (liststore_devices);
-                panel_add_proxy_device (panel);
-                goto out;
-        }
-
-        g_debug ("coldplugging devices");
-        devices = nm_client_get_devices (client);
-        if (devices == NULL) {
-                g_debug ("No devices to add");
-                return;
-        }
-        for (i = 0; i < devices->len; i++) {
-                device_tmp = g_ptr_array_index (devices, i);
-                selected = panel_add_device (panel, device_tmp) || selected;
-        }
-out:
-        if (!selected) {
-                /* select the first device */
-                select_first_device (panel);
-        }
-
-        g_debug ("Calling handle_argv() after cold-plugging devices");
-        handle_argv (panel);
-}
-
-static NetObject *
-find_in_model_by_id (CcNetworkPanel *panel, const gchar *id)
-{
-        gboolean ret;
-        NetObject *object_tmp;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        NetObject *object = NULL;
-
-        /* find in model */
-        model = GTK_TREE_MODEL (gtk_builder_get_object (panel->priv->builder,
-                                                        "liststore_devices"));
-        ret = gtk_tree_model_get_iter_first (model, &iter);
-        if (!ret)
-                goto out;
-
-        /* get the other elements */
-        ret = FALSE;
-        do {
-                gtk_tree_model_get (model, &iter,
-                                    PANEL_DEVICES_COLUMN_OBJECT, &object_tmp,
-                                    -1);
-                if (object_tmp != NULL) {
-                        g_debug ("got %s", net_object_get_id (object_tmp));
-                        if (g_strcmp0 (net_object_get_id (object_tmp), id) == 0)
-                                object = object_tmp;
-                        g_object_unref (object_tmp);
-                }
-        } while (object == NULL && gtk_tree_model_iter_next (model, &iter));
-out:
-        return object;
-}
-
-static void
-panel_add_vpn_device (CcNetworkPanel *panel, NMConnection *connection)
-{
-        gchar *title;
-        gchar *title_markup;
-        GtkListStore *liststore_devices;
-        GtkTreeIter iter;
-        NetVpn *net_vpn;
-        const gchar *id;
-        GtkNotebook *notebook;
-        GtkSizeGroup *size_group;
-
-        /* does already exist */
-        id = nm_connection_get_path (connection);
-        if (find_in_model_by_id (panel, id) != NULL)
-                return;
-
-        /* add as a virtual object */
-        net_vpn = g_object_new (NET_TYPE_VPN,
-                                "panel", panel,
-                                "removable", TRUE,
-                                "id", id,
-                                "connection", connection,
-                                "client", panel->priv->client,
-                                NULL);
-        g_signal_connect_object (net_vpn, "removed",
-                                 G_CALLBACK (object_removed_cb), panel, 0);
-
-        /* add as a panel */
-        notebook = GTK_NOTEBOOK (gtk_builder_get_object (panel->priv->builder,
-                                                         "notebook_types"));
-        size_group = GTK_SIZE_GROUP (gtk_builder_get_object (panel->priv->builder,
-                                                             "sizegroup1"));
-        net_object_add_to_notebook (NET_OBJECT (net_vpn),
-                                    notebook,
-                                    size_group);
-
-        liststore_devices = GTK_LIST_STORE (gtk_builder_get_object (panel->priv->builder,
-                                            "liststore_devices"));
-        title = g_strdup_printf (_("%s VPN"), nm_connection_get_id (connection));
-        title_markup = g_strdup (title);
-
-        net_object_set_title (NET_OBJECT (net_vpn), title);
-        gtk_list_store_append (liststore_devices, &iter);
-        gtk_list_store_set (liststore_devices,
-                            &iter,
-                            PANEL_DEVICES_COLUMN_ICON, "network-vpn",
-                            PANEL_DEVICES_COLUMN_TITLE, title_markup,
-                            PANEL_DEVICES_COLUMN_SORT, "5",
-                            PANEL_DEVICES_COLUMN_OBJECT, net_vpn,
-                            -1);
-        g_free (title);
-        g_free (title_markup);
-}
-
-static void
-add_connection (CcNetworkPanel *panel,
-                NMConnection *connection)
-{
-        NMSettingConnection *s_con;
-        const gchar *type;
-
-        s_con = NM_SETTING_CONNECTION (nm_connection_get_setting (connection,
-                                                                  NM_TYPE_SETTING_CONNECTION));
-        type = nm_setting_connection_get_connection_type (s_con);
-        if (g_strcmp0 (type, "vpn") != 0)
-                return;
-        g_debug ("add %s/%s remote connection: %s",
-                 type, g_type_name_from_instance ((GTypeInstance*)connection),
-                 nm_connection_get_path (connection));
-        panel_add_vpn_device (panel, connection);
-}
-
-static void
-notify_new_connection_cb (NMRemoteSettings *settings,
-                          NMRemoteConnection *connection,
-                          CcNetworkPanel *panel)
-{
-        add_connection (panel, NM_CONNECTION (connection));
-}
-
-static void
-notify_connections_read_cb (NMRemoteSettings *settings,
-                            CcNetworkPanel *panel)
-{
-        GSList *list, *iter;
-        NMConnection *connection;
-
-        list = nm_remote_settings_list_connections (settings);
-        g_debug ("%p has %i remote connections",
-                 panel, g_slist_length (list));
-        for (iter = list; iter; iter = g_slist_next (iter)) {
-                connection = NM_CONNECTION (iter->data);
-                add_connection (panel, connection);
-        }
-}
-
-static gboolean
-display_version_warning_idle (CcNetworkPanel *panel)
-{
-        GtkWidget  *dialog;
-        GtkWidget  *image;
-        GtkWindow  *window;
-        const char *message;
-
-        /* TRANSLATORS: the user is running a NM that is not API compatible */
-        message = _("The system network services are not compatible with this version.");
-
-        window = GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (panel)));
-        dialog = gtk_message_dialog_new (window,
-                                         GTK_DIALOG_MODAL,
-                                         GTK_MESSAGE_ERROR,
-                                         GTK_BUTTONS_CLOSE,
-                                         "%s",
-                                         message);
-        image = gtk_image_new_from_icon_name ("computer-fail", GTK_ICON_SIZE_DIALOG);
-        gtk_widget_show (image);
-        gtk_message_dialog_set_image (GTK_MESSAGE_DIALOG (dialog), image);
-
-        gtk_dialog_run (GTK_DIALOG (dialog));
-        gtk_widget_destroy (dialog);
-
-        return FALSE;
-}
-
-static gboolean
-panel_check_network_manager_version (CcNetworkPanel *panel)
-{
-        const gchar *version;
-        gchar **split = NULL;
-        guint major = 0;
-        guint micro = 0;
-        guint minor = 0;
-        gboolean ret = TRUE;
-
-        /* parse running version */
-        version = nm_client_get_version (panel->priv->client);
-        if (version != NULL) {
-                split = g_strsplit (version, ".", -1);
-                major = atoi (split[0]);
-                minor = atoi (split[1]);
-                micro = atoi (split[2]);
-        }
-
-        /* is it too new or old */
-        if (major > 0 || major > 9 || (minor <= 8 && micro < 992)) {
-                ret = FALSE;
-
-                /* do modal dialog in idle so we don't block startup */
-                panel->priv->nm_warning_idle = g_idle_add ((GSourceFunc)display_version_warning_idle, panel);
-        }
-
-        g_strfreev (split);
-        return ret;
-}
-
-static void
-add_connection_cb (GtkToolButton *button, CcNetworkPanel *panel)
-{
-        GtkWidget *dialog;
-        gint response;
-
-        dialog = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "connection_type_dialog"));
-        gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (gtk_widget_get_toplevel (GTK_WIDGET (panel))));
-
-        response = gtk_dialog_run (GTK_DIALOG (dialog));
-
-        gtk_widget_hide (dialog);
-
-        if (response == GTK_RESPONSE_OK) {
-                GtkComboBox *combo;
-                GtkTreeModel *model;
-                GtkTreeIter iter;
-                gchar *type;
-                gchar *cmdline;
-                GError *error;
-
-                combo = GTK_COMBO_BOX (gtk_builder_get_object (panel->priv->builder,
-                                                               "connection_type_combo"));
-                model = gtk_combo_box_get_model (combo);
-                gtk_combo_box_get_active_iter (combo, &iter);
-                type = NULL;
-                gtk_tree_model_get (model, &iter, 1, &type, -1);
-
-                cmdline = g_strdup_printf ("nm-connection-editor --create --type %s", type);
-                g_debug ("Launching '%s'\n", cmdline);
-
-                error = NULL;
-                if (!g_spawn_command_line_async (cmdline, &error)) {
-                        g_warning ("Failed to launch nm-connection-editor: %s", error->message);
-                        g_error_free (error);
-                }
-                g_free (cmdline);
-                g_free (type);
-        }
-}
-
-static void
-remove_connection (GtkToolButton *button, CcNetworkPanel *panel)
-{
-        NetObject *object;
-
-        /* get current device */
-        object = get_selected_object (panel);
-        if (object == NULL)
-                return;
-
-        /* delete the object */
-        net_object_delete (object);
-}
-
-static void
-on_toplevel_map (GtkWidget      *widget,
-                 CcNetworkPanel *panel)
-{
-        gboolean ret;
-
-        /* is the user compiling against a new version, but running an
-         * old daemon version? */
-        ret = panel_check_network_manager_version (panel);
-        if (ret) {
-                manager_running (panel->priv->client, NULL, panel);
-        } else {
-                /* just select the proxy settings */
-                select_first_device (panel);
-        }
-}
-
-static void
-rfkill_changed (CcRfkillGlib     *rfkill,
-		GList          *events,
-		CcNetworkPanel *panel)
-{
-	gboolean enabled;
-	GList *l;
-	GHashTableIter iter;
-	gpointer key, value;
-
-	enabled = TRUE;
-
-	for (l = events; l != NULL; l = l->next) {
-		struct rfkill_event *event = l->data;
-
-		if (event->op == RFKILL_OP_ADD)
-			g_hash_table_insert (panel->priv->killswitches,
-					     GINT_TO_POINTER (event->idx),
-					     GINT_TO_POINTER (event->soft || event->hard));
-		else if (event->op == RFKILL_OP_CHANGE)
-			g_hash_table_insert (panel->priv->killswitches,
-					     GINT_TO_POINTER (event->idx),
-					     GINT_TO_POINTER (event->soft || event->hard));
-		else if (event->op == RFKILL_OP_DEL)
-			g_hash_table_remove (panel->priv->killswitches,
-					     GINT_TO_POINTER (event->idx));
-	}
-
-	g_hash_table_iter_init (&iter, panel->priv->killswitches);
-	while (g_hash_table_iter_next (&iter, &key, &value)) {
-		int idx, state;
-
-		idx = GPOINTER_TO_INT (key);
-		state = GPOINTER_TO_INT (value);
-		g_debug ("Killswitch %d is %s", idx, state ? "enabled" : "disabled");
-
-		/* A single device that's enabled? airplane mode is off */
-		if (state == FALSE) {
-			enabled = FALSE;
-			break;
-		}
-	}
-
-	if (enabled != gtk_switch_get_active (panel->priv->rfkill_switch)) {
-		g_signal_handlers_block_by_func (panel->priv->rfkill_switch,
-						 cc_network_panel_notify_enable_active_cb,
-						 panel);
-		gtk_switch_set_active (panel->priv->rfkill_switch, enabled);
-		g_signal_handlers_unblock_by_func (panel->priv->rfkill_switch,
-						 cc_network_panel_notify_enable_active_cb,
-						 panel);
-	}
-}
-
-static gboolean
-network_add_shell_header_widgets_cb (gpointer user_data)
-{
-        CcNetworkPanel *panel = CC_NETWORK_PANEL (user_data);
-        GtkWidget *box;
-        GtkWidget *label;
-        GtkWidget *widget;
-
-        box = gtk_box_new (GTK_ORIENTATION_HORIZONTAL, 3);
-        /* TRANSLATORS: this is to disable the radio hardware in the
-         * network panel */
-        label = gtk_label_new_with_mnemonic (_("Air_plane Mode"));
-        gtk_box_pack_start (GTK_BOX (box), label, FALSE, FALSE, 0);
-        gtk_widget_set_visible (label, TRUE);
-        widget = gtk_switch_new ();
-        gtk_label_set_mnemonic_widget (GTK_LABEL (label), widget);
-        gtk_box_pack_start (GTK_BOX (box), widget, FALSE, FALSE, 0);
-        gtk_widget_show_all (box);
-        panel->priv->rfkill_switch = GTK_SWITCH (widget);
-        cc_shell_embed_widget_in_header (cc_panel_get_shell (CC_PANEL (panel)), box);
-        panel->priv->kill_switch_header = g_object_ref (box);
-
-        panel->priv->killswitches = g_hash_table_new (g_direct_hash, g_direct_equal);
-        panel->priv->rfkill = cc_rfkill_glib_new ();
-        g_signal_connect (G_OBJECT (panel->priv->rfkill), "changed",
-                          G_CALLBACK (rfkill_changed), panel);
-        if (cc_rfkill_glib_open (panel->priv->rfkill) < 0)
-                gtk_widget_hide (box);
-
-        g_signal_connect (panel->priv->rfkill_switch, "notify::active",
-                          G_CALLBACK (cc_network_panel_notify_enable_active_cb),
-                          panel);
-
-        return FALSE;
-}
-
-static void
-cc_network_panel_init (CcNetworkPanel *panel)
-{
-        DBusGConnection *bus = NULL;
-        GError *error = NULL;
-        GtkStyleContext *context;
-        GtkTreeSelection *selection;
-        GtkWidget *widget;
-        GtkWidget *toplevel;
-
-        panel->priv = NETWORK_PANEL_PRIVATE (panel);
-
-        panel->priv->builder = gtk_builder_new ();
-        gtk_builder_add_from_file (panel->priv->builder,
-                                   GNOMECC_UI_DIR "/network.ui",
-                                   &error);
-        if (error != NULL) {
-                g_warning ("Could not load interface file: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        panel->priv->cancellable = g_cancellable_new ();
-
-        panel->priv->treeview = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                                    "treeview_devices"));
-        panel_add_devices_columns (panel, GTK_TREE_VIEW (panel->priv->treeview));
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (panel->priv->treeview));
-        gtk_tree_selection_set_mode (selection, GTK_SELECTION_BROWSE);
-        g_signal_connect (selection, "changed",
-                          G_CALLBACK (nm_devices_treeview_clicked_cb), panel);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "devices_scrolledwindow"));
-        gtk_widget_set_size_request (widget, 200, -1);
-        context = gtk_widget_get_style_context (widget);
-        gtk_style_context_set_junction_sides (context, GTK_JUNCTION_BOTTOM);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "devices_toolbar"));
-        context = gtk_widget_get_style_context (widget);
-        gtk_style_context_set_junction_sides (context, GTK_JUNCTION_TOP);
-
-        /* add the virtual proxy device */
-        panel_add_proxy_device (panel);
-
-        /* use NetworkManager client */
-        panel->priv->client = nm_client_new ();
-        g_signal_connect (panel->priv->client, "notify::" NM_CLIENT_MANAGER_RUNNING,
-                          G_CALLBACK (manager_running), panel);
-        g_signal_connect (panel->priv->client, "notify::" NM_CLIENT_ACTIVE_CONNECTIONS,
-                          G_CALLBACK (active_connections_changed), panel);
-        g_signal_connect (panel->priv->client, "device-added",
-                          G_CALLBACK (device_added_cb), panel);
-        g_signal_connect (panel->priv->client, "device-removed",
-                          G_CALLBACK (device_removed_cb), panel);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "add_toolbutton"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (add_connection_cb), panel);
-
-        /* disable for now, until we actually show removable connections */
-        widget = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "remove_toolbutton"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (remove_connection), panel);
-
-        /* add remote settings such as VPN settings as virtual devices */
-        bus = dbus_g_bus_get (DBUS_BUS_SYSTEM, &error);
-        if (bus == NULL) {
-                g_warning ("Error connecting to system D-Bus: %s",
-                           error->message);
-                g_error_free (error);
-        }
-        panel->priv->remote_settings = nm_remote_settings_new (bus);
-        g_signal_connect (panel->priv->remote_settings, NM_REMOTE_SETTINGS_CONNECTIONS_READ,
-                          G_CALLBACK (notify_connections_read_cb), panel);
-        g_signal_connect (panel->priv->remote_settings, NM_REMOTE_SETTINGS_NEW_CONNECTION,
-                          G_CALLBACK (notify_new_connection_cb), panel);
-
-        toplevel = gtk_widget_get_toplevel (GTK_WIDGET (panel));
-        g_signal_connect_after (toplevel, "map", G_CALLBACK (on_toplevel_map), panel);
-
-        /* hide implementation details */
-        widget = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "notebook_types"));
-        gtk_notebook_set_show_tabs (GTK_NOTEBOOK (widget), FALSE);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder,
-                                                     "vbox1"));
-        gtk_widget_reparent (widget, (GtkWidget *) panel);
-
-        /* add kill switch widgets when dialog activated */
-        panel->priv->add_header_widgets_idle = g_idle_add (network_add_shell_header_widgets_cb, panel);
-}
-
-void
-cc_network_panel_register (GIOModule *module)
-{
-        cc_network_panel_register_type (G_TYPE_MODULE (module));
-        g_io_extension_point_implement (CC_SHELL_PANEL_EXTENSION_POINT,
-                                        CC_TYPE_NETWORK_PANEL,
-                                        "network", 0);
-}
diff --git a/panels/network/cc-network-panel.h b/panels/network/cc-network-panel.h
deleted file mode 100644
index d9b08fb..0000000
--- a/panels/network/cc-network-panel.h
+++ /dev/null
@@ -1,72 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-
-#ifndef _CC_NETWORK_PANEL_H
-#define _CC_NETWORK_PANEL_H
-
-#include <shell/cc-panel.h>
-
-G_BEGIN_DECLS
-
-#define CC_TYPE_NETWORK_PANEL cc_network_panel_get_type()
-
-#define CC_NETWORK_PANEL(obj) \
-        (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
-        CC_TYPE_NETWORK_PANEL, CcNetworkPanel))
-
-#define CC_NETWORK_PANEL_CLASS(klass) \
-        (G_TYPE_CHECK_CLASS_CAST ((klass), \
-        CC_TYPE_NETWORK_PANEL, CcNetworkPanelClass))
-
-#define CC_IS_NETWORK_PANEL(obj) \
-        (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
-        CC_TYPE_NETWORK_PANEL))
-
-#define CC_IS_NETWORK_PANEL_CLASS(klass) \
-        (G_TYPE_CHECK_CLASS_TYPE ((klass), \
-        CC_TYPE_NETWORK_PANEL))
-
-#define CC_NETWORK_PANEL_GET_CLASS(obj) \
-        (G_TYPE_INSTANCE_GET_CLASS ((obj), \
-        CC_TYPE_NETWORK_PANEL, CcNetworkPanelClass))
-
-typedef struct _CcNetworkPanel CcNetworkPanel;
-typedef struct _CcNetworkPanelClass CcNetworkPanelClass;
-typedef struct _CcNetworkPanelPrivate CcNetworkPanelPrivate;
-
-struct _CcNetworkPanel
-{
-        CcPanel parent;
-        CcNetworkPanelPrivate *priv;
-};
-
-struct _CcNetworkPanelClass
-{
-        CcPanelClass parent_class;
-};
-
-GType cc_network_panel_get_type (void) G_GNUC_CONST;
-
-void  cc_network_panel_register (GIOModule *module);
-
-G_END_DECLS
-
-#endif /* _CC_NETWORK_PANEL_H */
diff --git a/panels/network/net-device-mobile.c b/panels/network/net-device-mobile.c
deleted file mode 100644
index 18debd7..0000000
--- a/panels/network/net-device-mobile.c
+++ /dev/null
@@ -1,572 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-
-#include <nm-client.h>
-#include <nm-device.h>
-#include <nm-device-modem.h>
-#include <nm-remote-connection.h>
-
-#include "panel-common.h"
-#include "network-dialogs.h"
-
-#include "net-device-mobile.h"
-
-#define NET_DEVICE_MOBILE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_DEVICE_MOBILE, NetDeviceMobilePrivate))
-
-static void nm_device_mobile_refresh_ui (NetDeviceMobile *device_mobile);
-
-struct _NetDeviceMobilePrivate
-{
-        GtkBuilder              *builder;
-        gboolean                 updating_device;
-};
-
-enum {
-        COLUMN_ID,
-        COLUMN_TITLE,
-        COLUMN_LAST
-};
-
-G_DEFINE_TYPE (NetDeviceMobile, net_device_mobile, NET_TYPE_DEVICE)
-
-static GtkWidget *
-device_mobile_proxy_add_to_notebook (NetObject *object,
-                                     GtkNotebook *notebook,
-                                     GtkSizeGroup *heading_size_group)
-{
-        GtkWidget *widget;
-        GtkWindow *window;
-        NetDeviceMobile *device_mobile = NET_DEVICE_MOBILE (object);
-
-        /* add widgets to size group */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "heading_imei"));
-        gtk_size_group_add_widget (heading_size_group, widget);
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "heading_network"));
-        gtk_size_group_add_widget (heading_size_group, widget);
-
-        /* reparent */
-        window = GTK_WINDOW (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "window_tmp"));
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "vbox7"));
-        g_object_ref (widget);
-        gtk_container_remove (GTK_CONTAINER (window), widget);
-        gtk_notebook_append_page (notebook, widget, NULL);
-        g_object_unref (widget);
-        return widget;
-}
-
-static void
-connection_activate_cb (NMClient *client,
-                        NMActiveConnection *connection,
-                        GError *error,
-                        gpointer user_data)
-{
-        NetDeviceMobile *device_mobile = NET_DEVICE_MOBILE (user_data);
-
-        if (connection == NULL) {
-                /* failed to activate */
-                nm_device_mobile_refresh_ui (device_mobile);
-        }
-}
-
-static void
-mobile_connection_changed_cb (GtkComboBox *combo_box, NetDeviceMobile *device_mobile)
-{
-        gboolean ret;
-        gchar *object_path = NULL;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        NMConnection *connection;
-        NMDevice *device;
-        NMClient *client;
-        NMRemoteSettings *remote_settings;
-        CcNetworkPanel *panel;
-
-        if (device_mobile->priv->updating_device)
-                goto out;
-
-        ret = gtk_combo_box_get_active_iter (combo_box, &iter);
-        if (!ret)
-                goto out;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_mobile));
-        if (device == NULL)
-                goto out;
-        client = net_object_get_client (NET_OBJECT (device_mobile));
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_mobile));
-
-        /* get entry */
-        model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo_box));
-        gtk_tree_model_get (model, &iter,
-                            COLUMN_ID, &object_path,
-                            -1);
-        if (g_strcmp0 (object_path, NULL) == 0) {
-                panel = net_object_get_panel (NET_OBJECT (device_mobile));
-                cc_network_panel_connect_to_3g_network (panel,
-                                                        client,
-                                                        remote_settings,
-                                                        device);
-                goto out;
-        }
-
-        /* activate the connection */
-        g_debug ("try to switch to connection %s", object_path);
-        connection = (NMConnection*) nm_remote_settings_get_connection_by_path (remote_settings,
-                                                                                object_path);
-        if (connection != NULL) {
-                nm_device_disconnect (device, NULL, NULL);
-                nm_client_activate_connection (client,
-                                               connection,
-                                               device, NULL,
-                                               connection_activate_cb,
-                                               device_mobile);
-                goto out;
-        }
-out:
-        g_free (object_path);
-}
-
-static void
-mobilebb_enabled_toggled (NMClient       *client,
-                          GParamSpec     *pspec,
-                          NetDeviceMobile *device_mobile)
-{
-        gboolean enabled;
-        GtkSwitch *sw;
-        NMDevice *device;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_mobile));
-        if (nm_device_get_device_type (device) != NM_DEVICE_TYPE_MODEM)
-                return;
-
-        enabled = nm_client_wwan_get_enabled (client);
-        sw = GTK_SWITCH (gtk_builder_get_object (device_mobile->priv->builder,
-                                                 "device_off_switch"));
-
-        device_mobile->priv->updating_device = TRUE;
-        gtk_switch_set_active (sw, enabled);
-        device_mobile->priv->updating_device = FALSE;
-}
-
-static void
-device_add_device_connections (NetDeviceMobile *device_mobile,
-                               NMDevice *nm_device,
-                               GtkListStore *liststore,
-                               GtkComboBox *combobox)
-{
-        NetDeviceMobilePrivate *priv = device_mobile->priv;
-        GSList *filtered;
-        GSList *list, *l;
-        GtkTreeIter treeiter;
-        NMActiveConnection *active_connection;
-        NMConnection *connection;
-        NMRemoteSettings *remote_settings;
-
-        /* get the list of available connections for this device */
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_mobile));
-        g_assert (remote_settings != NULL);
-        list = nm_remote_settings_list_connections (remote_settings);
-        filtered = nm_device_filter_connections (nm_device, list);
-        gtk_list_store_clear (liststore);
-        active_connection = nm_device_get_active_connection (nm_device);
-        for (l = filtered; l; l = g_slist_next (l)) {
-                connection = NM_CONNECTION (l->data);
-                gtk_list_store_append (liststore, &treeiter);
-                gtk_list_store_set (liststore,
-                                    &treeiter,
-                                    COLUMN_ID, nm_connection_get_uuid (connection),
-                                    COLUMN_TITLE, nm_connection_get_id (connection),
-                                    -1);
-
-                /* is this already activated? */
-                if (active_connection != NULL &&
-                    g_strcmp0 (nm_connection_get_path (connection),
-                               nm_active_connection_get_connection (active_connection)) == 0) {
-                        priv->updating_device = TRUE;
-                        gtk_combo_box_set_active_iter (combobox, &treeiter);
-                        priv->updating_device = FALSE;
-                }
-        }
-
-        /* add new connection entry */
-        gtk_list_store_append (liststore, &treeiter);
-        gtk_list_store_set (liststore,
-                            &treeiter,
-                            COLUMN_ID, NULL,
-                            COLUMN_TITLE, _("Add new connection"),
-                            -1);
-
-        g_slist_free (list);
-        g_slist_free (filtered);
-}
-
-static void
-nm_device_mobile_refresh_ui (NetDeviceMobile *device_mobile)
-{
-        const char *str;
-        gboolean is_connected;
-        GString *status;
-        GtkListStore *liststore;
-        GtkWidget *widget;
-        guint speed = 0;
-        NetDeviceMobilePrivate *priv = device_mobile->priv;
-        NMClient *client;
-        NMDeviceModemCapabilities caps;
-        NMDevice *nm_device;
-
-        /* set device kind */
-        nm_device = net_device_get_nm_device (NET_DEVICE (device_mobile));
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder, "label_device"));
-        gtk_label_set_label (GTK_LABEL (widget),
-                             panel_device_to_localized_string (nm_device));
-
-        /* set up the device on/off switch */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder, "device_off_switch"));
-        gtk_widget_show (widget);
-        client = net_object_get_client (NET_OBJECT (device_mobile));
-        mobilebb_enabled_toggled (client, NULL, device_mobile);
-
-        /* set device state, with status and optionally speed */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder, "label_status"));
-        status = g_string_new (panel_device_state_to_localized_string (nm_device));
-        if (speed  > 0) {
-                g_string_append (status, " - ");
-                /* Translators: network device speed */
-                g_string_append_printf (status, _("%d Mb/s"), speed);
-        }
-        gtk_label_set_label (GTK_LABEL (widget), status->str);
-        g_string_free (status, TRUE);
-        gtk_widget_set_tooltip_text (widget, panel_device_state_reason_to_localized_string (nm_device));
-
-        /* sensitive for other connection types if the device is currently connected */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "button_options"));
-        is_connected = net_device_get_find_connection (NET_DEVICE (device_mobile)) != NULL;
-        gtk_widget_set_sensitive (widget, is_connected);
-
-        caps = nm_device_modem_get_current_capabilities (NM_DEVICE_MODEM (nm_device));
-        if ((caps & NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS) ||
-            (caps & NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO)) {
-                /* IMEI */
-                str = g_object_get_data (G_OBJECT (nm_device),
-                                         "ControlCenter::EquipmentIdentifier");
-                panel_set_device_widget_details (device_mobile->priv->builder,
-                                                 "imei",
-                                                 str);
-
-                /* operator name */
-                str = g_object_get_data (G_OBJECT (nm_device),
-                                         "ControlCenter::OperatorName");
-                panel_set_device_widget_details (device_mobile->priv->builder,
-                                                 "provider",
-                                                 str);
-        }
-
-        /* add possible connections to device */
-        liststore = GTK_LIST_STORE (gtk_builder_get_object (priv->builder,
-                                                            "liststore_mobile_connections"));
-        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder, "combobox_network"));
-        device_add_device_connections (device_mobile,
-                                       nm_device,
-                                       liststore,
-                                       GTK_COMBO_BOX (widget));
-
-        /* set IP entries */
-        panel_set_device_widgets (priv->builder, nm_device);
-}
-
-static void
-device_mobile_refresh (NetObject *object)
-{
-        NetDeviceMobile *device_mobile = NET_DEVICE_MOBILE (object);
-        nm_device_mobile_refresh_ui (device_mobile);
-}
-
-static void
-device_off_toggled (GtkSwitch *sw,
-                    GParamSpec *pspec,
-                    NetDeviceMobile *device_mobile)
-{
-        const gchar *path;
-        const GPtrArray *acs;
-        gboolean active;
-        gint i;
-        NMActiveConnection *a;
-        NMConnection *connection;
-        NMClient *client;
-
-        if (device_mobile->priv->updating_device)
-                return;
-
-        active = gtk_switch_get_active (sw);
-        if (active) {
-                client = net_object_get_client (NET_OBJECT (device_mobile));
-                connection = net_device_get_find_connection (NET_DEVICE (device_mobile));
-                if (connection == NULL)
-                        return;
-                nm_client_activate_connection (client,
-                                               connection,
-                                               net_device_get_nm_device (NET_DEVICE (device_mobile)),
-                                               NULL, NULL, NULL);
-        } else {
-                connection = net_device_get_find_connection (NET_DEVICE (device_mobile));
-                if (connection == NULL)
-                        return;
-                path = nm_connection_get_path (connection);
-                client = net_object_get_client (NET_OBJECT (device_mobile));
-                acs = nm_client_get_active_connections (client);
-                for (i = 0; i < acs->len; i++) {
-                        a = (NMActiveConnection*)acs->pdata[i];
-                        if (strcmp (nm_active_connection_get_connection (a), path) == 0) {
-                                nm_client_deactivate_connection (client, a);
-                                break;
-                        }
-                }
-        }
-}
-
-static void
-edit_connection (GtkButton *button, NetDeviceMobile *device_mobile)
-{
-        net_object_edit (NET_OBJECT (device_mobile));
-}
-
-static void
-device_mobile_device_got_modem_manager_cb (GObject *source_object,
-                                   GAsyncResult *res,
-                                   gpointer user_data)
-{
-        GError *error = NULL;
-        GVariant *result = NULL;
-        GDBusProxy *proxy;
-        NMDevice *device = (NMDevice *) user_data;
-
-        proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
-        if (proxy == NULL) {
-                g_warning ("Error creating ModemManager proxy: %s",
-                           error->message);
-                g_error_free (error);
-                goto out;
-        }
-
-        /* get the IMEI */
-        result = g_dbus_proxy_get_cached_property (proxy,
-                                                   "EquipmentIdentifier");
-
-        /* save */
-        g_object_set_data_full (G_OBJECT (device),
-                                "ControlCenter::EquipmentIdentifier",
-                                g_variant_dup_string (result, NULL),
-                                g_free);
-out:
-        if (result != NULL)
-                g_variant_unref (result);
-        if (proxy != NULL)
-                g_object_unref (proxy);
-}
-
-static void
-device_mobile_get_registration_info_cb (GObject *source_object, GAsyncResult *res, gpointer user_data)
-{
-        gchar *operator_code = NULL;
-        GError *error = NULL;
-        guint registration_status;
-        GVariant *result = NULL;
-        gchar *operator_name = NULL;
-        gchar *operator_name_safe = NULL;
-        NMDevice *device = (NMDevice *) user_data;
-
-        result = g_dbus_proxy_call_finish (G_DBUS_PROXY (source_object), res, &error);
-        if (result == NULL) {
-                g_warning ("Error getting registration info: %s\n",
-                           error->message);
-                g_error_free (error);
-                return;
-        }
-
-        /* get values */
-        g_variant_get (result, "((uss))",
-                       &registration_status,
-                       &operator_code,
-                       &operator_name);
-        if (operator_name != NULL && operator_name[0] != '\0')
-                operator_name_safe = g_strescape (operator_name, NULL);
-
-        /* save */
-        g_object_set_data_full (G_OBJECT (device),
-                                "ControlCenter::OperatorName",
-                                operator_name_safe,
-                                g_free);
-
-        g_free (operator_name);
-        g_free (operator_code);
-        g_variant_unref (result);
-}
-
-static void
-device_mobile_device_got_modem_manager_gsm_cb (GObject *source_object,
-                                       GAsyncResult *res,
-                                       gpointer user_data)
-{
-        GError *error = NULL;
-        GDBusProxy *proxy;
-        NMDevice *device = (NMDevice *) user_data;
-
-        proxy = g_dbus_proxy_new_for_bus_finish (res, &error);
-        if (proxy == NULL) {
-                g_warning ("Error creating ModemManager GSM proxy: %s\n",
-                           error->message);
-                g_error_free (error);
-                goto out;
-        }
-
-        g_dbus_proxy_call (proxy,
-                           "GetRegistrationInfo",
-                           NULL,
-                           G_DBUS_CALL_FLAGS_NONE,
-                           -1,
-                           NULL,
-                           device_mobile_get_registration_info_cb,
-                           device);
-out:
-        if (proxy != NULL)
-                g_object_unref (proxy);
-}
-
-static void
-net_device_mobile_constructed (GObject *object)
-{
-        GCancellable *cancellable;
-        NetDeviceMobile *device_mobile = NET_DEVICE_MOBILE (object);
-        NMClient *client;
-        NMDevice *device;
-
-        G_OBJECT_CLASS (net_device_mobile_parent_class)->constructed (object);
-
-        device = net_device_get_nm_device (NET_DEVICE (device_mobile));
-        cancellable = net_object_get_cancellable (NET_OBJECT (device_mobile));
-        g_dbus_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
-                                  G_DBUS_PROXY_FLAGS_NONE,
-                                  NULL,
-                                  "org.freedesktop.ModemManager",
-                                  nm_device_get_udi (device),
-                                  "org.freedesktop.ModemManager.Modem",
-                                  cancellable,
-                                  device_mobile_device_got_modem_manager_cb,
-                                  device);
-        g_dbus_proxy_new_for_bus (G_BUS_TYPE_SYSTEM,
-                                  G_DBUS_PROXY_FLAGS_NONE,
-                                  NULL,
-                                  "org.freedesktop.ModemManager",
-                                  nm_device_get_udi (device),
-                                  "org.freedesktop.ModemManager.Modem.Gsm.Network",
-                                  cancellable,
-                                  device_mobile_device_got_modem_manager_gsm_cb,
-                                  device);
-
-        client = net_object_get_client (NET_OBJECT (device_mobile));
-        g_signal_connect (client, "notify::wwan-enabled",
-                          G_CALLBACK (mobilebb_enabled_toggled),
-                          device_mobile);
-        nm_device_mobile_refresh_ui (device_mobile);
-}
-
-static void
-net_device_mobile_finalize (GObject *object)
-{
-        NetDeviceMobile *device_mobile = NET_DEVICE_MOBILE (object);
-        NetDeviceMobilePrivate *priv = device_mobile->priv;
-
-        g_object_unref (priv->builder);
-
-        G_OBJECT_CLASS (net_device_mobile_parent_class)->finalize (object);
-}
-
-static void
-net_device_mobile_class_init (NetDeviceMobileClass *klass)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        NetObjectClass *parent_class = NET_OBJECT_CLASS (klass);
-
-        object_class->finalize = net_device_mobile_finalize;
-        object_class->constructed = net_device_mobile_constructed;
-        parent_class->add_to_notebook = device_mobile_proxy_add_to_notebook;
-        parent_class->refresh = device_mobile_refresh;
-        g_type_class_add_private (klass, sizeof (NetDeviceMobilePrivate));
-}
-
-static void
-net_device_mobile_init (NetDeviceMobile *device_mobile)
-{
-        GError *error = NULL;
-        GtkWidget *widget;
-        GtkCellRenderer *renderer;
-        GtkComboBox *combobox;
-
-        device_mobile->priv = NET_DEVICE_MOBILE_GET_PRIVATE (device_mobile);
-
-        device_mobile->priv->builder = gtk_builder_new ();
-        gtk_builder_add_from_file (device_mobile->priv->builder,
-                                   GNOMECC_UI_DIR "/network-mobile.ui",
-                                   &error);
-        if (error != NULL) {
-                g_warning ("Could not load interface file: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        /* setup mobile combobox model */
-        combobox = GTK_COMBO_BOX (gtk_builder_get_object (device_mobile->priv->builder,
-                                                          "combobox_network"));
-        g_signal_connect (combobox, "changed",
-                          G_CALLBACK (mobile_connection_changed_cb),
-                          device_mobile);
-        renderer = gtk_cell_renderer_text_new ();
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (combobox),
-                                    renderer,
-                                    FALSE);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (combobox), renderer,
-                                        "text", COLUMN_TITLE,
-                                        NULL);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "device_off_switch"));
-        g_signal_connect (widget, "notify::active",
-                          G_CALLBACK (device_off_toggled), device_mobile);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "button_options"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (edit_connection), device_mobile);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_mobile->priv->builder,
-                                                     "device_off_switch"));
-        g_signal_connect (widget, "notify::active",
-                          G_CALLBACK (device_off_toggled), device_mobile);
-}
diff --git a/panels/network/net-device-mobile.h b/panels/network/net-device-mobile.h
deleted file mode 100644
index 9b24fdb..0000000
--- a/panels/network/net-device-mobile.h
+++ /dev/null
@@ -1,59 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_DEVICE_MOBILE_H
-#define __NET_DEVICE_MOBILE_H
-
-#include <glib-object.h>
-
-#include "net-device.h"
-#include "nm-connection.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_DEVICE_MOBILE          (net_device_mobile_get_type ())
-#define NET_DEVICE_MOBILE(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_DEVICE_MOBILE, NetDeviceMobile))
-#define NET_DEVICE_MOBILE_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_DEVICE_MOBILE, NetDeviceMobileClass))
-#define NET_IS_DEVICE_MOBILE(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_DEVICE_MOBILE))
-#define NET_IS_DEVICE_MOBILE_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_DEVICE_MOBILE))
-#define NET_DEVICE_MOBILE_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_DEVICE_MOBILE, NetDeviceMobileClass))
-
-typedef struct _NetDeviceMobilePrivate         NetDeviceMobilePrivate;
-typedef struct _NetDeviceMobile                NetDeviceMobile;
-typedef struct _NetDeviceMobileClass           NetDeviceMobileClass;
-
-struct _NetDeviceMobile
-{
-         NetDevice                       parent;
-         NetDeviceMobilePrivate         *priv;
-};
-
-struct _NetDeviceMobileClass
-{
-        NetDeviceClass                   parent_class;
-};
-
-GType            net_device_mobile_get_type             (void);
-
-G_END_DECLS
-
-#endif /* __NET_DEVICE_MOBILE_H */
-
diff --git a/panels/network/net-device-wifi.c b/panels/network/net-device-wifi.c
deleted file mode 100644
index ffd928c..0000000
--- a/panels/network/net-device-wifi.c
+++ /dev/null
@@ -1,2191 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-
-//#include <arpa/inet.h>
-#include <netinet/ether.h>
-
-#include <nm-client.h>
-#include <nm-utils.h>
-#include <nm-device.h>
-#include <nm-device-wifi.h>
-#include <nm-device-ethernet.h>
-#include <nm-setting-wireless-security.h>
-#include <nm-remote-connection.h>
-#include <nm-setting-wireless.h>
-
-#include "network-dialogs.h"
-#include "panel-common.h"
-#include "panel-cell-renderer-mode.h"
-#include "panel-cell-renderer-signal.h"
-#include "panel-cell-renderer-security.h"
-#include "panel-cell-renderer-separator.h"
-#include "panel-cell-renderer-text.h"
-#include "panel-cell-renderer-pixbuf.h"
-
-#include "net-device-wifi.h"
-
-#define NET_DEVICE_WIFI_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_DEVICE_WIFI, NetDeviceWifiPrivate))
-
-static void nm_device_wifi_refresh_ui (NetDeviceWifi *device_wifi);
-static void show_wifi_list (NetDeviceWifi *device_wifi);
-
-struct _NetDeviceWifiPrivate
-{
-        GtkBuilder              *builder;
-        gboolean                 updating_device;
-        gchar                   *selected_ssid_title;
-        gchar                   *selected_connection_id;
-        gchar                   *selected_ap_id;
-};
-
-G_DEFINE_TYPE (NetDeviceWifi, net_device_wifi, NET_TYPE_DEVICE)
-
-enum {
-        COLUMN_CONNECTION_ID,
-        COLUMN_ACCESS_POINT_ID,
-        COLUMN_TITLE,
-        COLUMN_SORT,
-        COLUMN_STRENGTH,
-        COLUMN_MODE,
-        COLUMN_SECURITY,
-        COLUMN_ACTIVE,
-        COLUMN_AP_IN_RANGE,
-        COLUMN_AP_OUT_OF_RANGE,
-        COLUMN_AP_IS_SAVED,
-        COLUMN_LAST
-};
-
-static GtkWidget *
-device_wifi_proxy_add_to_notebook (NetObject *object,
-                                    GtkNotebook *notebook,
-                                    GtkSizeGroup *heading_size_group)
-{
-        GtkWidget *widget;
-        GtkWindow *window;
-        NetDeviceWifi *device_wifi = NET_DEVICE_WIFI (object);
-
-        /* add widgets to size group */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "heading_ipv4"));
-        gtk_size_group_add_widget (heading_size_group, widget);
-
-        /* reparent */
-        window = GTK_WINDOW (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "window_tmp"));
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "notebook_view"));
-        g_object_ref (widget);
-        gtk_container_remove (GTK_CONTAINER (window), widget);
-        gtk_notebook_append_page (notebook, widget, NULL);
-        g_object_unref (widget);
-
-        return widget;
-}
-
-static guint
-get_access_point_security (NMAccessPoint *ap)
-{
-        NM80211ApFlags flags;
-        NM80211ApSecurityFlags wpa_flags;
-        NM80211ApSecurityFlags rsn_flags;
-        guint type;
-
-        flags = nm_access_point_get_flags (ap);
-        wpa_flags = nm_access_point_get_wpa_flags (ap);
-        rsn_flags = nm_access_point_get_rsn_flags (ap);
-
-        if (!(flags & NM_802_11_AP_FLAGS_PRIVACY) &&
-            wpa_flags == NM_802_11_AP_SEC_NONE &&
-            rsn_flags == NM_802_11_AP_SEC_NONE)
-                type = NM_AP_SEC_NONE;
-        else if ((flags & NM_802_11_AP_FLAGS_PRIVACY) &&
-                 wpa_flags == NM_802_11_AP_SEC_NONE &&
-                 rsn_flags == NM_802_11_AP_SEC_NONE)
-                type = NM_AP_SEC_WEP;
-        else if (!(flags & NM_802_11_AP_FLAGS_PRIVACY) &&
-                 wpa_flags != NM_802_11_AP_SEC_NONE &&
-                 rsn_flags != NM_802_11_AP_SEC_NONE)
-                type = NM_AP_SEC_WPA;
-        else
-                type = NM_AP_SEC_WPA2;
-
-        return type;
-}
-
-static void
-add_access_point (NetDeviceWifi *device_wifi, NMAccessPoint *ap, NMAccessPoint *active, NMDevice *device)
-{
-        const GByteArray *ssid;
-        const gchar *object_path;
-        gchar *ssid_text;
-        gboolean is_active_ap;
-        gchar *title;
-        GtkListStore *liststore_network;
-        GtkTreeIter treeiter;
-        NetDeviceWifiPrivate *priv = device_wifi->priv;
-
-        ssid = nm_access_point_get_ssid (ap);
-        if (ssid == NULL)
-                return;
-        ssid_text = nm_utils_ssid_to_utf8 (ssid);
-        title = g_markup_escape_text (ssid_text, -1);
-
-        is_active_ap = active && nm_utils_same_ssid (ssid, nm_access_point_get_ssid (active), TRUE);
-        liststore_network = GTK_LIST_STORE (gtk_builder_get_object (priv->builder,
-                                            "liststore_network"));
-
-        object_path = nm_object_get_path (NM_OBJECT (ap));
-        gtk_list_store_insert_with_values (liststore_network,
-                                           &treeiter,
-                                           -1,
-                                           COLUMN_ACCESS_POINT_ID, object_path,
-                                           COLUMN_TITLE, title,
-                                           COLUMN_SORT, ssid_text,
-                                           COLUMN_STRENGTH, nm_access_point_get_strength (ap),
-                                           COLUMN_MODE, nm_access_point_get_mode (ap),
-                                           COLUMN_SECURITY, get_access_point_security (ap),
-                                           COLUMN_ACTIVE, is_active_ap,
-                                           COLUMN_AP_IN_RANGE, TRUE,
-                                           COLUMN_AP_OUT_OF_RANGE, FALSE,
-                                           COLUMN_AP_IS_SAVED, FALSE,
-                                           -1);
-        g_free (ssid_text);
-        g_free (title);
-}
-
-static GPtrArray *
-panel_get_strongest_unique_aps (const GPtrArray *aps)
-{
-        const GByteArray *ssid;
-        const GByteArray *ssid_tmp;
-        GPtrArray *aps_unique = NULL;
-        gboolean add_ap;
-        guint i;
-        guint j;
-        NMAccessPoint *ap;
-        NMAccessPoint *ap_tmp;
-
-        /* we will have multiple entries for typical hotspots, just
-         * filter to the one with the strongest signal */
-        aps_unique = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
-        if (aps != NULL)
-                for (i = 0; i < aps->len; i++) {
-                        ap = NM_ACCESS_POINT (g_ptr_array_index (aps, i));
-
-                        /* Hidden SSIDs don't get shown in the list */
-                        ssid = nm_access_point_get_ssid (ap);
-                        if (!ssid)
-                                continue;
-
-                        add_ap = TRUE;
-
-                        /* get already added list */
-                        for (j=0; j<aps_unique->len; j++) {
-                                ap_tmp = NM_ACCESS_POINT (g_ptr_array_index (aps_unique, j));
-                                ssid_tmp = nm_access_point_get_ssid (ap_tmp);
-                                g_assert (ssid_tmp);
-
-                                /* is this the same type and data? */
-                                if (nm_utils_same_ssid (ssid, ssid_tmp, TRUE)) {
-
-                                        g_debug ("found duplicate: %s",
-                                                 nm_utils_escape_ssid (ssid_tmp->data,
-                                                                       ssid_tmp->len));
-
-                                        /* the new access point is stronger */
-                                        if (nm_access_point_get_strength (ap) >
-                                            nm_access_point_get_strength (ap_tmp)) {
-                                                g_debug ("removing %s",
-                                                         nm_utils_escape_ssid (ssid_tmp->data,
-                                                                               ssid_tmp->len));
-                                                g_ptr_array_remove (aps_unique, ap_tmp);
-                                                add_ap = TRUE;
-                                        } else {
-                                                add_ap = FALSE;
-                                        }
-
-                                        break;
-                                }
-                        }
-                        if (add_ap) {
-                                g_debug ("adding %s",
-                                         nm_utils_escape_ssid (ssid->data,
-                                                               ssid->len));
-                                g_ptr_array_add (aps_unique, g_object_ref (ap));
-                        }
-                }
-        return aps_unique;
-}
-
-static gchar *
-get_ap_security_string (NMAccessPoint *ap)
-{
-        NM80211ApSecurityFlags wpa_flags, rsn_flags;
-        NM80211ApFlags flags;
-        GString *str;
-
-        flags = nm_access_point_get_flags (ap);
-        wpa_flags = nm_access_point_get_wpa_flags (ap);
-        rsn_flags = nm_access_point_get_rsn_flags (ap);
-
-        str = g_string_new ("");
-        if ((flags & NM_802_11_AP_FLAGS_PRIVACY) &&
-            (wpa_flags == NM_802_11_AP_SEC_NONE) &&
-            (rsn_flags == NM_802_11_AP_SEC_NONE)) {
-                /* TRANSLATORS: this WEP WiFi security */
-                g_string_append_printf (str, "%s, ", _("WEP"));
-        }
-        if (wpa_flags != NM_802_11_AP_SEC_NONE) {
-                /* TRANSLATORS: this WPA WiFi security */
-                g_string_append_printf (str, "%s, ", _("WPA"));
-        }
-        if (rsn_flags != NM_802_11_AP_SEC_NONE) {
-                /* TRANSLATORS: this WPA WiFi security */
-                g_string_append_printf (str, "%s, ", _("WPA2"));
-        }
-        if ((wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X) ||
-            (rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)) {
-                /* TRANSLATORS: this Enterprise WiFi security */
-                g_string_append_printf (str, "%s, ", _("Enterprise"));
-        }
-        if (str->len > 0)
-                g_string_set_size (str, str->len - 2);
-        else {
-                g_string_append (str, C_("Wifi security", "None"));
-        }
-        return g_string_free (str, FALSE);
-}
-
-static void
-wireless_enabled_toggled (NMClient       *client,
-                          GParamSpec     *pspec,
-                          NetDeviceWifi *device_wifi)
-{
-        gboolean enabled;
-        GtkSwitch *sw;
-        NMDevice *device;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        if (nm_device_get_device_type (device) != NM_DEVICE_TYPE_WIFI)
-                return;
-
-        enabled = nm_client_wireless_get_enabled (client);
-        sw = GTK_SWITCH (gtk_builder_get_object (device_wifi->priv->builder,
-                                                 "device_off_switch"));
-
-        device_wifi->priv->updating_device = TRUE;
-        gtk_switch_set_active (sw, enabled);
-        device_wifi->priv->updating_device = FALSE;
-}
-
-#if 0
-static void
-update_off_switch_from_device_state (GtkSwitch *sw,
-                                     NMDeviceState state,
-                                     NetDeviceWifi *device_wifi)
-{
-        device_wifi->priv->updating_device = TRUE;
-        switch (state) {
-                case NM_DEVICE_STATE_UNMANAGED:
-                case NM_DEVICE_STATE_UNAVAILABLE:
-                case NM_DEVICE_STATE_DISCONNECTED:
-                case NM_DEVICE_STATE_DEACTIVATING:
-                case NM_DEVICE_STATE_FAILED:
-                        gtk_switch_set_active (sw, FALSE);
-                        break;
-                default:
-                        gtk_switch_set_active (sw, TRUE);
-                        break;
-        }
-        device_wifi->priv->updating_device = FALSE;
-}
-#endif
-
-static NMConnection *
-find_connection_for_device (NetDeviceWifi *device_wifi,
-                            NMDevice       *device)
-{
-        NetDevice *tmp;
-        NMConnection *connection;
-        NMRemoteSettings *remote_settings;
-        NMClient *client;
-
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        tmp = g_object_new (NET_TYPE_DEVICE,
-                            "client", client,
-                            "remote-settings", remote_settings,
-                            "nm-device", device,
-                            NULL);
-        connection = net_device_get_find_connection (tmp);
-        g_object_unref (tmp);
-        return connection;
-}
-
-static gboolean
-connection_is_shared (NMConnection *c)
-{
-        NMSettingIP4Config *s_ip4;
-
-        s_ip4 = nm_connection_get_setting_ip4_config (c);
-        if (g_strcmp0 (nm_setting_ip4_config_get_method (s_ip4),
-                       NM_SETTING_IP4_CONFIG_METHOD_SHARED) != 0) {
-                return FALSE;
-        }
-
-        return TRUE;
-}
-
-static gboolean
-device_is_hotspot (NetDeviceWifi *device_wifi)
-{
-        NMConnection *c;
-        NMDevice *device;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        c = find_connection_for_device (device_wifi, device);
-        if (c == NULL)
-                return FALSE;
-
-        return connection_is_shared (c);
-}
-
-static const GByteArray *
-device_get_hotspot_ssid (NetDeviceWifi *device_wifi,
-                         NMDevice *device)
-{
-        NMConnection *c;
-        NMSettingWireless *sw;
-
-        c = find_connection_for_device (device_wifi, device);
-        if (c == NULL) {
-                return FALSE;
-        }
-
-        sw = nm_connection_get_setting_wireless (c);
-        return nm_setting_wireless_get_ssid (sw);
-}
-
-static void
-get_secrets_cb (NMRemoteConnection *c,
-                GHashTable         *secrets,
-                GError             *error,
-                gpointer            data)
-{
-        NetDeviceWifi *device_wifi = data;
-        NMSettingWireless *sw;
-
-        sw = nm_connection_get_setting_wireless (NM_CONNECTION (c));
-
-        nm_connection_update_secrets (NM_CONNECTION (c),
-                                      nm_setting_wireless_get_security (sw),
-                                      secrets, NULL);
-
-        nm_device_wifi_refresh_ui (device_wifi);
-}
-
-static void
-device_get_hotspot_security_details (NetDeviceWifi *device_wifi,
-                                     NMDevice *device,
-                                     gchar **secret,
-                                     gchar **security)
-{
-        NMConnection *c;
-        NMSettingWireless *sw;
-        NMSettingWirelessSecurity *sws;
-        const gchar *key_mgmt;
-        const gchar *tmp_secret;
-        const gchar *tmp_security;
-
-        c = find_connection_for_device (device_wifi, device);
-        if (c == NULL)
-                return;
-
-        sw = nm_connection_get_setting_wireless (c);
-        sws = nm_connection_get_setting_wireless_security (c);
-        if (sw == NULL || sws == NULL)
-                return;
-
-        tmp_secret = NULL;
-        tmp_security = C_("Wifi security", "None");
-
-        key_mgmt = nm_setting_wireless_security_get_key_mgmt (sws);
-        if (strcmp (key_mgmt, "none") == 0) {
-                tmp_secret = nm_setting_wireless_security_get_wep_key (sws, 0);
-                tmp_security = _("WEP");
-        }
-        else if (strcmp (key_mgmt, "wpa-none") == 0) {
-                tmp_secret = nm_setting_wireless_security_get_psk (sws);
-                tmp_security = _("WPA");
-        } else {
-                g_warning ("unhandled security key-mgmt: %s", key_mgmt);
-        }
-
-        /* If we don't have secrets, request them from NM and bail.
-         * We'll refresh the UI when secrets arrive.
-         */
-        if (tmp_secret == NULL) {
-                nm_remote_connection_get_secrets ((NMRemoteConnection*)c,
-                                                  nm_setting_wireless_get_security (sw),
-                                                  get_secrets_cb,
-                                                  device_wifi);
-                return;
-        }
-
-        if (secret)
-                *secret = g_strdup (tmp_secret);
-        if (security)
-                *security = g_strdup (tmp_security);
-}
-
-static void
-device_wifi_refresh_aps (NetDeviceWifi *device_wifi)
-{
-        const GPtrArray *aps;
-        GPtrArray *aps_unique = NULL;
-        GtkListStore *liststore_network;
-        guint i;
-        NMAccessPoint *active_ap;
-        NMAccessPoint *ap;
-        NMDevice *nm_device;
-
-        /* populate access points */
-        liststore_network = GTK_LIST_STORE (gtk_builder_get_object (device_wifi->priv->builder,
-                                                                    "liststore_network"));
-        device_wifi->priv->updating_device = TRUE;
-        gtk_list_store_clear (liststore_network);
-        nm_device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        aps = nm_device_wifi_get_access_points (NM_DEVICE_WIFI (nm_device));
-        aps_unique = panel_get_strongest_unique_aps (aps);
-        active_ap = nm_device_wifi_get_active_access_point (NM_DEVICE_WIFI (nm_device));
-
-        for (i = 0; i < aps_unique->len; i++) {
-                ap = NM_ACCESS_POINT (g_ptr_array_index (aps_unique, i));
-                add_access_point (device_wifi, ap, active_ap, nm_device);
-        }
-
-        device_wifi->priv->updating_device = FALSE;
-        g_ptr_array_unref (aps_unique);
-}
-
-static gboolean
-find_ssid_in_store (GtkTreeModel *model, GtkTreeIter *iter, const gchar *ssid)
-{
-        gboolean found;
-        gchar *sort;
-
-        found = gtk_tree_model_get_iter_first (model, iter);
-
-        while (found) {
-                gtk_tree_model_get (model, iter,
-                                    COLUMN_SORT, &sort,
-                                    -1);
-                if (g_strcmp0 (ssid, sort) == 0) {
-                        g_free (sort);
-                        return TRUE;
-                }
-                g_free (sort);
-                found = gtk_tree_model_iter_next (model, iter);
-        }
-
-        return FALSE;
-
-}
-
-static void
-add_saved_connection (NetDeviceWifi *device_wifi, NMConnection *connection, NMDevice *nm_device)
-{
-        const GByteArray *ssid;
-        const gchar *id;
-        gchar *ssid_text;
-        gchar *title;
-        GtkListStore *store;
-        GtkTreeIter iter;
-        NMSetting *setting;
-
-        setting = nm_connection_get_setting_by_name (connection, NM_SETTING_WIRELESS_SETTING_NAME);
-
-        if (setting == NULL)
-                return;
-
-        ssid = nm_setting_wireless_get_ssid (NM_SETTING_WIRELESS (setting));
-        ssid_text = nm_utils_ssid_to_utf8 (ssid);
-        title = g_markup_escape_text (ssid_text, -1);
-        g_debug ("got saved %s", title);
-
-        id = nm_connection_get_path (connection);
-
-        store = GTK_LIST_STORE (gtk_builder_get_object (device_wifi->priv->builder,
-                                                        "liststore_network"));
-        if (find_ssid_in_store (GTK_TREE_MODEL (store), &iter, ssid_text))
-                gtk_list_store_set (store, &iter,
-                                    COLUMN_CONNECTION_ID, id,
-                                    COLUMN_AP_IS_SAVED, TRUE,
-                                    -1);
-        else
-                gtk_list_store_insert_with_values (store, &iter,
-                                                   -1,
-                                                   COLUMN_CONNECTION_ID, id,
-                                                   COLUMN_TITLE, title,
-                                                   COLUMN_SORT, ssid_text,
-                                                   COLUMN_STRENGTH, 0,
-                                                   COLUMN_MODE, 0,
-                                                   COLUMN_SECURITY, 0,
-                                                   COLUMN_ACTIVE, FALSE,
-                                                   COLUMN_AP_IN_RANGE, FALSE,
-                                                   COLUMN_AP_OUT_OF_RANGE, TRUE,
-                                                   COLUMN_AP_IS_SAVED, TRUE,
-                                                   -1);
-        g_free (title);
-        g_free (ssid_text);
-}
-
-static void
-device_wifi_refresh_saved_connections (NetDeviceWifi *device_wifi)
-{
-        GSList *connections;
-        GSList *filtered;
-        GSList *l;
-        NMDevice *nm_device;
-        NMRemoteSettings *remote_settings;
-
-        /* add stored connections */
-        device_wifi->priv->updating_device = TRUE;
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        connections = nm_remote_settings_list_connections (remote_settings);
-        nm_device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        filtered = nm_device_filter_connections (nm_device, connections);
-        for (l = filtered; l; l = l->next) {
-                NMConnection *connection = l->data;
-                if (!connection_is_shared (connection))
-                        add_saved_connection (device_wifi, connection, nm_device);
-        }
-        device_wifi->priv->updating_device = FALSE;
-
-        g_slist_free (connections);
-        g_slist_free (filtered);
-}
-
-static void
-nm_device_wifi_refresh_hotspot (NetDeviceWifi *device_wifi)
-{
-        const GByteArray *ssid;
-        gchar *hotspot_secret = NULL;
-        gchar *hotspot_security = NULL;
-        gchar *hotspot_ssid = NULL;
-        NMDevice *nm_device;
-
-        /* refresh hotspot ui */
-        nm_device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        ssid = device_get_hotspot_ssid (device_wifi, nm_device);
-        if (ssid)
-                hotspot_ssid = nm_utils_ssid_to_utf8 (ssid);
-        device_get_hotspot_security_details (device_wifi,
-                                             nm_device,
-                                             &hotspot_secret,
-                                             &hotspot_security);
-
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "hotspot_network_name",
-                                         hotspot_ssid);
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "hotspot_security_key",
-                                         hotspot_secret);
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "hotspot_security",
-                                         hotspot_security);
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "hotspot_connected",
-                                         NULL);
-
-        g_free (hotspot_secret);
-        g_free (hotspot_security);
-        g_free (hotspot_ssid);
-}
-
-static void
-update_last_used (NetDeviceWifi *device_wifi)
-{
-        NetDeviceWifiPrivate *priv = device_wifi->priv;
-        gchar *last_used = NULL;
-        GDateTime *now = NULL;
-        GDateTime *then = NULL;
-        gint days;
-        GTimeSpan diff;
-        guint64 timestamp;
-        NMRemoteConnection *connection;
-        NMRemoteSettings *settings;
-        NMSettingConnection *s_con;
-
-        if (priv->selected_connection_id == NULL)
-                goto out;
-
-        settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        connection = nm_remote_settings_get_connection_by_path (settings,
-                                                                priv->selected_connection_id);
-        s_con = nm_connection_get_setting_connection (NM_CONNECTION (connection));
-        if (s_con == NULL)
-                goto out;
-        timestamp = nm_setting_connection_get_timestamp (s_con);
-        if (timestamp == 0) {
-                last_used = g_strdup (_("never"));
-                goto out;
-        }
-
-        /* calculate the amount of time that has elapsed */
-        now = g_date_time_new_now_utc ();
-        then = g_date_time_new_from_unix_utc (timestamp);
-        diff = g_date_time_difference  (now, then);
-        days = diff / G_TIME_SPAN_DAY;
-        if (days == 0)
-                last_used = g_strdup (_("today"));
-        else if (days == 1)
-                last_used = g_strdup (_("yesterday"));
-        else
-                last_used = g_strdup_printf (ngettext ("%i day ago", "%i days ago", days), days);
-out:
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "last_used",
-                                         last_used);
-        if (now != NULL)
-                g_date_time_unref (now);
-        if (then != NULL)
-                g_date_time_unref (then);
-        g_free (last_used);
-}
-
-static void
-nm_device_wifi_refresh_ui (NetDeviceWifi *device_wifi)
-{
-        const gchar *str;
-        gboolean is_hotspot;
-        gchar *str_tmp = NULL;
-        GtkWidget *widget;
-        gint strength = 0;
-        guint speed = 0;
-        NMAccessPoint *active_ap;
-        NMDevice *nm_device;
-        NMDeviceState state;
-        NMClient *client;
-        NMAccessPoint *ap;
-        NetDeviceWifiPrivate *priv = device_wifi->priv;
-
-        is_hotspot = device_is_hotspot (device_wifi);
-        if (is_hotspot) {
-                nm_device_wifi_refresh_hotspot (device_wifi);
-                return;
-        }
-
-        nm_device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-
-        if (priv->selected_ap_id) {
-                ap = nm_device_wifi_get_access_point_by_path (NM_DEVICE_WIFI (nm_device),
-                                                              priv->selected_ap_id);
-        }
-        else {
-                ap = NULL;
-        }
-
-        active_ap = nm_device_wifi_get_active_access_point (NM_DEVICE_WIFI (nm_device));
-
-        state = nm_device_get_state (nm_device);
-
-        /* keep this in sync with the signal handler setup in cc_network_panel_init */
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        wireless_enabled_toggled (client, NULL, device_wifi);
-
-        if (ap != active_ap)
-                speed = 0;
-        else if (state != NM_DEVICE_STATE_UNAVAILABLE)
-                speed = nm_device_wifi_get_bitrate (NM_DEVICE_WIFI (nm_device));
-        speed /= 1000;
-        if (speed > 0) {
-                /* Translators: network device speed */
-                str_tmp = g_strdup_printf (_("%d Mb/s"), speed);
-        }
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "speed",
-                                         str_tmp);
-
-        /* set device state, with status and optionally speed */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "label_status"));
-        if (ap != active_ap) {
-                if (ap)
-                        gtk_label_set_label (GTK_LABEL (widget), _("Not connected"));
-                else
-                        gtk_label_set_label (GTK_LABEL (widget), _("Out of range"));
-                gtk_widget_set_tooltip_text (widget, "");
-        } else {
-                gtk_label_set_label (GTK_LABEL (widget),
-                                     panel_device_state_to_localized_string (nm_device));
-                gtk_widget_set_tooltip_text (widget, panel_device_state_reason_to_localized_string (nm_device));
-        }
-
-        /* device MAC */
-        str = nm_device_wifi_get_hw_address (NM_DEVICE_WIFI (nm_device));
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "mac",
-                                         str);
-        /* security */
-        if (ap != active_ap)
-                str_tmp = NULL;
-        else if (active_ap != NULL)
-                str_tmp = get_ap_security_string (active_ap);
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "security",
-                                         str_tmp);
-        g_free (str_tmp);
-
-        /* signal strength */
-        if (ap != NULL)
-                strength = nm_access_point_get_strength (ap);
-        else
-                strength = 0;
-        if (strength <= 0)
-                str = NULL;
-        else if (strength < 20)
-                str = C_("Signal strength", "None");
-        else if (strength < 40)
-                str = C_("Signal strength", "Weak");
-        else if (strength < 50)
-                str = C_("Signal strength", "Ok");
-        else if (strength < 80)
-                str = C_("Signal strength", "Good");
-        else
-                str = C_("Signal strength", "Excellent");
-        panel_set_device_widget_details (device_wifi->priv->builder,
-                                         "strength",
-                                         str);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "label_device"));
-        gtk_label_set_label (GTK_LABEL (widget),
-                             priv->selected_ssid_title ? priv->selected_ssid_title : panel_device_to_localized_string (nm_device));
-
-        /* only disconnect when connection active */
-        if (ap == active_ap) {
-                widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                             "button_disconnect1"));
-                gtk_widget_set_sensitive (widget, state == NM_DEVICE_STATE_ACTIVATED);
-                gtk_widget_show (widget);
-                widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                             "button_connect1"));
-                gtk_widget_hide (widget);
-        } else {
-                widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                             "button_disconnect1"));
-                gtk_widget_hide (widget);
-                widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                             "button_connect1"));
-                gtk_widget_show (widget);
-                gtk_widget_set_sensitive (widget, ap != NULL);
-        }
-
-        /* device MAC */
-        if (ap != active_ap)
-                str = NULL;
-        else
-                str = nm_device_wifi_get_hw_address (NM_DEVICE_WIFI (nm_device));
-        panel_set_device_widget_details (priv->builder, "mac", str);
-
-        /* set IP entries */
-        if (ap != active_ap)
-                panel_unset_device_widgets (priv->builder);
-        else
-                panel_set_device_widgets (priv->builder, nm_device);
-
-        if (ap != active_ap)
-                update_last_used (device_wifi);
-        else
-                panel_set_device_widget_details (priv->builder, "last_used", NULL);
-
-        /* update list of APs */
-        device_wifi_refresh_aps (device_wifi);
-        device_wifi_refresh_saved_connections (device_wifi);
-}
-
-static void
-device_wifi_refresh (NetObject *object)
-{
-        NetDeviceWifi *device_wifi = NET_DEVICE_WIFI (object);
-        nm_device_wifi_refresh_ui (device_wifi);
-}
-
-static void
-device_off_toggled (GtkSwitch *sw,
-                    GParamSpec *pspec,
-                    NetDeviceWifi *device_wifi)
-{
-        NMClient *client;
-        gboolean active;
-
-        if (device_wifi->priv->updating_device)
-                return;
-
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        active = gtk_switch_get_active (sw);
-        nm_client_wireless_set_enabled (client, active);
-}
-
-
-static gboolean
-find_connection_id_in_store (GtkTreeModel *model,
-                             GtkTreeIter  *iter,
-                             const gchar  *connection_id)
-{
-        gboolean found;
-        gchar *id;
-
-        found = gtk_tree_model_get_iter_first (model, iter);
-        while (found) {
-                gtk_tree_model_get (model, iter,
-                                    COLUMN_CONNECTION_ID, &id,
-                                    -1);
-                if (g_strcmp0 (connection_id, id) == 0) {
-                        g_free (id);
-                        return TRUE;
-                }
-                g_free (id);
-                found = gtk_tree_model_iter_next (model, iter);
-        }
-        return FALSE;
-}
-
-static void
-forget_network_connection_delete_cb (NMRemoteConnection *connection,
-                                     GError *error,
-                                     gpointer user_data)
-{
-        gboolean ret;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        GtkTreeView *treeview;
-
-        NetDeviceWifi *device_wifi = NET_DEVICE_WIFI (user_data);
-
-        if (error != NULL) {
-                g_warning ("failed to delete connection %s: %s",
-                           nm_object_get_path (NM_OBJECT (connection)),
-                           error->message);
-                return;
-        }
-
-        /* remove the entry from the list */
-        treeview = GTK_TREE_VIEW (gtk_builder_get_object (device_wifi->priv->builder,
-                                                         "treeview_list"));
-        model = gtk_tree_view_get_model (treeview);
-        ret = find_connection_id_in_store (model, &iter,
-                                           device_wifi->priv->selected_connection_id);
-        if (ret)
-                gtk_list_store_remove (GTK_LIST_STORE (model), &iter);
-        show_wifi_list (device_wifi);
-}
-
-static void
-forget_network_response_cb (GtkWidget *dialog,
-                            gint response,
-                            NetDeviceWifi *device_wifi)
-{
-        NMRemoteConnection *connection;
-        NMRemoteSettings *remote_settings;
-
-        if (response != GTK_RESPONSE_OK)
-                goto out;
-
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        connection = nm_remote_settings_get_connection_by_path (remote_settings, device_wifi->priv->selected_connection_id);
-        if (connection == NULL) {
-                g_warning ("failed to get remote connection");
-                goto out;
-        }
-
-        /* delete the connection */
-        g_debug ("deleting %s", device_wifi->priv->selected_connection_id);
-        nm_remote_connection_delete (connection,
-                                     forget_network_connection_delete_cb,
-                                     device_wifi);
-out:
-        gtk_widget_destroy (dialog);
-}
-
-static void
-disconnect_button_clicked_cb (GtkButton *button, NetDeviceWifi *device_wifi)
-{
-        NMDevice *device;
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        if (device == NULL)
-                return;
-        nm_device_disconnect (device, NULL, NULL);
-}
-
-static void activate_connection (NetDeviceWifi *device, const gchar *id);
-
-static void
-connect_button_clicked_cb (GtkButton *button, NetDeviceWifi *device_wifi)
-{
-        if (device_wifi->priv->selected_connection_id)
-                activate_connection (device_wifi, device_wifi->priv->selected_connection_id);
-}
-
-static void
-forget_button_clicked_cb (GtkButton *button, NetDeviceWifi *device_wifi)
-{
-        gchar *ssid_pretty = NULL;
-        gchar *warning = NULL;
-        GtkWidget *dialog;
-        GtkWidget *window;
-        CcNetworkPanel *panel;
-
-        ssid_pretty = g_strdup_printf ("<b>%s</b>", device_wifi->priv->selected_ssid_title);
-        warning = g_strdup_printf (_("Network details for %s including password and any custom configuration will be lost."), ssid_pretty);
-        panel = net_object_get_panel (NET_OBJECT (device_wifi));
-        window = gtk_widget_get_toplevel (GTK_WIDGET (panel));
-        dialog = gtk_message_dialog_new (GTK_WINDOW (window),
-                                         GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
-                                         GTK_MESSAGE_OTHER,
-                                         GTK_BUTTONS_NONE,
-                                         NULL);
-        gtk_message_dialog_set_markup (GTK_MESSAGE_DIALOG (dialog), warning);
-        gtk_dialog_add_buttons (GTK_DIALOG (dialog),
-                                _("_Cancel"), GTK_RESPONSE_CANCEL,
-                                _("Forget"), GTK_RESPONSE_OK,
-                                NULL);
-        g_signal_connect (dialog, "response",
-                          G_CALLBACK (forget_network_response_cb), device_wifi);
-        gtk_window_present (GTK_WINDOW (dialog));
-
-        g_free (ssid_pretty);
-        g_free (warning);
-}
-
-
-static void
-connect_to_hidden_network (NetDeviceWifi *device_wifi)
-{
-        NMRemoteSettings *remote_settings;
-        NMClient *client;
-        CcNetworkPanel *panel;
-
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        panel = net_object_get_panel (NET_OBJECT (device_wifi));
-        cc_network_panel_connect_to_hidden_network (panel, client, remote_settings);
-}
-
-static void
-connection_add_activate_cb (NMClient *client,
-                            NMActiveConnection *connection,
-                            const char *path,
-                            GError *error,
-                            gpointer user_data)
-{
-        NetDeviceWifi *device_wifi = user_data;
-
-        if (connection == NULL) {
-                /* failed to activate */
-                g_debug ("Failed to add and activate connection '%d': %s",
-                         error->code,
-                         error->message);
-                nm_device_wifi_refresh_ui (device_wifi);
-        }
-}
-
-static void
-connection_activate_cb (NMClient *client,
-                        NMActiveConnection *connection,
-                        GError *error,
-                        gpointer user_data)
-{
-        NetDeviceWifi *device_wifi = user_data;
-
-        if (connection == NULL) {
-                /* failed to activate */
-                g_debug ("Failed to activate connection '%d': %s",
-                         error->code,
-                         error->message);
-                nm_device_wifi_refresh_ui (device_wifi);
-        }
-}
-
-static void
-activate_connection (NetDeviceWifi *device_wifi,
-                     const gchar   *connection_id)
-{
-        NMDevice *device;
-        NMClient *client;
-        NMRemoteSettings *settings;
-        NMRemoteConnection *connection;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        connection = nm_remote_settings_get_connection_by_path (settings, connection_id);
-        nm_client_activate_connection (client,
-                                       NM_CONNECTION (connection),
-                                       device, NULL,
-                                       connection_activate_cb, device_wifi);
-}
-
-static gboolean
-is_8021x (NMDevice   *device,
-          const char *ap_object_path)
-{
-        NM80211ApSecurityFlags wpa_flags, rsn_flags;
-        NMAccessPoint *ap;
-
-        ap = nm_device_wifi_get_access_point_by_path (NM_DEVICE_WIFI (device),
-                                                      ap_object_path);
-        if (!ap)
-                return FALSE;
-
-        rsn_flags = nm_access_point_get_rsn_flags (ap);
-        if (rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)
-                return TRUE;
-
-        wpa_flags = nm_access_point_get_wpa_flags (ap);
-        if (wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)
-                return TRUE;
-        return FALSE;
-}
-
-static void
-wireless_try_to_connect (NetDeviceWifi *device_wifi,
-                         const gchar *ssid_target,
-                         const gchar *ap_object_path)
-{
-        const GByteArray *ssid;
-        gchar *ssid_tmp = NULL;
-        GSList *list, *l;
-        GSList *filtered;
-        NMConnection *connection_activate = NULL;
-        NMDevice *device;
-        NMSettingWireless *setting_wireless;
-        NMRemoteSettings *remote_settings;
-        NMClient *client;
-
-        if (device_wifi->priv->updating_device)
-                goto out;
-
-        if (ap_object_path == NULL || ap_object_path[0] == 0)
-                goto out;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        if (device == NULL)
-                goto out;
-
-        g_debug ("try to connect to WIFI network %s [%s]",
-                 ssid_target, ap_object_path);
-
-        /* look for an existing connection we can use */
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        list = nm_remote_settings_list_connections (remote_settings);
-        g_debug ("%i existing remote connections available", g_slist_length (list));
-        filtered = nm_device_filter_connections (device, list);
-        g_debug ("%i suitable remote connections to check", g_slist_length (filtered));
-        for (l = filtered; l; l = g_slist_next (l)) {
-                NMConnection *connection;
-
-                connection = NM_CONNECTION (l->data);
-                setting_wireless = nm_connection_get_setting_wireless (connection);
-                if (!NM_IS_SETTING_WIRELESS (setting_wireless))
-                        continue;
-                ssid = nm_setting_wireless_get_ssid (setting_wireless);
-                if (ssid == NULL)
-                        continue;
-                ssid_tmp = nm_utils_ssid_to_utf8 (ssid);
-                if (g_strcmp0 (ssid_target, ssid_tmp) == 0) {
-                        g_debug ("we found an existing connection %s to activate!",
-                                 nm_connection_get_id (connection));
-                        connection_activate = connection;
-                        break;
-                }
-                g_free (ssid_tmp);
-                ssid_tmp = NULL;
-        }
-
-        g_free (ssid_tmp);
-        g_slist_free (list);
-        g_slist_free (filtered);
-
-        /* activate the connection */
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        if (connection_activate != NULL) {
-                nm_client_activate_connection (client,
-                                               connection_activate,
-                                               device, NULL,
-                                               connection_activate_cb, device_wifi);
-                goto out;
-        }
-
-        /* create one, as it's missing */
-        g_debug ("no existing connection found for %s, creating", ssid_target);
-
-        if (!is_8021x (device, ap_object_path)) {
-                g_debug ("no existing connection found for %s, creating and activating one", ssid_target);
-                nm_client_add_and_activate_connection (client,
-                                                       NULL,
-                                                       device, ap_object_path,
-                                                       connection_add_activate_cb, device_wifi);
-        } else {
-                CcNetworkPanel *panel;
-                GPtrArray *array;
-
-                g_debug ("no existing connection found for %s, creating", ssid_target);
-                array = g_ptr_array_new ();
-                g_ptr_array_add (array, "connect-8021x-wifi");
-                g_ptr_array_add (array, (gpointer) nm_object_get_path (NM_OBJECT (device)));
-                g_ptr_array_add (array, (gpointer) ap_object_path);
-                g_ptr_array_add (array, NULL);
-
-                panel = net_object_get_panel (NET_OBJECT (device_wifi));
-                g_object_set (G_OBJECT (panel), "argv", array->pdata, NULL);
-
-                g_ptr_array_free (array, FALSE);
-        }
-out:
-        return;
-}
-
-static gint
-wireless_ap_model_sort_cb (GtkTreeModel *model,
-                           GtkTreeIter *a,
-                           GtkTreeIter *b,
-                           gpointer user_data)
-{
-        gboolean active_a;
-        gboolean active_b;
-        gboolean ap_a;
-        gboolean ap_b;
-        gchar *str_a;
-        gchar *str_b;
-        gint retval;
-        gint strength_a;
-        gint strength_b;
-
-        gtk_tree_model_get (model, a,
-                            COLUMN_SORT, &str_a,
-                            COLUMN_STRENGTH, &strength_a,
-                            COLUMN_ACTIVE, &active_a,
-                            COLUMN_AP_IN_RANGE, &ap_a,
-                            -1);
-        gtk_tree_model_get (model, b,
-                            COLUMN_SORT, &str_b,
-                            COLUMN_STRENGTH, &strength_b,
-                            COLUMN_ACTIVE, &active_b,
-                            COLUMN_AP_IN_RANGE, &ap_b,
-                            -1);
-
-        /* active entry first */
-        if (active_a) {
-                retval = -1;
-                goto out;
-        }
-
-        if (active_b) {
-                retval = 1;
-                goto out;
-        }
-
-        /* aps before connections */
-        if (ap_a && !ap_b) {
-                retval = -1;
-                goto out;
-        }
-        if (!ap_a && ap_b) {
-                retval = 1;
-                goto out;
-        }
-
-        /* case sensitive search like before */
-        retval = strength_b - strength_a;
-out:
-        g_free (str_a);
-        g_free (str_b);
-
-        return retval;
-}
-
-static GByteArray *
-ssid_to_byte_array (const gchar *ssid)
-{
-        guint32 len;
-        GByteArray *ba;
-
-        len = strlen (ssid);
-        ba = g_byte_array_sized_new (len);
-        g_byte_array_append (ba, (guchar *)ssid, len);
-
-        return ba;
-}
-
-static gchar *
-get_hostname (void)
-{
-        GDBusConnection *bus;
-        GVariant *res;
-        GVariant *inner;
-        gchar *str;
-        GError *error;
-
-        error = NULL;
-        bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-        if (error != NULL) {
-                g_warning ("Failed to get system bus connection: %s", error->message);
-                g_error_free (error);
-
-                return NULL;
-        }
-        res = g_dbus_connection_call_sync (bus,
-                                           "org.freedesktop.hostname1",
-                                           "/org/freedesktop/hostname1",
-                                           "org.freedesktop.DBus.Properties",
-                                           "Get",
-                                           g_variant_new ("(ss)",
-                                                          "org.freedesktop.hostname1",
-                                                          "PrettyHostname"),
-                                           (GVariantType*)"(v)",
-                                           G_DBUS_CALL_FLAGS_NONE,
-                                           -1,
-                                           NULL,
-                                           &error);
-        g_object_unref (bus);
-
-        if (error != NULL) {
-                g_warning ("Getting pretty hostname failed: %s", error->message);
-                g_error_free (error);
-        }
-
-        str = NULL;
-
-        if (res != NULL) {
-                g_variant_get (res, "(v)", &inner);
-                str = g_variant_dup_string (inner, NULL);
-                g_variant_unref (res);
-        }
-
-        if (str == NULL || *str == '\0') {
-                str = g_strdup (g_get_host_name ());
-        }
-
-        if (str == NULL || *str == '\0') {
-                str = g_strdup ("GNOME");
-	}
-
-        return str;
-}
-
-static GByteArray *
-generate_ssid_for_hotspot (NetDeviceWifi *device_wifi)
-{
-        GByteArray *ssid_array;
-        gchar *ssid;
-
-        ssid = get_hostname ();
-        ssid_array = ssid_to_byte_array (ssid);
-        g_free (ssid);
-
-        return ssid_array;
-}
-
-static gchar *
-generate_wep_key (NetDeviceWifi *device_wifi)
-{
-        gchar key[11];
-        gint i;
-        const gchar *hexdigits = "0123456789abcdef";
-
-        /* generate a 10-digit hex WEP key */
-        for (i = 0; i < 10; i++) {
-                gint digit;
-                digit = g_random_int_range (0, 16);
-                key[i] = hexdigits[digit];
-        }
-        key[10] = 0;
-
-        return g_strdup (key);
-}
-
-static gboolean
-is_hotspot_connection (NMConnection *connection)
-{
-        NMSettingConnection *sc;
-        NMSettingWireless *sw;
-        NMSettingIP4Config *sip;
-
-        sc = nm_connection_get_setting_connection (connection);
-        if (g_strcmp0 (nm_setting_connection_get_connection_type (sc), "802-11-wireless") != 0) {
-                return FALSE;
-        }
-        sw = nm_connection_get_setting_wireless (connection);
-        if (g_strcmp0 (nm_setting_wireless_get_mode (sw), "adhoc") != 0) {
-                return FALSE;
-        }
-        if (g_strcmp0 (nm_setting_wireless_get_security (sw), "802-11-wireless-security") != 0) {
-                return FALSE;
-        }
-        sip = nm_connection_get_setting_ip4_config (connection);
-        if (g_strcmp0 (nm_setting_ip4_config_get_method (sip), "shared") != 0) {
-                return FALSE;
-        }
-
-        return TRUE;
-}
-
-static void
-show_hotspot_ui (NetDeviceWifi *device_wifi)
-{
-        GtkWidget *widget;
-        GtkSwitch *sw;
-
-        /* show hotspot tab */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "notebook_view"));
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 3);
-
-        /* force switch to on as this succeeded */
-        sw = GTK_SWITCH (gtk_builder_get_object (device_wifi->priv->builder,
-                                                 "switch_hotspot_off"));
-        device_wifi->priv->updating_device = TRUE;
-        gtk_switch_set_active (sw, TRUE);
-        device_wifi->priv->updating_device = FALSE;
-}
-
-static void
-activate_cb (NMClient           *client,
-             NMActiveConnection *connection,
-             GError             *error,
-             NetDeviceWifi     *device_wifi)
-{
-        if (error != NULL) {
-                g_warning ("Failed to add new connection: (%d) %s",
-                           error->code,
-                           error->message);
-                return;
-        }
-
-        /* show hotspot tab */
-        nm_device_wifi_refresh_ui (device_wifi);
-        show_hotspot_ui (device_wifi);
-}
-
-static void
-activate_new_cb (NMClient           *client,
-                 NMActiveConnection *connection,
-                 const gchar        *path,
-                 GError             *error,
-                 NetDeviceWifi     *device_wifi)
-{
-        activate_cb (client, connection, error, device_wifi);
-}
-
-static void
-start_shared_connection (NetDeviceWifi *device_wifi)
-{
-        NMConnection *c;
-        NMConnection *tmp;
-        NMSettingConnection *sc;
-        NMSettingWireless *sw;
-        NMSettingIP4Config *sip;
-        NMSettingWirelessSecurity *sws;
-        NMDevice *device;
-        GByteArray *ssid_array;
-        gchar *wep_key;
-        const gchar *str_mac;
-        struct ether_addr *bin_mac;
-        GSList *connections;
-        GSList *filtered;
-        GSList *l;
-        NMClient *client;
-        NMRemoteSettings *remote_settings;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        g_assert (nm_device_get_device_type (device) == NM_DEVICE_TYPE_WIFI);
-
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        connections = nm_remote_settings_list_connections (remote_settings);
-        filtered = nm_device_filter_connections (device, connections);
-        g_slist_free (connections);
-        c = NULL;
-        for (l = filtered; l; l = l->next) {
-                tmp = l->data;
-                if (is_hotspot_connection (tmp)) {
-                        c = tmp;
-                        break;
-                }
-        }
-        g_slist_free (filtered);
-
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        if (c != NULL) {
-                g_debug ("activate existing hotspot connection\n");
-                nm_client_activate_connection (client,
-                                               c,
-                                               device,
-                                               NULL,
-                                               (NMClientActivateFn)activate_cb,
-                                               device_wifi);
-                return;
-        }
-
-        g_debug ("create new hotspot connection\n");
-        c = nm_connection_new ();
-
-        sc = (NMSettingConnection *)nm_setting_connection_new ();
-        g_object_set (sc,
-                      "type", "802-11-wireless",
-                      "id", "Hotspot",
-                      "autoconnect", FALSE,
-                      NULL);
-        nm_connection_add_setting (c, (NMSetting *)sc);
-
-        sw = (NMSettingWireless *)nm_setting_wireless_new ();
-        g_object_set (sw,
-                      "mode", "adhoc",
-                      "security", "802-11-wireless-security",
-                      NULL);
-
-        str_mac = nm_device_wifi_get_permanent_hw_address (NM_DEVICE_WIFI (device));
-        bin_mac = ether_aton (str_mac);
-        if (bin_mac) {
-                GByteArray *hw_address;
-
-                hw_address = g_byte_array_sized_new (ETH_ALEN);
-                g_byte_array_append (hw_address, bin_mac->ether_addr_octet, ETH_ALEN);
-                g_object_set (sw,
-                              "mac-address", hw_address,
-                              NULL);
-                g_byte_array_unref (hw_address);
-        }
-        nm_connection_add_setting (c, (NMSetting *)sw);
-
-        sip = (NMSettingIP4Config*) nm_setting_ip4_config_new ();
-        g_object_set (sip, "method", "shared", NULL);
-        nm_connection_add_setting (c, (NMSetting *)sip);
-
-        ssid_array = generate_ssid_for_hotspot (device_wifi);
-        g_object_set (sw,
-                      "ssid", ssid_array,
-                      NULL);
-        g_byte_array_unref (ssid_array);
-
-        sws = (NMSettingWirelessSecurity*) nm_setting_wireless_security_new ();
-        wep_key = generate_wep_key (device_wifi);
-        g_object_set (sws,
-                      "key-mgmt", "none",
-                      "wep-key0", wep_key,
-                      "wep-key-type", NM_WEP_KEY_TYPE_KEY,
-                      NULL);
-        g_free (wep_key);
-        nm_connection_add_setting (c, (NMSetting *)sws);
-
-        nm_client_add_and_activate_connection (client,
-                                               c,
-                                               device,
-                                               NULL,
-                                               (NMClientAddActivateFn)activate_new_cb,
-                                               device_wifi);
-
-        g_object_unref (c);
-}
-
-static void
-start_hotspot_response_cb (GtkWidget *dialog, gint response, NetDeviceWifi *device_wifi)
-{
-        if (response == GTK_RESPONSE_OK) {
-                start_shared_connection (device_wifi);
-        }
-        gtk_widget_hide (dialog);
-}
-
-static void
-start_hotspot (GtkButton *button, NetDeviceWifi *device_wifi)
-{
-        NMDevice *device;
-        const GPtrArray *connections;
-        gchar *active_ssid;
-        NMClient *client;
-        GtkWidget *dialog;
-        GtkWidget *window;
-        GtkWidget *widget;
-        GString *str;
-
-        active_ssid = NULL;
-
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        connections = nm_client_get_active_connections (client);
-        if (connections) {
-                gint i;
-                for (i = 0; i < connections->len; i++) {
-                        NMActiveConnection *c;
-                        const GPtrArray *devices;
-                        c = (NMActiveConnection *)connections->pdata[i];
-                        devices = nm_active_connection_get_devices (c);
-                        if (devices && devices->pdata[0] == device) {
-                                NMAccessPoint *ap;
-                                ap = nm_device_wifi_get_active_access_point (NM_DEVICE_WIFI (device));
-                                active_ssid = nm_utils_ssid_to_utf8 (nm_access_point_get_ssid (ap));
-                                break;
-                        }
-                }
-        }
-
-        window = gtk_widget_get_toplevel (GTK_WIDGET (button));
-
-        dialog = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "hotspot-dialog"));
-        gtk_window_set_transient_for (GTK_WINDOW (dialog), GTK_WINDOW (window));
-
-        str = g_string_new (_("If you have a connection to the Internet other than wireless, you can use it to share your internet connection with others."));
-        g_string_append (str, "\n\n");
-
-        if (active_ssid) {
-                g_string_append_printf (str, _("Switching on the wireless hotspot will disconnect you from <b>%s</b>."), active_ssid);
-                g_string_append (str, " ");
-        }
-
-        g_string_append (str, _("It is not possible to access the internet through your wireless while the hotspot is active."));
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "hotspot-dialog-content"));
-        gtk_label_set_markup (GTK_LABEL (widget), str->str);
-        g_string_free (str, TRUE);
-
-        g_signal_connect (dialog, "response",
-                          G_CALLBACK (start_hotspot_response_cb), device_wifi);
-        gtk_window_present (GTK_WINDOW (dialog));
-        g_free (active_ssid);
-}
-
-static void
-stop_shared_connection (NetDeviceWifi *device_wifi)
-{
-        const GPtrArray *connections;
-        const GPtrArray *devices;
-        NMDevice *device;
-        gint i;
-        NMActiveConnection *c;
-        NMClient *client;
-
-        device = net_device_get_nm_device (NET_DEVICE (device_wifi));
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        connections = nm_client_get_active_connections (client);
-        for (i = 0; i < connections->len; i++) {
-                c = (NMActiveConnection *)connections->pdata[i];
-
-                devices = nm_active_connection_get_devices (c);
-                if (devices && devices->pdata[0] == device) {
-                        nm_client_deactivate_connection (client, c);
-                        break;
-                }
-        }
-
-        nm_device_wifi_refresh_ui (device_wifi);
-        show_wifi_list (device_wifi);
-}
-
-static void
-stop_hotspot_response_cb (GtkWidget *dialog, gint response, NetDeviceWifi *device_wifi)
-{
-        if (response == GTK_RESPONSE_OK) {
-                stop_shared_connection (device_wifi);
-        }
-        gtk_widget_destroy (dialog);
-}
-
-static void
-switch_hotspot_changed_cb (GtkSwitch *sw,
-                           GParamSpec *pspec,
-                           NetDeviceWifi *device_wifi)
-{
-        GtkWidget *dialog;
-        GtkWidget *window;
-        CcNetworkPanel *panel;
-
-        if (device_wifi->priv->updating_device)
-                return;
-
-        panel = net_object_get_panel (NET_OBJECT (device_wifi));
-        window = gtk_widget_get_toplevel (GTK_WIDGET (panel));
-        dialog = gtk_message_dialog_new (GTK_WINDOW (window),
-                                         GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
-                                         GTK_MESSAGE_OTHER,
-                                         GTK_BUTTONS_NONE,
-                                         _("Stop hotspot and disconnect any users?"));
-        gtk_dialog_add_buttons (GTK_DIALOG (dialog),
-                                _("_Cancel"), GTK_RESPONSE_CANCEL,
-                                _("_Stop Hotspot"), GTK_RESPONSE_OK,
-                                NULL);
-        g_signal_connect (dialog, "response",
-                          G_CALLBACK (stop_hotspot_response_cb), device_wifi);
-        gtk_window_present (GTK_WINDOW (dialog));
-}
-
-static void
-connect_wifi_network (NetDeviceWifi *device_wifi,
-                      GtkTreeView *tv,
-                      GtkTreePath *path)
-{
-        gboolean ap_in_range;
-        gchar *ap_object_path;
-        gchar *ssid;
-        gchar *connection_id;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-        NM80211Mode mode;
-
-        model = gtk_tree_view_get_model (tv);
-        gtk_tree_model_get_iter (model, &iter, path);
-
-        gtk_tree_model_get (model, &iter,
-                            COLUMN_ACCESS_POINT_ID, &ap_object_path,
-                            COLUMN_CONNECTION_ID, &connection_id,
-                            COLUMN_TITLE, &ssid,
-                            COLUMN_AP_IN_RANGE, &ap_in_range,
-                            COLUMN_MODE, &mode,
-                            -1);
-        if (ap_in_range) {
-                if (connection_id)
-                        activate_connection (device_wifi, connection_id);
-                else
-                        wireless_try_to_connect (device_wifi, ssid, ap_object_path);
-        } else {
-                g_warning ("can't connect");
-        }
-
-        g_free (ap_object_path);
-        g_free (connection_id);
-        g_free (ssid);
-}
-
-static void
-show_wifi_details (NetDeviceWifi *device_wifi,
-                   GtkTreeView *tv,
-                   GtkTreePath *path)
-{
-        GtkWidget *widget;
-        gboolean ret;
-        gboolean in_range;
-        GtkTreeModel *model;
-        GtkTreeIter iter;
-        gchar *path_str;
-
-        model = gtk_tree_view_get_model (tv);
-        path_str = gtk_tree_path_to_string (path);
-        ret = gtk_tree_model_get_iter_from_string (model, &iter, path_str);
-        if (!ret)
-                goto out;
-
-        /* get parameters about the selected connection */
-        g_free (device_wifi->priv->selected_connection_id);
-        g_free (device_wifi->priv->selected_ssid_title);
-        gtk_tree_model_get (model, &iter,
-                            COLUMN_ACCESS_POINT_ID, &device_wifi->priv->selected_ap_id,
-                            COLUMN_CONNECTION_ID, &device_wifi->priv->selected_connection_id,
-                            COLUMN_TITLE, &device_wifi->priv->selected_ssid_title,
-                            COLUMN_AP_IN_RANGE, &in_range,
-                            -1);
-        g_debug ("ssid = %s, in-range = %i",
-                 device_wifi->priv->selected_ssid_title, in_range);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "notebook_view"));
-
-        nm_device_wifi_refresh_ui (device_wifi);
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 1);
-
-out:
-        g_free (path_str);
-}
-
-static void
-show_wifi_list (NetDeviceWifi *device_wifi)
-{
-        GtkWidget *widget;
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder, "notebook_view"));
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 0);
-}
-
-static gboolean
-arrow_visible (GtkTreeModel *model,
-               GtkTreeIter  *iter)
-{
-        gboolean active;
-        gboolean ap_is_saved;
-        gboolean ret;
-        gchar *sort;
-
-        gtk_tree_model_get (model, iter,
-                            COLUMN_ACTIVE, &active,
-                            COLUMN_AP_IS_SAVED, &ap_is_saved,
-                            COLUMN_SORT, &sort,
-                            -1);
-
-        if (active || ap_is_saved)
-                ret = TRUE;
-        else
-                ret = FALSE;
-
-        g_free (sort);
-
-        return ret;
-}
-
-static void
-set_arrow_image (GtkCellLayout   *layout,
-                 GtkCellRenderer *cell,
-                 GtkTreeModel    *model,
-                 GtkTreeIter     *iter,
-                 gpointer         user_data)
-{
-        NetDeviceWifi *device = user_data;
-        const gchar *icon;
-
-        if (arrow_visible (model, iter)) {
-                GtkWidget *widget;
-
-                widget = GTK_WIDGET (gtk_builder_get_object (device->priv->builder,
-                                                             "treeview_list"));
-
-                if (gtk_widget_get_direction (widget) == GTK_TEXT_DIR_RTL)
-                        icon = "go-previous";
-                else
-                        icon = "go-next";
-        }
-        else {
-                icon = "";
-        }
-
-        g_object_set (cell, "icon-name", icon, NULL);
-}
-
-static void
-edit_connection (GtkButton *button, NetDeviceWifi *device_wifi)
-{
-        net_object_edit (NET_OBJECT (device_wifi));
-}
-
-static void
-remote_settings_read_cb (NMRemoteSettings *remote_settings,
-                         NetDeviceWifi *device_wifi)
-{
-        gboolean is_hotspot;
-
-        device_wifi_refresh_saved_connections (device_wifi);
-
-        /* go straight to the hotspot UI */
-        is_hotspot = device_is_hotspot (device_wifi);
-        if (is_hotspot) {
-                nm_device_wifi_refresh_hotspot (device_wifi);
-                show_hotspot_ui (device_wifi);
-        }
-}
-
-static gboolean
-separator_visible (GtkTreeModel *model,
-                   GtkTreeIter  *iter)
-{
-        gboolean active;
-        gboolean ap_is_saved;
-        gboolean ap_in_range;
-        gchar *sort;
-        gboolean ret;
-
-        gtk_tree_model_get (model, iter,
-                            COLUMN_ACTIVE, &active,
-                            COLUMN_AP_IS_SAVED, &ap_is_saved,
-                            COLUMN_AP_IN_RANGE, &ap_in_range,
-                            COLUMN_SORT, &sort,
-                            -1);
-
-        if (!active && ap_is_saved && ap_in_range)
-                ret = TRUE;
-        else
-                ret = FALSE;
-
-        g_free (sort);
-
-        return ret;
-
-}
-
-static void
-set_draw_separator (GtkCellLayout   *layout,
-                    GtkCellRenderer *cell,
-                    GtkTreeModel    *model,
-                    GtkTreeIter     *iter,
-                    gpointer         user_data)
-{
-        gboolean draw;
-
-        draw = separator_visible (model, iter);
-
-        g_object_set (cell, "draw", draw, NULL);
-}
-
-static void
-switch_page_cb (GtkNotebook   *notebook,
-                GtkWidget     *page,
-                guint          page_num,
-                NetDeviceWifi *device_wifi)
-{
-        GtkWidget *widget;
-
-        if (page_num == 1) {
-                widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                             "button_back1"));
-                gtk_widget_grab_focus (widget);
-        }
-}
-
-static void
-net_device_wifi_constructed (GObject *object)
-{
-        NetDeviceWifi *device_wifi = NET_DEVICE_WIFI (object);
-        NMClient *client;
-        NMRemoteSettings *remote_settings;
-        NMClientPermissionResult perm;
-        GtkWidget *widget;
-
-        G_OBJECT_CLASS (net_device_wifi_parent_class)->constructed (object);
-
-        client = net_object_get_client (NET_OBJECT (device_wifi));
-        g_signal_connect (client, "notify::wireless-enabled",
-                          G_CALLBACK (wireless_enabled_toggled), device_wifi);
-
-        /* only show the button if the user can create a hotspot */
-        perm = nm_client_get_permission_result (client, NM_CLIENT_PERMISSION_WIFI_SHARE_OPEN);
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "start_hotspot_button"));
-        gtk_widget_set_sensitive (widget, perm == NM_CLIENT_PERMISSION_RESULT_YES ||
-                                          perm == NM_CLIENT_PERMISSION_RESULT_AUTH);
-
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device_wifi));
-        g_signal_connect (remote_settings, "connections-read",
-                          G_CALLBACK (remote_settings_read_cb), device_wifi);
-
-        nm_device_wifi_refresh_ui (device_wifi);
-}
-
-static void
-net_device_wifi_finalize (GObject *object)
-{
-        NetDeviceWifi *device_wifi = NET_DEVICE_WIFI (object);
-        NetDeviceWifiPrivate *priv = device_wifi->priv;
-
-        g_object_unref (priv->builder);
-        g_free (priv->selected_ssid_title);
-        g_free (priv->selected_connection_id);
-        g_free (priv->selected_ap_id);
-
-        G_OBJECT_CLASS (net_device_wifi_parent_class)->finalize (object);
-}
-
-static void
-device_wifi_edit (NetObject *object)
-{
-        const gchar *uuid;
-        gchar *cmdline;
-        GError *error = NULL;
-        NetDeviceWifi *device = NET_DEVICE_WIFI (object);
-        NMRemoteSettings *settings;
-        NMRemoteConnection *connection;
-
-        settings = net_object_get_remote_settings (object);
-        connection = nm_remote_settings_get_connection_by_path (settings, device->priv->selected_connection_id);
-        if (connection == NULL) {
-                g_warning ("failed to get remote connection");
-                return;
-        }
-        uuid = nm_connection_get_uuid (NM_CONNECTION (connection));
-        cmdline = g_strdup_printf ("nm-connection-editor --edit %s", uuid);
-        g_debug ("Launching '%s'\n", cmdline);
-        if (!g_spawn_command_line_async (cmdline, &error)) {
-                g_warning ("Failed to launch nm-connection-editor: %s", error->message);
-                g_error_free (error);
-        }
-        g_free (cmdline);
-}
-
-static void
-net_device_wifi_class_init (NetDeviceWifiClass *klass)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        NetObjectClass *parent_class = NET_OBJECT_CLASS (klass);
-
-        object_class->finalize = net_device_wifi_finalize;
-        object_class->constructed = net_device_wifi_constructed;
-        parent_class->add_to_notebook = device_wifi_proxy_add_to_notebook;
-        parent_class->refresh = device_wifi_refresh;
-        parent_class->edit = device_wifi_edit;
-
-        g_type_class_add_private (klass, sizeof (NetDeviceWifiPrivate));
-}
-
-static void
-activate_ssid_cb (PanelCellRendererText *cell,
-                  const gchar           *path,
-                  NetDeviceWifi         *device_wifi)
-{
-        GtkTreeView *tv;
-        GtkTreePath *tpath;
-
-        g_debug ("activate ssid!\n");
-
-        tv = GTK_TREE_VIEW (gtk_builder_get_object (device_wifi->priv->builder,
-                                                    "treeview_list"));
-        tpath = gtk_tree_path_new_from_string (path);
-
-        connect_wifi_network (device_wifi, tv, tpath);
-
-        gtk_tree_path_free (tpath);
-}
-
-static void
-activate_arrow_cb (PanelCellRendererText *cell,
-                  const gchar           *path,
-                  NetDeviceWifi         *device_wifi)
-{
-        GtkTreeView *tv;
-        GtkTreeModel *model;
-        GtkTreePath *tpath;
-        GtkTreeIter iter;
-
-        g_debug ("activate arrow!\n");
-
-        tv = GTK_TREE_VIEW (gtk_builder_get_object (device_wifi->priv->builder,
-                                                    "treeview_list"));
-        model = gtk_tree_view_get_model (tv);
-        tpath = gtk_tree_path_new_from_string (path);
-        gtk_tree_model_get_iter (model, &iter, tpath);
-
-        if (arrow_visible (model, &iter))
-                show_wifi_details (device_wifi, tv, tpath);
-        gtk_tree_path_free (tpath);
-}
-
-static void
-net_device_wifi_init (NetDeviceWifi *device_wifi)
-{
-        GError *error = NULL;
-        GtkWidget *widget;
-        GtkCellRenderer *renderer1;
-        GtkCellRenderer *renderer2;
-        GtkCellRenderer *renderer3;
-        GtkCellRenderer *renderer4;
-        GtkCellRenderer *renderer5;
-        GtkCellRenderer *renderer6;
-        GtkCellRenderer *renderer7;
-        GtkCellRenderer *renderer8;
-        GtkTreeSortable *sortable;
-        GtkTreeViewColumn *column;
-        GtkCellArea *area;
-
-        device_wifi->priv = NET_DEVICE_WIFI_GET_PRIVATE (device_wifi);
-
-        device_wifi->priv->builder = gtk_builder_new ();
-        gtk_builder_add_from_file (device_wifi->priv->builder,
-                                   GNOMECC_UI_DIR "/network-wifi.ui",
-                                   &error);
-        if (error != NULL) {
-                g_warning ("Could not load interface file: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        /* setup wifi views */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "device_off_switch"));
-        g_signal_connect (widget, "notify::active",
-                          G_CALLBACK (device_off_toggled), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "button_options1"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (edit_connection), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "button_forget1"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (forget_button_clicked_cb), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "button_disconnect1"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (disconnect_button_clicked_cb), device_wifi);
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "button_connect1"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (connect_button_clicked_cb), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "treeview_list"));
-
-        /* sort networks in drop down */
-        sortable = GTK_TREE_SORTABLE (gtk_builder_get_object (device_wifi->priv->builder,
-                                                              "liststore_network"));
-        gtk_tree_sortable_set_sort_column_id (sortable,
-                                              COLUMN_SORT,
-                                              GTK_SORT_ASCENDING);
-        gtk_tree_sortable_set_sort_func (sortable,
-                                         COLUMN_SORT,
-                                         wireless_ap_model_sort_cb,
-                                         device_wifi,
-                                         NULL);
-
-
-        column = GTK_TREE_VIEW_COLUMN (gtk_builder_get_object (device_wifi->priv->builder,
-                                                               "treeview_list_column"));
-        area = gtk_cell_layout_get_area (GTK_CELL_LAYOUT (column));
-
-        renderer1 = gtk_cell_renderer_pixbuf_new ();
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column), renderer1, FALSE);
-        g_object_set (renderer1,
-                      "follow-state", TRUE,
-                      "icon-name", "object-select-symbolic",
-                      "xpad", 6,
-                      "ypad", 6,
-                      NULL);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (column), renderer1,
-                                        "visible", COLUMN_ACTIVE,
-                                        NULL);
-        gtk_cell_area_cell_set (area, renderer1, "align", TRUE, NULL);
-
-        renderer2 = panel_cell_renderer_text_new ();
-        g_object_set (renderer2,
-                      "mode", GTK_CELL_RENDERER_MODE_ACTIVATABLE,
-                      "ellipsize", PANGO_ELLIPSIZE_END,
-                      NULL);
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column), renderer2, TRUE);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (column), renderer2,
-                                        "markup", COLUMN_TITLE,
-                                        NULL);
-        gtk_cell_area_cell_set (area, renderer2,
-                                "align", TRUE,
-                                "expand", TRUE,
-                                NULL);
-        g_signal_connect (renderer2, "activate",
-                          G_CALLBACK (activate_ssid_cb), device_wifi);
-
-        renderer3 = panel_cell_renderer_mode_new ();
-        gtk_cell_renderer_set_padding (renderer3, 4, 0);
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column),
-                                    renderer3,
-                                    FALSE);
-        g_object_set (renderer3, "follow-state", TRUE, NULL);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (column), renderer3,
-                                        "ap-mode", COLUMN_MODE,
-                                        NULL);
-
-        renderer4 = gtk_cell_renderer_text_new ();
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column), renderer4, FALSE);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (column), renderer4,
-                                        "visible", COLUMN_AP_OUT_OF_RANGE,
-                                        NULL);
-        g_object_set (renderer4,
-                      "text", _("Out of range"),
-                      "mode", GTK_CELL_RENDERER_MODE_INERT,
-                      "xalign", 1.0,
-                      NULL);
-
-        renderer5 = panel_cell_renderer_signal_new ();
-        gtk_cell_renderer_set_padding (renderer5, 4, 0);
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column),
-                                    renderer5,
-                                    FALSE);
-        g_object_set (renderer5, "follow-state", TRUE, NULL);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (column), renderer5,
-                                        "signal", COLUMN_STRENGTH,
-                                        "visible", COLUMN_AP_IN_RANGE,
-                                        NULL);
-
-        renderer6 = panel_cell_renderer_security_new ();
-        gtk_cell_renderer_set_padding (renderer6, 4, 0);
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column),
-                                    renderer6,
-                                    FALSE);
-        g_object_set (renderer6, "follow-state", TRUE, NULL);
-        gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (column), renderer6,
-                                        "security", COLUMN_SECURITY,
-                                        "visible", COLUMN_AP_IN_RANGE,
-                                        NULL);
-
-        renderer7 = panel_cell_renderer_separator_new ();
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column), renderer7, FALSE);
-        g_object_set (renderer7,
-                      "visible", TRUE,
-                      "sensitive", FALSE,
-                      "draw", TRUE,
-                      NULL);
-        gtk_cell_renderer_set_fixed_size (renderer7, 1, -1);
-        gtk_cell_layout_set_cell_data_func (GTK_CELL_LAYOUT (column), renderer7,
-                                            set_draw_separator, device_wifi, NULL);
-
-        renderer8 = panel_cell_renderer_pixbuf_new ();
-        gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (column), renderer8, FALSE);
-        g_object_set (renderer8,
-                      "mode", GTK_CELL_RENDERER_MODE_ACTIVATABLE,
-                      "follow-state", TRUE,
-                      "visible", TRUE,
-                      "xpad", 6,
-                      "ypad", 6,
-                      NULL);
-        gtk_cell_layout_set_cell_data_func (GTK_CELL_LAYOUT (column), renderer8,
-                                            set_arrow_image, device_wifi, NULL);
-        g_signal_connect (renderer8, "activate",
-                          G_CALLBACK (activate_arrow_cb), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "button_back1"));
-        g_signal_connect_swapped (widget, "clicked",
-                                  G_CALLBACK (show_wifi_list), device_wifi);
-
-        /* draw focus around everything but the arrow */
-        gtk_cell_area_add_focus_sibling (area, renderer2, renderer1);
-        gtk_cell_area_add_focus_sibling (area, renderer2, renderer3);
-        gtk_cell_area_add_focus_sibling (area, renderer2, renderer4);
-        gtk_cell_area_add_focus_sibling (area, renderer2, renderer5);
-        gtk_cell_area_add_focus_sibling (area, renderer2, renderer6);
-        gtk_cell_area_add_focus_sibling (area, renderer2, renderer7);
-
-        /* setup view */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "notebook_view"));
-        gtk_notebook_set_show_tabs (GTK_NOTEBOOK (widget), FALSE);
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 0);
-        g_signal_connect_after (widget, "switch-page",
-                                G_CALLBACK (switch_page_cb), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "start_hotspot_button"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (start_hotspot), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "connect_hidden_button"));
-        g_signal_connect_swapped (widget, "clicked",
-                                  G_CALLBACK (connect_to_hidden_network), device_wifi);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wifi->priv->builder,
-                                                     "switch_hotspot_off"));
-        g_signal_connect (widget, "notify::active",
-                          G_CALLBACK (switch_hotspot_changed_cb), device_wifi);
-}
diff --git a/panels/network/net-device-wifi.h b/panels/network/net-device-wifi.h
deleted file mode 100644
index 9ccee9f..0000000
--- a/panels/network/net-device-wifi.h
+++ /dev/null
@@ -1,58 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_DEVICE_WIFI_H
-#define __NET_DEVICE_WIFI_H
-
-#include <glib-object.h>
-
-#include "net-device.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_DEVICE_WIFI          (net_device_wifi_get_type ())
-#define NET_DEVICE_WIFI(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_DEVICE_WIFI, NetDeviceWifi))
-#define NET_DEVICE_WIFI_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_DEVICE_WIFI, NetDeviceWifiClass))
-#define NET_IS_DEVICE_WIFI(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_DEVICE_WIFI))
-#define NET_IS_DEVICE_WIFI_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_DEVICE_WIFI))
-#define NET_DEVICE_WIFI_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_DEVICE_WIFI, NetDeviceWifiClass))
-
-typedef struct _NetDeviceWifiPrivate   NetDeviceWifiPrivate;
-typedef struct _NetDeviceWifi          NetDeviceWifi;
-typedef struct _NetDeviceWifiClass     NetDeviceWifiClass;
-
-struct _NetDeviceWifi
-{
-         NetDevice                       parent;
-         NetDeviceWifiPrivate           *priv;
-};
-
-struct _NetDeviceWifiClass
-{
-        NetDeviceClass                   parent_class;
-};
-
-GType            net_device_wifi_get_type       (void);
-
-G_END_DECLS
-
-#endif /* __NET_DEVICE_WIFI_H */
-
diff --git a/panels/network/net-device-wired.c b/panels/network/net-device-wired.c
deleted file mode 100644
index 88450d2..0000000
--- a/panels/network/net-device-wired.c
+++ /dev/null
@@ -1,259 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-
-#include <nm-client.h>
-#include <nm-device.h>
-#include <nm-device-ethernet.h>
-#include <nm-remote-connection.h>
-
-#include "panel-common.h"
-
-#include "net-device-wired.h"
-
-#define NET_DEVICE_WIRED_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_DEVICE_WIRED, NetDeviceWiredPrivate))
-
-struct _NetDeviceWiredPrivate
-{
-        GtkBuilder              *builder;
-        gboolean                 updating_device;
-};
-
-G_DEFINE_TYPE (NetDeviceWired, net_device_wired, NET_TYPE_DEVICE)
-
-static GtkWidget *
-device_wired_proxy_add_to_notebook (NetObject *object,
-                                    GtkNotebook *notebook,
-                                    GtkSizeGroup *heading_size_group)
-{
-        GtkWidget *widget;
-        GtkWindow *window;
-        NetDeviceWired *device_wired = NET_DEVICE_WIRED (object);
-
-        /* add widgets to size group */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wired->priv->builder,
-                                                     "heading_ipv4"));
-        gtk_size_group_add_widget (heading_size_group, widget);
-
-        /* reparent */
-        window = GTK_WINDOW (gtk_builder_get_object (device_wired->priv->builder,
-                                                     "window_tmp"));
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wired->priv->builder,
-                                                     "vbox6"));
-        g_object_ref (widget);
-        gtk_container_remove (GTK_CONTAINER (window), widget);
-        gtk_notebook_append_page (notebook, widget, NULL);
-        g_object_unref (widget);
-        return widget;
-}
-
-static void
-update_off_switch_from_device_state (GtkSwitch *sw,
-                                     NMDeviceState state,
-                                     NetDeviceWired *device_wired)
-{
-        device_wired->priv->updating_device = TRUE;
-        switch (state) {
-                case NM_DEVICE_STATE_UNMANAGED:
-                case NM_DEVICE_STATE_UNAVAILABLE:
-                case NM_DEVICE_STATE_DISCONNECTED:
-                case NM_DEVICE_STATE_DEACTIVATING:
-                case NM_DEVICE_STATE_FAILED:
-                        gtk_switch_set_active (sw, FALSE);
-                        break;
-                default:
-                        gtk_switch_set_active (sw, TRUE);
-                        break;
-        }
-        device_wired->priv->updating_device = FALSE;
-}
-
-static void
-nm_device_wired_refresh_ui (NetDeviceWired *device_wired)
-{
-        const char *str;
-        GString *status;
-        GtkWidget *widget;
-        guint speed = 0;
-        NMDevice *nm_device;
-        NMDeviceState state;
-        NetDeviceWiredPrivate *priv = device_wired->priv;
-
-        /* set device kind */
-        nm_device = net_device_get_nm_device (NET_DEVICE (device_wired));
-        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder, "label_device"));
-        gtk_label_set_label (GTK_LABEL (widget),
-                             panel_device_to_localized_string (nm_device));
-
-        /* set up the device on/off switch */
-        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder, "device_off_switch"));
-        state = nm_device_get_state (nm_device);
-        gtk_widget_set_visible (widget,
-                                state != NM_DEVICE_STATE_UNAVAILABLE
-                                && state != NM_DEVICE_STATE_UNMANAGED);
-        update_off_switch_from_device_state (GTK_SWITCH (widget), state, device_wired);
-
-        /* set device state, with status and optionally speed */
-        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder, "label_status"));
-        status = g_string_new (panel_device_state_to_localized_string (nm_device));
-        if (state != NM_DEVICE_STATE_UNAVAILABLE)
-                speed = nm_device_ethernet_get_speed (NM_DEVICE_ETHERNET (nm_device));
-        if (speed  > 0) {
-                g_string_append (status, " - ");
-                /* Translators: network device speed */
-                g_string_append_printf (status, _("%d Mb/s"), speed);
-        }
-        gtk_label_set_label (GTK_LABEL (widget), status->str);
-        g_string_free (status, TRUE);
-        gtk_widget_set_tooltip_text (widget,
-                                     panel_device_state_reason_to_localized_string (nm_device));
-
-        /* device MAC */
-        str = nm_device_ethernet_get_hw_address (NM_DEVICE_ETHERNET (nm_device));
-        panel_set_device_widget_details (priv->builder, "mac", str);
-
-        /* set IP entries */
-        panel_set_device_widgets (priv->builder, nm_device);
-}
-
-static void
-device_wired_refresh (NetObject *object)
-{
-        NetDeviceWired *device_wired = NET_DEVICE_WIRED (object);
-        nm_device_wired_refresh_ui (device_wired);
-}
-
-static void
-device_off_toggled (GtkSwitch *sw,
-                    GParamSpec *pspec,
-                    NetDeviceWired *device_wired)
-{
-        const gchar *path;
-        const GPtrArray *acs;
-        gboolean active;
-        gint i;
-        NMActiveConnection *a;
-        NMConnection *connection;
-        NMClient *client;
-
-        if (device_wired->priv->updating_device)
-                return;
-
-        active = gtk_switch_get_active (sw);
-        if (active) {
-                client = net_object_get_client (NET_OBJECT (device_wired));
-                connection = net_device_get_find_connection (NET_DEVICE (device_wired));
-                if (connection == NULL)
-                        return;
-                nm_client_activate_connection (client,
-                                               connection,
-                                               net_device_get_nm_device (NET_DEVICE (device_wired)),
-                                               NULL, NULL, NULL);
-        } else {
-                connection = net_device_get_find_connection (NET_DEVICE (device_wired));
-                if (connection == NULL)
-                        return;
-                path = nm_connection_get_path (connection);
-                client = net_object_get_client (NET_OBJECT (device_wired));
-                acs = nm_client_get_active_connections (client);
-                for (i = 0; i < acs->len; i++) {
-                        a = (NMActiveConnection*)acs->pdata[i];
-                        if (strcmp (nm_active_connection_get_connection (a), path) == 0) {
-                                nm_client_deactivate_connection (client, a);
-                                break;
-                        }
-                }
-        }
-}
-
-static void
-edit_connection (GtkButton *button, NetDeviceWired *device_wired)
-{
-        net_object_edit (NET_OBJECT (device_wired));
-}
-
-static void
-net_device_wired_constructed (GObject *object)
-{
-        NetDeviceWired *device_wired = NET_DEVICE_WIRED (object);
-
-        G_OBJECT_CLASS (net_device_wired_parent_class)->constructed (object);
-
-        nm_device_wired_refresh_ui (device_wired);
-}
-
-static void
-net_device_wired_finalize (GObject *object)
-{
-        NetDeviceWired *device_wired = NET_DEVICE_WIRED (object);
-        NetDeviceWiredPrivate *priv = device_wired->priv;
-
-        g_object_unref (priv->builder);
-
-        G_OBJECT_CLASS (net_device_wired_parent_class)->finalize (object);
-}
-
-static void
-net_device_wired_class_init (NetDeviceWiredClass *klass)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        NetObjectClass *parent_class = NET_OBJECT_CLASS (klass);
-
-        object_class->finalize = net_device_wired_finalize;
-        object_class->constructed = net_device_wired_constructed;
-        parent_class->add_to_notebook = device_wired_proxy_add_to_notebook;
-        parent_class->refresh = device_wired_refresh;
-        g_type_class_add_private (klass, sizeof (NetDeviceWiredPrivate));
-}
-
-static void
-net_device_wired_init (NetDeviceWired *device_wired)
-{
-        GError *error = NULL;
-        GtkWidget *widget;
-
-        device_wired->priv = NET_DEVICE_WIRED_GET_PRIVATE (device_wired);
-
-        device_wired->priv->builder = gtk_builder_new ();
-        gtk_builder_add_from_file (device_wired->priv->builder,
-                                   GNOMECC_UI_DIR "/network-wired.ui",
-                                   &error);
-        if (error != NULL) {
-                g_warning ("Could not load interface file: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        /* setup wired combobox model */
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wired->priv->builder,
-                                                     "device_off_switch"));
-        g_signal_connect (widget, "notify::active",
-                          G_CALLBACK (device_off_toggled), device_wired);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (device_wired->priv->builder,
-                                                     "button_options"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (edit_connection), device_wired);
-}
diff --git a/panels/network/net-device-wired.h b/panels/network/net-device-wired.h
deleted file mode 100644
index b4d4b50..0000000
--- a/panels/network/net-device-wired.h
+++ /dev/null
@@ -1,58 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_DEVICE_WIRED_H
-#define __NET_DEVICE_WIRED_H
-
-#include <glib-object.h>
-
-#include "net-device.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_DEVICE_WIRED          (net_device_wired_get_type ())
-#define NET_DEVICE_WIRED(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_DEVICE_WIRED, NetDeviceWired))
-#define NET_DEVICE_WIRED_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_DEVICE_WIRED, NetDeviceWiredClass))
-#define NET_IS_DEVICE_WIRED(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_DEVICE_WIRED))
-#define NET_IS_DEVICE_WIRED_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_DEVICE_WIRED))
-#define NET_DEVICE_WIRED_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_DEVICE_WIRED, NetDeviceWiredClass))
-
-typedef struct _NetDeviceWiredPrivate   NetDeviceWiredPrivate;
-typedef struct _NetDeviceWired          NetDeviceWired;
-typedef struct _NetDeviceWiredClass     NetDeviceWiredClass;
-
-struct _NetDeviceWired
-{
-         NetDevice                       parent;
-         NetDeviceWiredPrivate          *priv;
-};
-
-struct _NetDeviceWiredClass
-{
-        NetDeviceClass                   parent_class;
-};
-
-GType            net_device_wired_get_type      (void);
-
-G_END_DECLS
-
-#endif /* __NET_DEVICE_WIRED_H */
-
diff --git a/panels/network/net-device.c b/panels/network/net-device.c
deleted file mode 100644
index 0f5a0c0..0000000
--- a/panels/network/net-device.c
+++ /dev/null
@@ -1,379 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-#include <arpa/inet.h>
-#include <netinet/ether.h>
-
-#include <nm-device-ethernet.h>
-#include <nm-device-modem.h>
-#include <nm-device-wifi.h>
-#include <nm-device-wimax.h>
-#include <nm-device-infiniband.h>
-#include <nm-utils.h>
-
-#include "net-device.h"
-
-#define NET_DEVICE_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_DEVICE, NetDevicePrivate))
-
-struct _NetDevicePrivate
-{
-        NMDevice                        *nm_device;
-        guint                            changed_id;
-};
-
-enum {
-        PROP_0,
-        PROP_DEVICE,
-        PROP_LAST
-};
-
-G_DEFINE_TYPE (NetDevice, net_device, NET_TYPE_OBJECT)
-
-/* return value must be freed by caller with g_free() */
-static gchar *
-get_mac_address_of_connection (NMConnection *connection)
-{
-        if (!connection)
-                return NULL;
-
-        const GByteArray *mac = NULL;
-
-        /* check the connection type */
-        if (nm_connection_is_type (connection,
-                                   NM_SETTING_WIRELESS_SETTING_NAME)) {
-                /* check wireless settings */
-                NMSettingWireless *s_wireless = nm_connection_get_setting_wireless (connection);
-                if (!s_wireless)
-                        return NULL;
-                mac = nm_setting_wireless_get_mac_address (s_wireless);
-                if (mac)
-                        return nm_utils_hwaddr_ntoa (mac->data, ARPHRD_ETHER);
-        } else if (nm_connection_is_type (connection,
-                                          NM_SETTING_WIRED_SETTING_NAME)) {
-                /* check wired settings */
-                NMSettingWired *s_wired = nm_connection_get_setting_wired (connection);
-                if (!s_wired)
-                        return NULL;
-                mac = nm_setting_wired_get_mac_address (s_wired);
-                if (mac)
-                        return nm_utils_hwaddr_ntoa (mac->data, ARPHRD_ETHER);
-        } else if (nm_connection_is_type (connection,
-                                          NM_SETTING_WIMAX_SETTING_NAME)) {
-                /* check wimax settings */
-                NMSettingWimax *s_wimax = nm_connection_get_setting_wimax (connection);
-                if (!s_wimax)
-                        return NULL;
-                mac = nm_setting_wimax_get_mac_address (s_wimax);
-                if (mac)
-                        return nm_utils_hwaddr_ntoa (mac->data, ARPHRD_ETHER);
-        } else if (nm_connection_is_type (connection,
-                                          NM_SETTING_INFINIBAND_SETTING_NAME)) {
-                /* check infiniband settings */
-                NMSettingInfiniband *s_infiniband = \
-                        nm_connection_get_setting_infiniband (connection);
-                if (!s_infiniband)
-                        return NULL;
-                mac = nm_setting_infiniband_get_mac_address (s_infiniband);
-                if (mac)
-                        return nm_utils_hwaddr_ntoa (mac->data,
-                                                     ARPHRD_INFINIBAND);
-        }
-        /* no MAC address found */
-        return NULL;
-}
-
-/* return value must not be freed! */
-static const gchar *
-get_mac_address_of_device (NMDevice *device)
-{
-        const gchar *mac = NULL;
-        switch (nm_device_get_device_type (device)) {
-        case NM_DEVICE_TYPE_WIFI:
-        {
-                NMDeviceWifi *device_wifi = NM_DEVICE_WIFI (device);
-                mac = nm_device_wifi_get_hw_address (device_wifi);
-                break;
-        }
-        case NM_DEVICE_TYPE_ETHERNET:
-        {
-                NMDeviceEthernet *device_ethernet = NM_DEVICE_ETHERNET (device);
-                mac = nm_device_ethernet_get_hw_address (device_ethernet);
-                break;
-        }
-        case NM_DEVICE_TYPE_WIMAX:
-        {
-                NMDeviceWimax *device_wimax = NM_DEVICE_WIMAX (device);
-                mac = nm_device_wimax_get_hw_address (device_wimax);
-                break;
-        }
-        case NM_DEVICE_TYPE_INFINIBAND:
-        {
-                NMDeviceInfiniband *device_infiniband = \
-                        NM_DEVICE_INFINIBAND (device);
-                mac = nm_device_infiniband_get_hw_address (device_infiniband);
-                break;
-        }
-        default:
-                break;
-        }
-        /* no MAC address found */
-        return mac;
-}
-
-/* returns TRUE if both MACs are equal */
-static gboolean
-compare_mac_device_with_mac_connection (NMDevice *device,
-                                        NMConnection *connection)
-{
-        const gchar *mac_dev = NULL;
-        gchar *mac_conn = NULL;
-
-        mac_dev = get_mac_address_of_device (device);
-        if (mac_dev != NULL) {
-                mac_conn = get_mac_address_of_connection (connection);
-                if (mac_conn) {
-                        /* compare both MACs */
-                        if (g_strcmp0 (mac_dev, mac_conn) == 0) {
-                                g_free (mac_conn);
-                                return TRUE;
-                        }
-                        g_free (mac_conn);
-                }
-        }
-        return FALSE;
-}
-
-static GSList *
-valid_connections_for_device (NMRemoteSettings *remote_settings,
-                              NetDevice *device)
-{
-        GSList *all, *filtered, *iterator, *valid;
-        NMConnection *connection;
-        NMSettingConnection *s_con;
-
-        all = nm_remote_settings_list_connections (remote_settings);
-        filtered = nm_device_filter_connections (device->priv->nm_device, all);
-        g_slist_free (all);
-
-        valid = NULL;
-        for (iterator = filtered; iterator; iterator = iterator->next) {
-                connection = iterator->data;
-                s_con = nm_connection_get_setting_connection (connection);
-                if (!s_con)
-                        continue;
-
-                if (nm_setting_connection_get_master (s_con))
-                        continue;
-
-                valid = g_slist_prepend (valid, connection);
-        }
-        g_slist_free (filtered);
-
-        return g_slist_reverse (valid);
-}
-
-NMConnection *
-net_device_get_find_connection (NetDevice *device)
-{
-        GSList *list, *iterator;
-        NMConnection *connection = NULL;
-        NMActiveConnection *ac;
-        NMRemoteSettings *remote_settings;
-
-        /* is the device available in a active connection? */
-        remote_settings = net_object_get_remote_settings (NET_OBJECT (device));
-        ac = nm_device_get_active_connection (device->priv->nm_device);
-        if (ac) {
-                return (NMConnection*)nm_remote_settings_get_connection_by_path (remote_settings,
-                                        nm_active_connection_get_connection (ac));
-        }
-
-        /* not found in active connections - check all available connections */
-        list = valid_connections_for_device (remote_settings, device);
-        if (list != NULL) {
-                /* if list has only one connection, use this connection */
-                if (g_slist_length (list) == 1) {
-                        connection = list->data;
-                        goto out;
-                }
-
-                /* is there connection with the MAC address of the device? */
-                for (iterator = list; iterator; iterator = iterator->next) {
-                        connection = iterator->data;
-                        if (compare_mac_device_with_mac_connection (device->priv->nm_device,
-                                                                    connection)) {
-                                goto out;
-                        }
-                }
-        }
-
-        /* no connection found for the given device */
-        connection = NULL;
-out:
-        g_slist_free (list);
-        return connection;
-}
-
-static void
-state_changed_cb (NMDevice *device,
-                  NMDeviceState new_state,
-                  NMDeviceState old_state,
-                  NMDeviceStateReason reason,
-                  NetDevice *net_device)
-{
-        net_object_emit_changed (NET_OBJECT (net_device));
-        net_object_refresh (NET_OBJECT (net_device));
-}
-
-NMDevice *
-net_device_get_nm_device (NetDevice *device)
-{
-        return device->priv->nm_device;
-}
-
-static void
-net_device_edit (NetObject *object)
-{
-        const gchar *uuid;
-        gchar *cmdline;
-        GError *error = NULL;
-        NetDevice *device = NET_DEVICE (object);
-        NMConnection *connection;
-
-        connection = net_device_get_find_connection (device);
-        uuid = nm_connection_get_uuid (connection);
-        cmdline = g_strdup_printf ("nm-connection-editor --edit %s", uuid);
-        g_debug ("Launching '%s'\n", cmdline);
-        if (!g_spawn_command_line_async (cmdline, &error)) {
-                g_warning ("Failed to launch nm-connection-editor: %s", error->message);
-                g_error_free (error);
-        }
-        g_free (cmdline);
-}
-
-/**
- * net_device_get_property:
- **/
-static void
-net_device_get_property (GObject *device_,
-                         guint prop_id,
-                         GValue *value,
-                         GParamSpec *pspec)
-{
-        NetDevice *net_device = NET_DEVICE (device_);
-        NetDevicePrivate *priv = net_device->priv;
-
-        switch (prop_id) {
-        case PROP_DEVICE:
-                g_value_set_object (value, priv->nm_device);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (net_device, prop_id, pspec);
-                break;
-        }
-}
-
-/**
- * net_device_set_property:
- **/
-static void
-net_device_set_property (GObject *device_,
-                         guint prop_id,
-                         const GValue *value,
-                         GParamSpec *pspec)
-{
-        NetDevice *net_device = NET_DEVICE (device_);
-        NetDevicePrivate *priv = net_device->priv;
-
-        switch (prop_id) {
-        case PROP_DEVICE:
-                if (priv->changed_id != 0) {
-                        g_signal_handler_disconnect (priv->nm_device,
-                                                     priv->changed_id);
-                }
-                priv->nm_device = g_value_dup_object (value);
-                priv->changed_id = g_signal_connect (priv->nm_device,
-                                                     "state-changed",
-                                                     G_CALLBACK (state_changed_cb),
-                                                     net_device);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (net_device, prop_id, pspec);
-                break;
-        }
-}
-
-static void
-net_device_finalize (GObject *object)
-{
-        NetDevice *device = NET_DEVICE (object);
-        NetDevicePrivate *priv = device->priv;
-
-        if (priv->changed_id != 0) {
-                g_signal_handler_disconnect (priv->nm_device,
-                                             priv->changed_id);
-        }
-        if (priv->nm_device != NULL)
-                g_object_unref (priv->nm_device);
-
-        G_OBJECT_CLASS (net_device_parent_class)->finalize (object);
-}
-
-static void
-net_device_class_init (NetDeviceClass *klass)
-{
-        GParamSpec *pspec;
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        NetObjectClass *parent_class = NET_OBJECT_CLASS (klass);
-
-        object_class->finalize = net_device_finalize;
-        object_class->get_property = net_device_get_property;
-        object_class->set_property = net_device_set_property;
-        parent_class->edit = net_device_edit;
-
-        pspec = g_param_spec_object ("nm-device", NULL, NULL,
-                                     NM_TYPE_DEVICE,
-                                     G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_DEVICE, pspec);
-
-        g_type_class_add_private (klass, sizeof (NetDevicePrivate));
-}
-
-static void
-net_device_init (NetDevice *device)
-{
-        device->priv = NET_DEVICE_GET_PRIVATE (device);
-}
-
-NetDevice *
-net_device_new (void)
-{
-        NetDevice *device;
-        device = g_object_new (NET_TYPE_DEVICE,
-                               "removable", FALSE,
-                               NULL);
-        return NET_DEVICE (device);
-}
-
diff --git a/panels/network/net-device.h b/panels/network/net-device.h
deleted file mode 100644
index b3951e5..0000000
--- a/panels/network/net-device.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_DEVICE_H
-#define __NET_DEVICE_H
-
-#include <glib-object.h>
-
-#include "net-object.h"
-#include "nm-device.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_DEVICE          (net_device_get_type ())
-#define NET_DEVICE(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_DEVICE, NetDevice))
-#define NET_DEVICE_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_DEVICE, NetDeviceClass))
-#define NET_IS_DEVICE(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_DEVICE))
-#define NET_IS_DEVICE_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_DEVICE))
-#define NET_DEVICE_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_DEVICE, NetDeviceClass))
-
-typedef struct _NetDevicePrivate         NetDevicePrivate;
-typedef struct _NetDevice                NetDevice;
-typedef struct _NetDeviceClass           NetDeviceClass;
-
-struct _NetDevice
-{
-         NetObject               parent;
-         NetDevicePrivate       *priv;
-};
-
-struct _NetDeviceClass
-{
-        NetObjectClass               parent_class;
-};
-
-GType            net_device_get_type                    (void);
-NetDevice       *net_device_new                         (void);
-NMDevice        *net_device_get_nm_device               (NetDevice      *device);
-NMConnection    *net_device_get_find_connection         (NetDevice      *device);
-
-G_END_DECLS
-
-#endif /* __NET_DEVICE_H */
-
diff --git a/panels/network/net-object.c b/panels/network/net-object.c
deleted file mode 100644
index 02388b9..0000000
--- a/panels/network/net-object.c
+++ /dev/null
@@ -1,353 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-
-#include "net-object.h"
-
-#define NET_OBJECT_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_OBJECT, NetObjectPrivate))
-
-struct _NetObjectPrivate
-{
-        gchar                           *id;
-        gchar                           *title;
-        gboolean                         removable;
-        GCancellable                    *cancellable;
-        NMClient                        *client;
-        NMRemoteSettings                *remote_settings;
-        CcNetworkPanel                  *panel;
-};
-
-enum {
-        PROP_0,
-        PROP_ID,
-        PROP_TITLE,
-        PROP_REMOVABLE,
-        PROP_CLIENT,
-        PROP_REMOTE_SETTINGS,
-        PROP_CANCELLABLE,
-        PROP_PANEL,
-        PROP_LAST
-};
-
-enum {
-        SIGNAL_CHANGED,
-        SIGNAL_REMOVED,
-        SIGNAL_LAST
-};
-
-static guint signals[SIGNAL_LAST] = { 0 };
-G_DEFINE_TYPE (NetObject, net_object, G_TYPE_OBJECT)
-
-void
-net_object_emit_changed (NetObject *object)
-{
-        g_return_if_fail (NET_IS_OBJECT (object));
-        g_debug ("NetObject: %s emit 'changed'", object->priv->id);
-        g_signal_emit (object, signals[SIGNAL_CHANGED], 0);
-}
-
-void
-net_object_emit_removed (NetObject *object)
-{
-        g_return_if_fail (NET_IS_OBJECT (object));
-        g_debug ("NetObject: %s emit 'removed'", object->priv->id);
-        g_signal_emit (object, signals[SIGNAL_REMOVED], 0);
-}
-
-const gchar *
-net_object_get_id (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), NULL);
-        return object->priv->id;
-}
-
-void
-net_object_set_id (NetObject *object, const gchar *id)
-{
-        g_return_if_fail (NET_IS_OBJECT (object));
-        object->priv->id = g_strdup (id);
-}
-
-gboolean
-net_object_get_removable (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), FALSE);
-        return object->priv->removable;
-}
-
-const gchar *
-net_object_get_title (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), NULL);
-        return object->priv->title;
-}
-
-void
-net_object_set_title (NetObject *object, const gchar *title)
-{
-        g_return_if_fail (NET_IS_OBJECT (object));
-        object->priv->title = g_strdup (title);
-}
-
-NMClient *
-net_object_get_client (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), NULL);
-        return object->priv->client;
-}
-
-NMRemoteSettings *
-net_object_get_remote_settings (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), NULL);
-        return object->priv->remote_settings;
-}
-
-GCancellable *
-net_object_get_cancellable (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), NULL);
-        return object->priv->cancellable;
-}
-
-CcNetworkPanel *
-net_object_get_panel (NetObject *object)
-{
-        g_return_val_if_fail (NET_IS_OBJECT (object), NULL);
-        return object->priv->panel;
-}
-
-GtkWidget *
-net_object_add_to_notebook (NetObject *object,
-                            GtkNotebook *notebook,
-                            GtkSizeGroup *heading_size_group)
-{
-        GtkWidget *widget;
-        NetObjectClass *klass = NET_OBJECT_GET_CLASS (object);
-        if (klass->add_to_notebook != NULL) {
-                widget = klass->add_to_notebook (object,
-                                                 notebook,
-                                                 heading_size_group);
-                g_object_set_data_full (G_OBJECT (widget),
-                                        "NetObject::id",
-                                        g_strdup (object->priv->id),
-                                        g_free);
-                return widget;
-        }
-        g_debug ("no klass->add_to_notebook for %s", object->priv->id);
-        return NULL;
-}
-
-void
-net_object_delete (NetObject *object)
-{
-        NetObjectClass *klass = NET_OBJECT_GET_CLASS (object);
-        if (klass->delete != NULL)
-                klass->delete (object);
-}
-
-void
-net_object_refresh (NetObject *object)
-{
-        NetObjectClass *klass = NET_OBJECT_GET_CLASS (object);
-        if (klass->refresh != NULL)
-                klass->refresh (object);
-}
-
-void
-net_object_edit (NetObject *object)
-{
-        NetObjectClass *klass = NET_OBJECT_GET_CLASS (object);
-        if (klass->edit != NULL)
-                klass->edit (object);
-}
-
-/**
- * net_object_get_property:
- **/
-static void
-net_object_get_property (GObject *object_,
-                         guint prop_id,
-                         GValue *value,
-                         GParamSpec *pspec)
-{
-        NetObject *object = NET_OBJECT (object_);
-        NetObjectPrivate *priv = object->priv;
-
-        switch (prop_id) {
-        case PROP_ID:
-                g_value_set_string (value, priv->id);
-                break;
-        case PROP_TITLE:
-                g_value_set_string (value, priv->title);
-                break;
-        case PROP_REMOVABLE:
-                g_value_set_boolean (value, priv->removable);
-                break;
-        case PROP_CLIENT:
-                g_value_set_object (value, priv->client);
-                break;
-        case PROP_REMOTE_SETTINGS:
-                g_value_set_object (value, priv->remote_settings);
-                break;
-        case PROP_CANCELLABLE:
-                g_value_set_object (value, priv->cancellable);
-                break;
-        case PROP_PANEL:
-                g_value_set_object (value, priv->panel);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-                break;
-        }
-}
-
-/**
- * net_object_set_property:
- **/
-static void
-net_object_set_property (GObject *object_,
-                         guint prop_id,
-                         const GValue *value,
-                         GParamSpec *pspec)
-{
-        NetObject *object = NET_OBJECT (object_);
-        NetObjectPrivate *priv = object->priv;
-
-        switch (prop_id) {
-        case PROP_ID:
-                g_free (priv->id);
-                priv->id = g_strdup (g_value_get_string (value));
-                break;
-        case PROP_TITLE:
-                g_free (priv->title);
-                priv->title = g_strdup (g_value_get_string (value));
-                break;
-        case PROP_REMOVABLE:
-                priv->removable = g_value_get_boolean (value);
-                break;
-        case PROP_CLIENT:
-                priv->client = g_value_dup_object (value);
-                break;
-        case PROP_REMOTE_SETTINGS:
-                priv->remote_settings = g_value_dup_object (value);
-                break;
-        case PROP_CANCELLABLE:
-                priv->cancellable = g_value_dup_object (value);
-                break;
-        case PROP_PANEL:
-                priv->panel = g_value_dup_object (value);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-                break;
-        }
-}
-
-static void
-net_object_finalize (GObject *object)
-{
-        NetObject *nm_object = NET_OBJECT (object);
-        NetObjectPrivate *priv = nm_object->priv;
-
-        g_free (priv->id);
-        g_free (priv->title);
-        if (priv->client != NULL)
-                g_object_unref (priv->client);
-        if (priv->remote_settings != NULL)
-                g_object_unref (priv->remote_settings);
-        if (priv->cancellable != NULL)
-                g_object_unref (priv->cancellable);
-        if (priv->panel != NULL)
-                g_object_unref (priv->panel);
-        G_OBJECT_CLASS (net_object_parent_class)->finalize (object);
-}
-
-static void
-net_object_class_init (NetObjectClass *klass)
-{
-        GParamSpec *pspec;
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        object_class->finalize = net_object_finalize;
-        object_class->get_property = net_object_get_property;
-        object_class->set_property = net_object_set_property;
-
-        pspec = g_param_spec_string ("id", NULL, NULL,
-                                     NULL,
-                                     G_PARAM_READWRITE);
-        g_object_class_install_property (object_class, PROP_ID, pspec);
-
-        pspec = g_param_spec_string ("title", NULL, NULL,
-                                     NULL,
-                                     G_PARAM_READWRITE);
-        g_object_class_install_property (object_class, PROP_TITLE, pspec);
-
-        pspec = g_param_spec_boolean ("removable", NULL, NULL,
-                                      TRUE,
-                                      G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_REMOVABLE, pspec);
-
-        pspec = g_param_spec_object ("client", NULL, NULL,
-                                     NM_TYPE_CLIENT,
-                                     G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_CLIENT, pspec);
-
-        pspec = g_param_spec_object ("remote-settings", NULL, NULL,
-                                     NM_TYPE_REMOTE_SETTINGS,
-                                     G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_REMOTE_SETTINGS, pspec);
-
-        pspec = g_param_spec_object ("cancellable", NULL, NULL,
-                                     G_TYPE_CANCELLABLE,
-                                     G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_CANCELLABLE, pspec);
-
-        pspec = g_param_spec_object ("panel", NULL, NULL,
-                                     CC_TYPE_NETWORK_PANEL,
-                                     G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_PANEL, pspec);
-
-        signals[SIGNAL_CHANGED] =
-                g_signal_new ("changed",
-                              G_TYPE_FROM_CLASS (object_class), G_SIGNAL_RUN_LAST,
-                              G_STRUCT_OFFSET (NetObjectClass, changed),
-                              NULL, NULL, g_cclosure_marshal_VOID__VOID,
-                              G_TYPE_NONE, 0);
-        signals[SIGNAL_REMOVED] =
-                g_signal_new ("removed",
-                              G_TYPE_FROM_CLASS (object_class), G_SIGNAL_RUN_LAST,
-                              G_STRUCT_OFFSET (NetObjectClass, changed),
-                              NULL, NULL, g_cclosure_marshal_VOID__VOID,
-                              G_TYPE_NONE, 0);
-
-        g_type_class_add_private (klass, sizeof (NetObjectPrivate));
-}
-
-static void
-net_object_init (NetObject *object)
-{
-        object->priv = NET_OBJECT_GET_PRIVATE (object);
-}
-
diff --git a/panels/network/net-object.h b/panels/network/net-object.h
deleted file mode 100644
index fb3bb6b..0000000
--- a/panels/network/net-object.h
+++ /dev/null
@@ -1,94 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_OBJECT_H
-#define __NET_OBJECT_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-#include <nm-client.h>
-#include <nm-remote-settings.h>
-
-#include "cc-network-panel.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_OBJECT          (net_object_get_type ())
-#define NET_OBJECT(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_OBJECT, NetObject))
-#define NET_OBJECT_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_OBJECT, NetObjectClass))
-#define NET_IS_OBJECT(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_OBJECT))
-#define NET_IS_OBJECT_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_OBJECT))
-#define NET_OBJECT_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_OBJECT, NetObjectClass))
-
-typedef struct _NetObjectPrivate         NetObjectPrivate;
-typedef struct _NetObject                NetObject;
-typedef struct _NetObjectClass           NetObjectClass;
-
-struct _NetObject
-{
-         GObject                 parent;
-         NetObjectPrivate       *priv;
-};
-
-struct _NetObjectClass
-{
-        GObjectClass             parent_class;
-
-        /* vtable */
-        GtkWidget               *(*add_to_notebook)    (NetObject       *object,
-                                                        GtkNotebook     *notebook,
-                                                        GtkSizeGroup    *heading_size_group);
-        void                     (*delete)              (NetObject       *object);
-        void                     (*refresh)             (NetObject       *object);
-        void                     (*edit)                (NetObject       *object);
-
-        /* signal */
-        void                     (* changed)            (NetObject      *object);
-        void                     (* removed)            (NetObject      *object);
-};
-
-GType            net_object_get_type                    (void);
-const gchar     *net_object_get_id                      (NetObject      *object);
-void             net_object_set_id                      (NetObject      *object,
-                                                         const gchar    *id);
-const gchar     *net_object_get_title                   (NetObject      *object);
-void             net_object_set_title                   (NetObject      *object,
-                                                         const gchar    *title);
-NMClient        *net_object_get_client                  (NetObject      *object);
-NMRemoteSettings *net_object_get_remote_settings        (NetObject      *object);
-GCancellable    *net_object_get_cancellable             (NetObject      *object);
-CcNetworkPanel  *net_object_get_panel                   (NetObject      *object);
-void             net_object_emit_changed                (NetObject      *object);
-void             net_object_emit_removed                (NetObject      *object);
-void             net_object_delete                      (NetObject      *object);
-void             net_object_refresh                     (NetObject      *object);
-void             net_object_edit                        (NetObject      *object);
-GtkWidget       *net_object_add_to_notebook             (NetObject      *object,
-                                                         GtkNotebook    *notebook,
-                                                         GtkSizeGroup   *heading_size_group);
-gboolean         net_object_get_removable               (NetObject      *object);
-void             net_object_set_removable               (NetObject      *object,
-                                                         gboolean        removable);
-
-G_END_DECLS
-
-#endif /* __NET_OBJECT_H */
-
diff --git a/panels/network/net-proxy.c b/panels/network/net-proxy.c
deleted file mode 100644
index 4cd932a..0000000
--- a/panels/network/net-proxy.c
+++ /dev/null
@@ -1,543 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-#include <gio/gio.h>
-
-#include <grp.h>
-#include <unistd.h>
-#include <gdesktop-enums.h>
-
-#include "net-proxy.h"
-
-
-
-#define NET_PROXY_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_PROXY, NetProxyPrivate))
-
-struct _NetProxyPrivate
-{
-        GSettings        *settings;
-        GtkBuilder       *builder;
-};
-
-G_DEFINE_TYPE (NetProxy, net_proxy, NET_TYPE_OBJECT)
-
-static void
-check_wpad_warning (NetProxy *proxy)
-{
-        GtkWidget *widget;
-        gchar *autoconfig_url = NULL;
-        GString *string = NULL;
-        gboolean ret = FALSE;
-        guint mode;
-
-        string = g_string_new ("");
-
-        /* check we're using 'Automatic' */
-        mode = g_settings_get_enum (proxy->priv->settings, "mode");
-        if (mode != 2)
-                goto out;
-
-        /* see if the PAC is blank */
-        autoconfig_url = g_settings_get_string (proxy->priv->settings,
-                                                "autoconfig-url");
-        ret = autoconfig_url == NULL ||
-              autoconfig_url[0] == '\0';
-        if (!ret)
-                goto out;
-
-        g_string_append (string, "<small>");
-
-        /* TRANSLATORS: this is when the use leaves the PAC textbox blank */
-        g_string_append (string, _("Web Proxy Autodiscovery is used when a Configuration URL is not provided."));
-
-        g_string_append (string, "\n");
-
-        /* TRANSLATORS: WPAD is bad: if you enable it on an untrusted
-         * network, then anyone else on that network can tell your
-         * machine that it should proxy all of your web traffic
-         * through them. */
-        g_string_append (string, _("This is not recommended for untrusted public networks."));
-        g_string_append (string, "</small>");
-out:
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "label_proxy_warning"));
-        gtk_label_set_markup (GTK_LABEL (widget), string->str);
-        g_free (autoconfig_url);
-        g_string_free (string, TRUE);
-}
-
-static void
-settings_changed_cb (GSettings *settings,
-                     const gchar *key,
-                     NetProxy *proxy)
-{
-        check_wpad_warning (proxy);
-}
-
-static void
-panel_proxy_mode_combo_setup_widgets (NetProxy *proxy, guint value)
-{
-        GtkWidget *widget;
-
-        /* hide or show the PAC text box */
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "heading_proxy_url"));
-        gtk_widget_set_visible (widget, value == 2);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_url"));
-        gtk_widget_set_visible (widget, value == 2);
-
-        /* hide or show the manual entry text boxes */
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "heading_proxy_http"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_http"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "spinbutton_proxy_http"));
-        gtk_widget_set_visible (widget, value == 1);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "heading_proxy_https"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_https"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "spinbutton_proxy_https"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "heading_proxy_ftp"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_ftp"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "spinbutton_proxy_ftp"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "heading_proxy_socks"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_socks"));
-        gtk_widget_set_visible (widget, value == 1);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "spinbutton_proxy_socks"));
-        gtk_widget_set_visible (widget, value == 1);
-
-        /* perhaps show the wpad warning */
-        check_wpad_warning (proxy);
-}
-
-static void
-panel_set_value_for_combo (NetProxy *proxy, GtkComboBox *combo_box, gint value)
-{
-        gboolean ret;
-        gint value_tmp;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-
-        /* get entry */
-        model = gtk_combo_box_get_model (combo_box);
-        ret = gtk_tree_model_get_iter_first (model, &iter);
-        if (!ret)
-                return;
-
-        /* try to make the UI match the setting */
-        do {
-                gtk_tree_model_get (model, &iter,
-                                    1, &value_tmp,
-                                    -1);
-                if (value == value_tmp) {
-                        gtk_combo_box_set_active_iter (combo_box, &iter);
-                        break;
-                }
-        } while (gtk_tree_model_iter_next (model, &iter));
-
-        /* hide or show the correct widgets */
-        panel_proxy_mode_combo_setup_widgets (proxy, value);
-}
-
-static void
-panel_proxy_mode_combo_changed_cb (GtkWidget *widget, NetProxy *proxy)
-{
-        gboolean ret;
-        gint value;
-        GtkTreeIter iter;
-        GtkTreeModel *model;
-
-        /* no selection */
-        ret = gtk_combo_box_get_active_iter (GTK_COMBO_BOX (widget), &iter);
-        if (!ret)
-                return;
-
-        /* get entry */
-        model = gtk_combo_box_get_model (GTK_COMBO_BOX (widget));
-        gtk_tree_model_get (model, &iter,
-                            1, &value,
-                            -1);
-
-        /* set */
-        g_settings_set_enum (proxy->priv->settings, "mode", value);
-
-        /* hide or show the correct widgets */
-        panel_proxy_mode_combo_setup_widgets (proxy, value);
-}
-
-static GtkWidget *
-net_proxy_add_to_notebook (NetObject *object,
-                           GtkNotebook *notebook,
-                           GtkSizeGroup *heading_size_group)
-{
-        GtkWidget *widget;
-        GtkWindow *window;
-        NetProxy *proxy = NET_PROXY (object);
-
-        /* add widgets to size group */
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "heading_proxy_method"));
-        gtk_size_group_add_widget (heading_size_group, widget);
-
-        /* reparent */
-        window = GTK_WINDOW (gtk_builder_get_object (proxy->priv->builder,
-                                                     "window_tmp"));
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "grid5"));
-        g_object_ref (widget);
-        gtk_container_remove (GTK_CONTAINER (window), widget);
-        gtk_notebook_append_page (notebook, widget, NULL);
-        g_object_unref (widget);
-        return widget;
-}
-
-static void
-net_proxy_finalize (GObject *object)
-{
-        NetProxy *proxy = NET_PROXY (object);
-        NetProxyPrivate *priv = proxy->priv;
-
-        g_clear_object (&priv->settings);
-        g_clear_object (&priv->builder);
-
-        G_OBJECT_CLASS (net_proxy_parent_class)->finalize (object);
-}
-
-static void
-net_proxy_class_init (NetProxyClass *klass)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        NetObjectClass *parent_class = NET_OBJECT_CLASS (klass);
-
-        object_class->finalize = net_proxy_finalize;
-        parent_class->add_to_notebook = net_proxy_add_to_notebook;
-        g_type_class_add_private (klass, sizeof (NetProxyPrivate));
-}
-
-
-static gboolean
-ubuntu_is_in_admin_group (int id_group)
-{
-        gid_t groups [1024];
-       int i, ngroups;
-
-        ngroups = getgroups (1024, groups);
-        if (ngroups < 0) {
-                perror ("getgroups");
-                return FALSE;
-        }
-
-        for (i = 0; i < ngroups; ++i) {
-                if (groups[i] == id_group)
-                        return TRUE;
-        }
-
-        return FALSE;
-}
-
-static gboolean
-ubuntu_is_admin ()
-{
-        struct group *admin_group;
-
-        admin_group = getgrnam ("admin");
-        if (admin_group != NULL && ubuntu_is_in_admin_group (admin_group->gr_gid))
-                return TRUE;
-
-        admin_group = getgrnam ("sudo");
-        if (admin_group != NULL && ubuntu_is_in_admin_group (admin_group->gr_gid))
-                return TRUE;
-
-        return FALSE;
-}
-
-static void
-ubuntu_reset_system_proxy (GDBusProxy *proxy, const gchar *protocol)
-{
-        GVariant *result;
-        GError *error = NULL;
-
-        result = g_dbus_proxy_call_sync (proxy, "set_proxy",
-                                         g_variant_new ("(ss)", protocol, ""),
-                                         G_DBUS_CALL_FLAGS_NONE,
-                                         -1, NULL, &error);
-        if (result)
-                g_variant_unref (result);
-        else {
-                g_warning ("Error while calling set_proxy for %s protocol: %s", protocol, error->message);
-                g_error_free (error);
-        }
-}
-
-static void
-ubuntu_set_proxy_for_protocol (GDBusProxy *proxy, const gchar *protocol, GSettings *settings)
-{
-        GVariant *result;
-        gchar *proxy_str, *host;
-        GError *error = NULL;
-        gint port;
-
-        host = g_settings_get_string (settings, "host");
-        port = g_settings_get_int (settings, "port");
-
-        if (host && *host == '\0') {
-                ubuntu_reset_system_proxy (proxy, protocol);
-        } else {
-                proxy_str = g_strdup_printf ("%s://%s:%i/", protocol, host, port);
-
-                result = g_dbus_proxy_call_sync (proxy, "set_proxy",
-                                                 g_variant_new ("(ss)", protocol, proxy_str),
-                                                 G_DBUS_CALL_FLAGS_NONE,
-                                                 -1, NULL, &error);
-                if (result)
-                        g_variant_unref (result);
-                else {
-                        g_warning ("Error while calling set_proxy for %s protocol: %s", protocol, error->message);
-                        g_error_free (error);
-                }
-                g_free (proxy_str);
-        }
-
-        /* Free memory */
-        g_free (host);
-        g_object_unref (settings);
-}
-
-static void
-ubuntu_on_proxy_apply_system_settings (GtkButton *button, gpointer user_data)
-{
-        GDBusConnection *bus;
-        GDBusProxy *dbus_proxy;
-        GError *error;
-        GDesktopProxyMode proxy_mode;
-        NetProxy *proxy = NET_PROXY (user_data);
-
-        error = NULL;
-        bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-        if (!bus) {
-                g_warning ("Could not retrieve system bus: %s", error->message);
-                g_error_free (error);
-
-                return;
-        }
-
-        dbus_proxy = g_dbus_proxy_new_sync (bus, 0, NULL,
-                                       "com.ubuntu.SystemService",
-                                       "/",
-                                       "com.ubuntu.SystemService",
-                                       NULL,
-                                       &error);
-        if (!dbus_proxy) {
-                g_warning ("Could not retrieve bus object: %s", error->message);
-                g_error_free (error);
-
-                return;
-        }
-
-        /* Retrieve the current settings */
-        proxy_mode = g_settings_get_enum (proxy->priv->settings, "mode");
-        switch (proxy_mode) {
-        case G_DESKTOP_PROXY_MODE_AUTO:
-        case G_DESKTOP_PROXY_MODE_NONE:
-                ubuntu_reset_system_proxy (dbus_proxy, "http");
-                ubuntu_reset_system_proxy (dbus_proxy, "https");
-                ubuntu_reset_system_proxy (dbus_proxy, "ftp");
-                ubuntu_reset_system_proxy (dbus_proxy, "socks");
-                break;
-        case G_DESKTOP_PROXY_MODE_MANUAL:
-                ubuntu_set_proxy_for_protocol (dbus_proxy, "http", g_settings_get_child (proxy->priv->settings, "http"));
-                ubuntu_set_proxy_for_protocol (dbus_proxy, "https", g_settings_get_child (proxy->priv->settings, "https"));
-                ubuntu_set_proxy_for_protocol (dbus_proxy, "ftp", g_settings_get_child (proxy->priv->settings, "ftp"));
-                ubuntu_set_proxy_for_protocol (dbus_proxy, "socks", g_settings_get_child (proxy->priv->settings, "socks"));
-                break;
-        }
-
-        /* Free memory */
-        g_object_unref (dbus_proxy);
-}
-
-static void
-net_proxy_init (NetProxy *proxy)
-{
-        GError *error = NULL;
-        gint value;
-        GSettings *settings_tmp;
-        GtkAdjustment *adjustment;
-        GtkWidget *widget;
-
-        proxy->priv = NET_PROXY_GET_PRIVATE (proxy);
-
-        proxy->priv->builder = gtk_builder_new ();
-        gtk_builder_add_from_file (proxy->priv->builder,
-                                   GNOMECC_UI_DIR "/network-proxy.ui",
-                                   &error);
-        if (error != NULL) {
-                g_warning ("Could not load interface file: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        proxy->priv->settings = g_settings_new ("org.gnome.system.proxy");
-        g_signal_connect (proxy->priv->settings,
-                          "changed",
-                          G_CALLBACK (settings_changed_cb),
-                          proxy);
-
-        /* explicitly set this to false as the panel has no way of
-         * linking the http and https proxies them together */
-        g_settings_set_boolean (proxy->priv->settings,
-                                "use-same-proxy",
-                                FALSE);
-
-        /* actions */
-        value = g_settings_get_enum (proxy->priv->settings, "mode");
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "combobox_proxy_mode"));
-        panel_set_value_for_combo (proxy, GTK_COMBO_BOX (widget), value);
-        g_signal_connect (widget, "changed",
-                          G_CALLBACK (panel_proxy_mode_combo_changed_cb),
-                          proxy);
-
-        /* bind the proxy values */
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_url"));
-        g_settings_bind (proxy->priv->settings, "autoconfig-url",
-                         widget, "text",
-                         G_SETTINGS_BIND_DEFAULT);
-
-        /* bind the HTTP proxy values */
-        settings_tmp = g_settings_get_child (proxy->priv->settings, "http");
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_http"));
-        g_settings_bind (settings_tmp, "host",
-                         widget, "text",
-                         G_SETTINGS_BIND_DEFAULT);
-        adjustment = GTK_ADJUSTMENT (gtk_builder_get_object (proxy->priv->builder,
-                                                             "adjustment_proxy_port_http"));
-        g_settings_bind (settings_tmp, "port",
-                         adjustment, "value",
-                         G_SETTINGS_BIND_DEFAULT);
-        g_object_unref (settings_tmp);
-
-        /* bind the HTTPS proxy values */
-        settings_tmp = g_settings_get_child (proxy->priv->settings, "https");
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_https"));
-        g_settings_bind (settings_tmp, "host",
-                         widget, "text",
-                         G_SETTINGS_BIND_DEFAULT);
-        adjustment = GTK_ADJUSTMENT (gtk_builder_get_object (proxy->priv->builder,
-                                                             "adjustment_proxy_port_https"));
-        g_settings_bind (settings_tmp, "port",
-                         adjustment, "value",
-                         G_SETTINGS_BIND_DEFAULT);
-        g_object_unref (settings_tmp);
-
-        /* bind the FTP proxy values */
-        settings_tmp = g_settings_get_child (proxy->priv->settings, "ftp");
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_ftp"));
-        g_settings_bind (settings_tmp, "host",
-                         widget, "text",
-                         G_SETTINGS_BIND_DEFAULT);
-        adjustment = GTK_ADJUSTMENT (gtk_builder_get_object (proxy->priv->builder,
-                                                             "adjustment_proxy_port_ftp"));
-        g_settings_bind (settings_tmp, "port",
-                         adjustment, "value",
-                         G_SETTINGS_BIND_DEFAULT);
-        g_object_unref (settings_tmp);
-
-        /* bind the SOCKS proxy values */
-        settings_tmp = g_settings_get_child (proxy->priv->settings, "socks");
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "entry_proxy_socks"));
-        g_settings_bind (settings_tmp, "host",
-                         widget, "text",
-                         G_SETTINGS_BIND_DEFAULT);
-        adjustment = GTK_ADJUSTMENT (gtk_builder_get_object (proxy->priv->builder,
-                                                             "adjustment_proxy_port_socks"));
-        g_settings_bind (settings_tmp, "port",
-                         adjustment, "value",
-                         G_SETTINGS_BIND_DEFAULT);
-        g_object_unref (settings_tmp);
-
-        /* set header to something sane */
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "image_proxy_device"));
-        gtk_image_set_from_icon_name (GTK_IMAGE (widget),
-                                      "preferences-system-network",
-                                      GTK_ICON_SIZE_DIALOG);
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "label_proxy_device"));
-        gtk_label_set_label (GTK_LABEL (widget),
-                             _("Proxy"));
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "label_proxy_status"));
-        gtk_label_set_label (GTK_LABEL (widget), "");
-
-        /* Ubuntu button for system proxy settings */
-        if (ubuntu_is_admin ()) {
-                g_signal_connect (G_OBJECT (gtk_builder_get_object (proxy->priv->builder, "system_proxy_button")), "clicked",
-                                  G_CALLBACK (ubuntu_on_proxy_apply_system_settings), proxy);
-        } else
-                gtk_widget_hide (GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder, "system_proxy_button")));
-
-        /* hide the switch until we get some more detail in the mockup */
-        widget = GTK_WIDGET (gtk_builder_get_object (proxy->priv->builder,
-                                                     "device_proxy_off_switch"));
-        if (widget != NULL)
-                gtk_widget_hide (widget);
-}
-
-NetProxy *
-net_proxy_new (void)
-{
-        NetProxy *proxy;
-        proxy = g_object_new (NET_TYPE_PROXY,
-                              "removable", FALSE,
-                              "id", "proxy",
-                              NULL);
-        return NET_PROXY (proxy);
-}
diff --git a/panels/network/net-proxy.h b/panels/network/net-proxy.h
deleted file mode 100644
index 5eece5b..0000000
--- a/panels/network/net-proxy.h
+++ /dev/null
@@ -1,59 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_PROXY_H
-#define __NET_PROXY_H
-
-#include <glib-object.h>
-
-#include "net-object.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_PROXY          (net_proxy_get_type ())
-#define NET_PROXY(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_PROXY, NetProxy))
-#define NET_PROXY_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_PROXY, NetProxyClass))
-#define NET_IS_PROXY(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_PROXY))
-#define NET_IS_PROXY_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_PROXY))
-#define NET_PROXY_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_PROXY, NetProxyClass))
-
-typedef struct _NetProxyPrivate         NetProxyPrivate;
-typedef struct _NetProxy                NetProxy;
-typedef struct _NetProxyClass           NetProxyClass;
-
-struct _NetProxy
-{
-        NetObject                parent;
-        NetProxyPrivate         *priv;
-};
-
-struct _NetProxyClass
-{
-        NetObjectClass           parent_class;
-};
-
-GType            net_proxy_get_type                     (void);
-NetProxy        *net_proxy_new                          (void);
-
-G_END_DECLS
-
-#endif /* __NET_PROXY_H */
-
diff --git a/panels/network/net-vpn.c b/panels/network/net-vpn.c
deleted file mode 100644
index 828acab..0000000
--- a/panels/network/net-vpn.c
+++ /dev/null
@@ -1,518 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011-2012 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib-object.h>
-#include <glib/gi18n.h>
-
-#include "panel-common.h"
-
-#include "net-vpn.h"
-#include "nm-client.h"
-#include "nm-remote-connection.h"
-#include "nm-setting-vpn.h"
-
-#define NET_VPN_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), NET_TYPE_VPN, NetVpnPrivate))
-
-struct _NetVpnPrivate
-{
-        GtkBuilder              *builder;
-        NMConnection            *connection;
-        gchar                   *service_type;
-        gboolean                 valid;
-        gboolean                 updating_device;
-};
-
-enum {
-        PROP_0,
-        PROP_CONNECTION,
-        PROP_LAST
-};
-
-G_DEFINE_TYPE (NetVpn, net_vpn, NET_TYPE_OBJECT)
-
-static void
-connection_vpn_state_changed_cb (NMVPNConnection *connection,
-                                 NMVPNConnectionState state,
-                                 NMVPNConnectionStateReason reason,
-                                 NetVpn *vpn)
-{
-        net_object_emit_changed (NET_OBJECT (vpn));
-}
-
-static void
-connection_changed_cb (NMConnection *connection,
-                       NetVpn *vpn)
-{
-        net_object_emit_changed (NET_OBJECT (vpn));
-}
-
-static void
-connection_removed_cb (NMConnection *connection,
-                       NetVpn *vpn)
-{
-        net_object_emit_removed (NET_OBJECT (vpn));
-}
-
-static char *
-net_vpn_connection_to_type (NMConnection *connection)
-{
-        const gchar *type, *p;
-
-        type = nm_setting_vpn_get_service_type (nm_connection_get_setting_vpn (connection));
-        /* Go from "org.freedesktop.NetworkManager.vpnc" to "vpnc" for example */
-        p = strrchr (type, '.');
-        return g_strdup (p ? p + 1 : type);
-}
-
-static void
-net_vpn_set_connection (NetVpn *vpn, NMConnection *connection)
-{
-        NetVpnPrivate *priv = vpn->priv;
-        /*
-         * vpnc config exmaple:
-         * key=IKE DH Group, value=dh2
-         * key=xauth-password-type, value=ask
-         * key=ipsec-secret-type, value=save
-         * key=IPSec gateway, value=66.187.233.252
-         * key=NAT Traversal Mode, value=natt
-         * key=IPSec ID, value=rh-vpn
-         * key=Xauth username, value=rhughes
-         */
-        priv->connection = g_object_ref (connection);
-        g_signal_connect (priv->connection,
-                          NM_REMOTE_CONNECTION_REMOVED,
-                          G_CALLBACK (connection_removed_cb),
-                          vpn);
-        g_signal_connect (priv->connection,
-                          NM_REMOTE_CONNECTION_UPDATED,
-                          G_CALLBACK (connection_changed_cb),
-                          vpn);
-        if (NM_IS_VPN_CONNECTION (priv->connection)) {
-                g_signal_connect (priv->connection,
-                                  NM_VPN_CONNECTION_VPN_STATE,
-                                  G_CALLBACK (connection_vpn_state_changed_cb),
-                                  vpn);
-        }
-
-        priv->service_type = net_vpn_connection_to_type (priv->connection);
-}
-
-static NMVPNConnectionState
-net_vpn_get_state (NetVpn *vpn)
-{
-        NetVpnPrivate *priv = vpn->priv;
-        if (!NM_IS_VPN_CONNECTION (priv->connection))
-                return NM_VPN_CONNECTION_STATE_DISCONNECTED;
-        return nm_vpn_connection_get_vpn_state (NM_VPN_CONNECTION (priv->connection));
-}
-
-/* VPN parameters can be found at:
- * http://git.gnome.org/browse/network-manager-openvpn/tree/src/nm-openvpn-service.h
- * http://git.gnome.org/browse/network-manager-vpnc/tree/src/nm-vpnc-service.h
- * http://git.gnome.org/browse/network-manager-pptp/tree/src/nm-pptp-service.h
- * http://git.gnome.org/browse/network-manager-openconnect/tree/src/nm-openconnect-service.h
- * http://git.gnome.org/browse/network-manager-openswan/tree/src/nm-openswan-service.h
- * See also 'properties' directory in these plugins.
- */
-static const gchar *
-get_vpn_key_gateway (const char *vpn_type)
-{
-        if (g_strcmp0 (vpn_type, "openvpn") == 0)     return "remote";
-        if (g_strcmp0 (vpn_type, "vpnc") == 0)        return "IPSec gateway";
-        if (g_strcmp0 (vpn_type, "pptp") == 0)        return "gateway";
-        if (g_strcmp0 (vpn_type, "openconnect") == 0) return "gateway";
-        if (g_strcmp0 (vpn_type, "openswan") == 0)    return "right";
-        return "";
-}
-
-static const gchar *
-get_vpn_key_group (const char *vpn_type)
-{
-        if (g_strcmp0 (vpn_type, "openvpn") == 0)     return "";
-        if (g_strcmp0 (vpn_type, "vpnc") == 0)        return "IPSec ID";
-        if (g_strcmp0 (vpn_type, "pptp") == 0)        return "";
-        if (g_strcmp0 (vpn_type, "openconnect") == 0) return "";
-        if (g_strcmp0 (vpn_type, "openswan") == 0)    return "";
-        return "";
-}
-
-static const gchar *
-get_vpn_key_username (const char *vpn_type)
-{
-        if (g_strcmp0 (vpn_type, "openvpn") == 0)     return "username";
-        if (g_strcmp0 (vpn_type, "vpnc") == 0)        return "Xauth username";
-        if (g_strcmp0 (vpn_type, "pptp") == 0)        return "user";
-        if (g_strcmp0 (vpn_type, "openconnect") == 0) return "username";
-        if (g_strcmp0 (vpn_type, "openswan") == 0)    return "leftxauthusername";
-        return "";
-}
-
-static const gchar *
-get_vpn_key_group_password (const char *vpn_type)
-{
-        if (g_strcmp0 (vpn_type, "openvpn") == 0)     return "";
-        if (g_strcmp0 (vpn_type, "vpnc") == 0)        return "Xauth password";
-        if (g_strcmp0 (vpn_type, "pptp") == 0)        return "";
-        if (g_strcmp0 (vpn_type, "openconnect") == 0) return "";
-        if (g_strcmp0 (vpn_type, "openswan") == 0)    return "";
-        return "";
-}
-
-static const gchar *
-net_vpn_get_gateway (NetVpn *vpn)
-{
-        NetVpnPrivate *priv = vpn->priv;
-        const gchar *key;
-
-        key = get_vpn_key_gateway (priv->service_type);
-        return nm_setting_vpn_get_data_item (nm_connection_get_setting_vpn (priv->connection), key);
-}
-
-static const gchar *
-net_vpn_get_id (NetVpn *vpn)
-{
-        NetVpnPrivate *priv = vpn->priv;
-        const gchar *key;
-
-        key = get_vpn_key_group (priv->service_type);
-        return nm_setting_vpn_get_data_item (nm_connection_get_setting_vpn (priv->connection), key);
-}
-
-static const gchar *
-net_vpn_get_username (NetVpn *vpn)
-{
-        NetVpnPrivate *priv = vpn->priv;
-        const gchar *key;
-
-        key = get_vpn_key_username (priv->service_type);
-        return nm_setting_vpn_get_data_item (nm_connection_get_setting_vpn (priv->connection), key);
-}
-
-static const gchar *
-net_vpn_get_password (NetVpn *vpn)
-{
-        NetVpnPrivate *priv = vpn->priv;
-        const gchar *key;
-
-        key = get_vpn_key_group_password (priv->service_type);
-        return nm_setting_vpn_get_data_item (nm_connection_get_setting_vpn (priv->connection), key);
-}
-
-static void
-vpn_proxy_delete (NetObject *object)
-{
-        NetVpn *vpn = NET_VPN (object);
-        nm_remote_connection_delete (NM_REMOTE_CONNECTION (vpn->priv->connection),
-                                     NULL, vpn);
-}
-
-static GtkWidget *
-vpn_proxy_add_to_notebook (NetObject *object,
-                           GtkNotebook *notebook,
-                           GtkSizeGroup *heading_size_group)
-{
-        GtkWidget *widget;
-        GtkWindow *window;
-        NetVpn *vpn = NET_VPN (object);
-
-        /* add widgets to size group */
-        widget = GTK_WIDGET (gtk_builder_get_object (vpn->priv->builder,
-                                                     "heading_group_password"));
-        gtk_size_group_add_widget (heading_size_group, widget);
-
-        /* reparent */
-        window = GTK_WINDOW (gtk_builder_get_object (vpn->priv->builder,
-                                                     "window_tmp"));
-        widget = GTK_WIDGET (gtk_builder_get_object (vpn->priv->builder,
-                                                     "vbox9"));
-        g_object_ref (widget);
-        gtk_container_remove (GTK_CONTAINER (window), widget);
-        gtk_notebook_append_page (notebook, widget, NULL);
-        g_object_unref (widget);
-        return widget;
-}
-
-static void
-nm_device_refresh_vpn_ui (NetVpn *vpn)
-{
-        GtkWidget *widget;
-        GtkWidget *sw;
-        const gchar *status;
-        NetVpnPrivate *priv = vpn->priv;
-        const GPtrArray *acs;
-        NMActiveConnection *a;
-        gint i;
-        const gchar *path;
-        const gchar *apath;
-        NMVPNConnectionState state;
-        gchar *title;
-        NMClient *client;
-
-        sw = GTK_WIDGET (gtk_builder_get_object (priv->builder,
-                                                 "device_off_switch"));
-        gtk_widget_set_visible (sw, TRUE);
-
-        /* update title */
-        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder,
-                                                     "label_device"));
-        title = g_strdup_printf (_("%s VPN"), nm_connection_get_id (vpn->priv->connection));
-        net_object_set_title (NET_OBJECT (vpn), title);
-        gtk_label_set_label (GTK_LABEL (widget), title);
-        g_free (title);
-
-        /* use status */
-        state = net_vpn_get_state (vpn);
-        client = net_object_get_client (NET_OBJECT (vpn));
-        acs = nm_client_get_active_connections (client);
-        if (acs != NULL) {
-                path = nm_connection_get_path (vpn->priv->connection);
-                for (i = 0; i < acs->len; i++) {
-                        a = (NMActiveConnection*)acs->pdata[i];
-
-                        apath = nm_active_connection_get_connection (a);
-                        if (NM_IS_VPN_CONNECTION (a) && strcmp (apath, path) == 0) {
-                                state = nm_vpn_connection_get_vpn_state (NM_VPN_CONNECTION (a));
-                                break;
-                        }
-                }
-        }
-
-        widget = GTK_WIDGET (gtk_builder_get_object (priv->builder,
-                                                     "label_status"));
-        status = panel_vpn_state_to_localized_string (state);
-        gtk_label_set_label (GTK_LABEL (widget), status);
-        priv->updating_device = TRUE;
-        gtk_switch_set_active (GTK_SWITCH (sw),
-                               state != NM_VPN_CONNECTION_STATE_FAILED &&
-                               state != NM_VPN_CONNECTION_STATE_DISCONNECTED);
-        priv->updating_device = FALSE;
-
-        /* service type */
-        panel_set_device_widget_details (vpn->priv->builder,
-                                         "service_type",
-                                         vpn->priv->service_type);
-
-        /* gateway */
-        panel_set_device_widget_details (vpn->priv->builder,
-                                         "gateway",
-                                         net_vpn_get_gateway (vpn));
-
-        /* groupname */
-        panel_set_device_widget_details (vpn->priv->builder,
-                                         "group_name",
-                                         net_vpn_get_id (vpn));
-
-        /* username */
-        panel_set_device_widget_details (vpn->priv->builder,
-                                         "username",
-                                         net_vpn_get_username (vpn));
-
-        /* password */
-        panel_set_device_widget_details (vpn->priv->builder,
-                                         "group_password",
-                                         net_vpn_get_password (vpn));
-}
-
-static void
-vpn_proxy_refresh (NetObject *object)
-{
-        NetVpn *vpn = NET_VPN (object);
-        nm_device_refresh_vpn_ui (vpn);
-}
-
-static void
-device_off_toggled (GtkSwitch *sw,
-                    GParamSpec *pspec,
-                    NetVpn *vpn)
-{
-        const gchar *path;
-        const GPtrArray *acs;
-        gboolean active;
-        gint i;
-        NMActiveConnection *a;
-        NMClient *client;
-
-        if (vpn->priv->updating_device)
-                return;
-
-        active = gtk_switch_get_active (sw);
-        if (active) {
-                client = net_object_get_client (NET_OBJECT (vpn));
-                nm_client_activate_connection (client,
-                                               vpn->priv->connection, NULL, NULL,
-                                               NULL, NULL);
-        } else {
-                path = nm_connection_get_path (vpn->priv->connection);
-                client = net_object_get_client (NET_OBJECT (vpn));
-                acs = nm_client_get_active_connections (client);
-                for (i = 0; i < acs->len; i++) {
-                        a = (NMActiveConnection*)acs->pdata[i];
-                        if (strcmp (nm_active_connection_get_connection (a), path) == 0) {
-                                nm_client_deactivate_connection (client, a);
-                                break;
-                        }
-                }
-        }
-}
-
-static void
-edit_connection (GtkButton *button, NetVpn *vpn)
-{
-        net_object_edit (NET_OBJECT (vpn));
-}
-
-static void
-vpn_proxy_edit (NetObject *object)
-{
-        const gchar *uuid;
-        gchar *cmdline;
-        GError *error = NULL;
-        NetVpn *vpn = NET_VPN (object);
-
-        uuid = nm_connection_get_uuid (vpn->priv->connection);
-        cmdline = g_strdup_printf ("nm-connection-editor --edit %s", uuid);
-        g_debug ("Launching '%s'\n", cmdline);
-        if (!g_spawn_command_line_async (cmdline, &error)) {
-                g_warning ("Failed to launch nm-connection-editor: %s", error->message);
-                g_error_free (error);
-        }
-        g_free (cmdline);
-}
-
-/**
- * net_vpn_get_property:
- **/
-static void
-net_vpn_get_property (GObject *object,
-                      guint prop_id,
-                      GValue *value,
-                      GParamSpec *pspec)
-{
-        NetVpn *vpn = NET_VPN (object);
-        NetVpnPrivate *priv = vpn->priv;
-
-        switch (prop_id) {
-        case PROP_CONNECTION:
-                g_value_set_object (value, priv->connection);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (vpn, prop_id, pspec);
-                break;
-        }
-}
-
-/**
- * net_vpn_set_property:
- **/
-static void
-net_vpn_set_property (GObject *object,
-                      guint prop_id,
-                      const GValue *value,
-                      GParamSpec *pspec)
-{
-        NetVpn *vpn = NET_VPN (object);
-
-        switch (prop_id) {
-        case PROP_CONNECTION:
-                net_vpn_set_connection (vpn, g_value_get_object (value));
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (vpn, prop_id, pspec);
-                break;
-        }
-}
-
-static void
-net_vpn_constructed (GObject *object)
-{
-        NetVpn *vpn = NET_VPN (object);
-
-        G_OBJECT_CLASS (net_vpn_parent_class)->constructed (object);
-
-        nm_device_refresh_vpn_ui (vpn);
-}
-
-static void
-net_vpn_finalize (GObject *object)
-{
-        NetVpn *vpn = NET_VPN (object);
-        NetVpnPrivate *priv = vpn->priv;
-
-        g_object_unref (priv->connection);
-        g_free (priv->service_type);
-
-        G_OBJECT_CLASS (net_vpn_parent_class)->finalize (object);
-}
-
-static void
-net_vpn_class_init (NetVpnClass *klass)
-{
-        GParamSpec *pspec;
-        GObjectClass *object_class = G_OBJECT_CLASS (klass);
-        NetObjectClass *parent_class = NET_OBJECT_CLASS (klass);
-
-        object_class->get_property = net_vpn_get_property;
-        object_class->set_property = net_vpn_set_property;
-        object_class->constructed = net_vpn_constructed;
-        object_class->finalize = net_vpn_finalize;
-        parent_class->add_to_notebook = vpn_proxy_add_to_notebook;
-        parent_class->delete = vpn_proxy_delete;
-        parent_class->refresh = vpn_proxy_refresh;
-        parent_class->edit = vpn_proxy_edit;
-
-        pspec = g_param_spec_object ("connection", NULL, NULL,
-                                     NM_TYPE_CONNECTION,
-                                     G_PARAM_READWRITE | G_PARAM_CONSTRUCT);
-        g_object_class_install_property (object_class, PROP_CONNECTION, pspec);
-
-        g_type_class_add_private (klass, sizeof (NetVpnPrivate));
-}
-
-static void
-net_vpn_init (NetVpn *vpn)
-{
-        GError *error = NULL;
-        GtkWidget *widget;
-
-        vpn->priv = NET_VPN_GET_PRIVATE (vpn);
-
-        vpn->priv->builder = gtk_builder_new ();
-        gtk_builder_add_from_file (vpn->priv->builder,
-                                   GNOMECC_UI_DIR "/network-vpn.ui",
-                                   &error);
-        if (error != NULL) {
-                g_warning ("Could not load interface file: %s", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        widget = GTK_WIDGET (gtk_builder_get_object (vpn->priv->builder,
-                                                     "device_off_switch"));
-        g_signal_connect (widget, "notify::active",
-                          G_CALLBACK (device_off_toggled), vpn);
-
-        widget = GTK_WIDGET (gtk_builder_get_object (vpn->priv->builder,
-                                                     "button_options"));
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (edit_connection), vpn);
-}
diff --git a/panels/network/net-vpn.h b/panels/network/net-vpn.h
deleted file mode 100644
index 4ed0a3a..0000000
--- a/panels/network/net-vpn.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef __NET_VPN_H
-#define __NET_VPN_H
-
-#include <glib-object.h>
-
-#include "NetworkManagerVPN.h"
-#include "net-object.h"
-#include "nm-connection.h"
-#include "nm-vpn-connection.h"
-
-G_BEGIN_DECLS
-
-#define NET_TYPE_VPN          (net_vpn_get_type ())
-#define NET_VPN(o)            (G_TYPE_CHECK_INSTANCE_CAST ((o), NET_TYPE_VPN, NetVpn))
-#define NET_VPN_CLASS(k)      (G_TYPE_CHECK_CLASS_CAST((k), NET_TYPE_VPN, NetVpnClass))
-#define NET_IS_VPN(o)         (G_TYPE_CHECK_INSTANCE_TYPE ((o), NET_TYPE_VPN))
-#define NET_IS_VPN_CLASS(k)   (G_TYPE_CHECK_CLASS_TYPE ((k), NET_TYPE_VPN))
-#define NET_VPN_GET_CLASS(o)  (G_TYPE_INSTANCE_GET_CLASS ((o), NET_TYPE_VPN, NetVpnClass))
-
-typedef struct _NetVpnPrivate         NetVpnPrivate;
-typedef struct _NetVpn                NetVpn;
-typedef struct _NetVpnClass           NetVpnClass;
-
-struct _NetVpn
-{
-         NetObject               parent;
-         NetVpnPrivate          *priv;
-};
-
-struct _NetVpnClass
-{
-        NetObjectClass               parent_class;
-};
-
-GType            net_vpn_get_type               (void);
-
-G_END_DECLS
-
-#endif /* __NET_VPN_H */
-
diff --git a/panels/network/network-dialogs.c b/panels/network/network-dialogs.c
deleted file mode 100644
index b5bc533..0000000
--- a/panels/network/network-dialogs.c
+++ /dev/null
@@ -1,550 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Giovanni Campagna <scampa.giovanni@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Portions of this code were taken from network-manager-applet.
- * Copyright 2008 - 2011 Red Hat, Inc. 
- */
-
-#include <shell/cc-shell.h>
-#include <nm-utils.h>
-#include <nm-connection.h>
-#include <nm-setting-gsm.h>
-#include <nm-setting-cdma.h>
-#include <nm-setting-serial.h>
-#include <nm-device-modem.h>
-#include <nm-device-wifi.h>
-
-#include "network-dialogs.h"
-#include "nm-wireless-dialog.h"
-#include "nm-mobile-wizard.h"
-
-typedef struct {
-        NMClient *client;
-        NMRemoteSettings *settings;
-} WirelessDialogClosure;
-
-typedef struct {
-        NMClient *client;
-        NMRemoteSettings *settings;
-        NMDevice *device;
-} MobileDialogClosure;
-
-static void
-wireless_dialog_closure_closure_notify (gpointer data,
-                                        GClosure *gclosure)
-{
-        WirelessDialogClosure *closure = data;
-        g_object_unref (closure->client);
-        g_object_unref (closure->settings);
-
-        g_slice_free (WirelessDialogClosure, data);
-}
-
-static void
-mobile_dialog_closure_free (gpointer data)
-{
-        MobileDialogClosure *closure = data;
-        g_object_unref (closure->client);
-        g_object_unref (closure->settings);
-        g_object_unref (closure->device);
-
-        g_slice_free (MobileDialogClosure, data);
-}
-
-static gboolean
-wifi_can_create_wifi_network (NMClient *client)
-{
-	NMClientPermissionResult perm;
-
-	/* FIXME: check WIFI_SHARE_PROTECTED too, and make the wireless dialog
-	 * handle the permissions as well so that admins can restrict open network
-	 * creation separately from protected network creation.
-	 */
-	perm = nm_client_get_permission_result (client, NM_CLIENT_PERMISSION_WIFI_SHARE_OPEN);
-	if (perm == NM_CLIENT_PERMISSION_RESULT_YES || perm == NM_CLIENT_PERMISSION_RESULT_AUTH)
-	  return TRUE;
-
-	return FALSE;
-}
-
-static void
-activate_existing_cb (NMClient *client,
-                      NMActiveConnection *active,
-                      GError *error,
-                      gpointer user_data)
-{
-	if (error)
-		g_warning ("Failed to activate connection: (%d) %s", error->code, error->message);
-}
-
-static void
-activate_new_cb (NMClient *client,
-                 NMActiveConnection *active,
-                 const char *connection_path,
-                 GError *error,
-                 gpointer user_data)
-{
-	if (error)
-		g_warning ("Failed to add new connection: (%d) %s", error->code, error->message);
-}
-
-static void
-nag_dialog_response_cb (GtkDialog *nag_dialog,
-                        gint response,
-                        gpointer user_data)
-{
-	NMAWirelessDialog *wireless_dialog = NMA_WIRELESS_DIALOG (user_data);
-
-	if (response == GTK_RESPONSE_NO) {  /* user opted not to correct the warning */
-		nma_wireless_dialog_set_nag_ignored (wireless_dialog, TRUE);
-		gtk_dialog_response (GTK_DIALOG (wireless_dialog), GTK_RESPONSE_OK);
-	}
-}
-
-static void
-wireless_dialog_response_cb (GtkDialog *foo,
-                             gint response,
-                             gpointer user_data)
-{
-	NMAWirelessDialog *dialog = NMA_WIRELESS_DIALOG (foo);
-	WirelessDialogClosure *closure = user_data;
-	NMConnection *connection, *fuzzy_match = NULL;
-	NMDevice *device;
-	NMAccessPoint *ap;
-	GSList *all, *iter;
-
-	if (response != GTK_RESPONSE_OK)
-		goto done;
-
-	if (!nma_wireless_dialog_get_nag_ignored (dialog)) {
-		GtkWidget *nag_dialog;
-
-		/* Nag the user about certificates or whatever.  Only destroy the dialog
-		 * if no nagging was done.
-		 */
-		nag_dialog = nma_wireless_dialog_nag_user (dialog);
-		if (nag_dialog) {
-			gtk_window_set_transient_for (GTK_WINDOW (nag_dialog), GTK_WINDOW (dialog));
-			g_signal_connect (nag_dialog, "response",
-			                  G_CALLBACK (nag_dialog_response_cb),
-			                  dialog);
-			return;
-		}
-	}
-
-	/* nma_wireless_dialog_get_connection() returns a connection with the
-	 * refcount incremented, so the caller must remember to unref it.
-	 */
-	connection = nma_wireless_dialog_get_connection (dialog, &device, &ap);
-	g_assert (connection);
-	g_assert (device);
-
-	/* Find a similar connection and use that instead */
-	all = nm_remote_settings_list_connections (closure->settings);
-	for (iter = all; iter; iter = g_slist_next (iter)) {
-		if (nm_connection_compare (connection,
-		                           NM_CONNECTION (iter->data),
-		                           (NM_SETTING_COMPARE_FLAG_FUZZY | NM_SETTING_COMPARE_FLAG_IGNORE_ID))) {
-			fuzzy_match = NM_CONNECTION (iter->data);
-			break;
-		}
-	}
-	g_slist_free (all);
-
-	if (fuzzy_match) {
-		nm_client_activate_connection (closure->client,
-		                               fuzzy_match,
-		                               device,
-		                               ap ? nm_object_get_path (NM_OBJECT (ap)) : NULL,
-		                               activate_existing_cb,
-		                               NULL);
-	} else {
-		NMSetting *s_con;
-		NMSettingWireless *s_wifi;
-		const char *mode = NULL;
-
-		/* Entirely new connection */
-
-		/* Don't autoconnect adhoc networks by default for now */
-		s_wifi = (NMSettingWireless *) nm_connection_get_setting (connection, NM_TYPE_SETTING_WIRELESS);
-		if (s_wifi)
-			mode = nm_setting_wireless_get_mode (s_wifi);
-		if (g_strcmp0 (mode, "adhoc") == 0) {
-			s_con = nm_connection_get_setting (connection, NM_TYPE_SETTING_CONNECTION);
-			if (!s_con) {
-				s_con = nm_setting_connection_new ();
-				nm_connection_add_setting (connection, s_con);
-			}
-			g_object_set (G_OBJECT (s_con), NM_SETTING_CONNECTION_AUTOCONNECT, FALSE, NULL);
-		}
-
-		nm_client_add_and_activate_connection (closure->client,
-		                                       connection,
-		                                       device,
-		                                       ap ? nm_object_get_path (NM_OBJECT (ap)) : NULL,
-		                                       activate_new_cb,
-		                                       NULL);
-	}
-
-	/* Balance nma_wireless_dialog_get_connection() */
-	g_object_unref (connection);
-
-done:
-	gtk_widget_hide (GTK_WIDGET (dialog));
-	gtk_widget_destroy (GTK_WIDGET (dialog));
-}
-
-static void
-show_wireless_dialog (CcNetworkPanel   *panel,
-		      NMClient         *client,
-		      NMRemoteSettings *settings,
-		      GtkWidget        *dialog)
-{
-        GtkWidget *toplevel = cc_shell_get_toplevel (cc_panel_get_shell (CC_PANEL (panel)));
-        WirelessDialogClosure *closure;
-
-        g_debug ("About to parent and show a network dialog");
-
-        g_assert (gtk_widget_is_toplevel (toplevel));
-        g_object_set (G_OBJECT (dialog),
-                      "modal", TRUE,
-                      "transient-for", toplevel,
-                      NULL);
-
-        closure = g_slice_new (WirelessDialogClosure);
-        closure->client = g_object_ref (client);
-        closure->settings = g_object_ref (settings);
-        g_signal_connect_data (dialog, "response",
-                               G_CALLBACK (wireless_dialog_response_cb),
-                               closure, wireless_dialog_closure_closure_notify, 0);
-
-        g_object_bind_property (G_OBJECT (toplevel), "visible",
-                                G_OBJECT (dialog), "visible",
-                                G_BINDING_SYNC_CREATE);
-}
-
-void
-cc_network_panel_create_wifi_network (CcNetworkPanel   *panel,
-				      NMClient         *client,
-				      NMRemoteSettings *settings)
-{
-  if (wifi_can_create_wifi_network (client)) {
-          show_wireless_dialog (panel, client, settings,
-                                nma_wireless_dialog_new_for_create (client, settings));
-  }
-}
-
-void
-cc_network_panel_connect_to_hidden_network (CcNetworkPanel   *panel,
-                                            NMClient         *client,
-                                            NMRemoteSettings *settings)
-{
-        g_debug ("connect to hidden wifi");
-        show_wireless_dialog (panel, client, settings,
-                              nma_wireless_dialog_new_for_other (client, settings));
-}
-
-void
-cc_network_panel_connect_to_8021x_network (CcNetworkPanel   *panel,
-                                           NMClient         *client,
-                                           NMRemoteSettings *settings,
-                                           NMDevice         *device,
-                                           const gchar      *arg_access_point)
-{
-	NMConnection *connection;
-	NMSettingConnection *s_con;
-	NMSettingWireless *s_wifi;
-	NMSettingWirelessSecurity *s_wsec;
-	NMSetting8021x *s_8021x;
-	NM80211ApSecurityFlags wpa_flags, rsn_flags;
-	GtkWidget *dialog;
-	char *uuid;
-        NMAccessPoint *ap;
-
-        g_debug ("connect to 8021x wifi");
-        ap = nm_device_wifi_get_access_point_by_path (NM_DEVICE_WIFI (device), arg_access_point);
-        if (ap == NULL) {
-                g_warning ("didn't find access point with path %s", arg_access_point);
-                return;
-        }
-
-        /* If the AP is WPA[2]-Enterprise then we need to set up a minimal 802.1x
-	 * setting and ask the user for more information.
-	 */
-	rsn_flags = nm_access_point_get_rsn_flags (ap);
-	wpa_flags = nm_access_point_get_wpa_flags (ap);
-	if (!(rsn_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)
-	    && !(wpa_flags & NM_802_11_AP_SEC_KEY_MGMT_802_1X)) {
-                g_warning ("Network panel loaded with connect-8021x-wifi but the "
-                           "access point does not support 802.1x");
-                return;
-        }
-
-        connection = nm_connection_new ();
-
-        /* Need a UUID for the "always ask" stuff in the Dialog of Doom */
-        s_con = (NMSettingConnection *) nm_setting_connection_new ();
-        uuid = nm_utils_uuid_generate ();
-        g_object_set (s_con, NM_SETTING_CONNECTION_UUID, uuid, NULL);
-        g_free (uuid);
-        nm_connection_add_setting (connection, NM_SETTING (s_con));
-
-        s_wifi = (NMSettingWireless *) nm_setting_wireless_new ();
-        nm_connection_add_setting (connection, NM_SETTING (s_wifi));
-        g_object_set (s_wifi,
-                      NM_SETTING_WIRELESS_SSID, nm_access_point_get_ssid (ap),
-                      NM_SETTING_WIRELESS_SEC, NM_SETTING_WIRELESS_SECURITY_SETTING_NAME,
-                      NULL);
-
-        s_wsec = (NMSettingWirelessSecurity *) nm_setting_wireless_security_new ();
-        g_object_set (s_wsec, NM_SETTING_WIRELESS_SECURITY_KEY_MGMT, "wpa-eap", NULL);
-        nm_connection_add_setting (connection, NM_SETTING (s_wsec));
-
-        s_8021x = (NMSetting8021x *) nm_setting_802_1x_new ();
-        nm_setting_802_1x_add_eap_method (s_8021x, "ttls");
-        g_object_set (s_8021x, NM_SETTING_802_1X_PHASE2_AUTH, "mschapv2", NULL);
-        nm_connection_add_setting (connection, NM_SETTING (s_8021x));
-
-        dialog = nma_wireless_dialog_new (client, settings, connection, device, ap, FALSE);
-        show_wireless_dialog (panel, client, settings, dialog);
-}
-
-static void
-connect_3g (NMConnection *connection,
-            gboolean canceled,
-            gpointer user_data)
-{
-        MobileDialogClosure *closure = user_data;
-
-	if (canceled == FALSE) {
-		g_return_if_fail (connection != NULL);
-
-		/* Ask NM to add the new connection and activate it; NM will fill in the
-		 * missing details based on the specific object and the device.
-		 */
-		nm_client_add_and_activate_connection (closure->client,
-		                                       connection,
-                                                       closure->device,
-		                                       "/",
-		                                       activate_new_cb,
-		                                       NULL);
-	}
-
-        mobile_dialog_closure_free (closure);
-}
-
-static void
-cdma_mobile_wizard_done (NMAMobileWizard *wizard,
-                         gboolean canceled,
-                         NMAMobileWizardAccessMethod *method,
-                         gpointer user_data)
-{
-	NMConnection *connection = NULL;
-
-	if (!canceled && method) {
-		NMSetting *setting;
-		char *uuid, *id;
-
-		if (method->devtype != NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO) {
-			g_warning ("Unexpected device type (not CDMA).");
-			canceled = TRUE;
-			goto done;
-		}
-
-		connection = nm_connection_new ();
-
-		setting = nm_setting_cdma_new ();
-		g_object_set (setting,
-		              NM_SETTING_CDMA_NUMBER, "#777",
-		              NM_SETTING_CDMA_USERNAME, method->username,
-		              NM_SETTING_CDMA_PASSWORD, method->password,
-		              NULL);
-		nm_connection_add_setting (connection, setting);
-
-		/* Serial setting */
-		setting = nm_setting_serial_new ();
-		g_object_set (setting,
-		              NM_SETTING_SERIAL_BAUD, 115200,
-		              NM_SETTING_SERIAL_BITS, 8,
-		              NM_SETTING_SERIAL_PARITY, 'n',
-		              NM_SETTING_SERIAL_STOPBITS, 1,
-		              NULL);
-		nm_connection_add_setting (connection, setting);
-
-		nm_connection_add_setting (connection, nm_setting_ppp_new ());
-
-		setting = nm_setting_connection_new ();
-		if (method->plan_name)
-			id = g_strdup_printf ("%s %s", method->provider_name, method->plan_name);
-		else
-			id = g_strdup_printf ("%s connection", method->provider_name);
-		uuid = nm_utils_uuid_generate ();
-		g_object_set (setting,
-		              NM_SETTING_CONNECTION_ID, id,
-		              NM_SETTING_CONNECTION_TYPE, NM_SETTING_CDMA_SETTING_NAME,
-		              NM_SETTING_CONNECTION_AUTOCONNECT, FALSE,
-		              NM_SETTING_CONNECTION_UUID, uuid,
-		              NULL);
-		g_free (uuid);
-		g_free (id);
-		nm_connection_add_setting (connection, setting);
-	}
-
- done:
-        connect_3g (connection, canceled, user_data);
-        nma_mobile_wizard_destroy (wizard);
-}
-
-static void
-gsm_mobile_wizard_done (NMAMobileWizard *wizard,
-                        gboolean canceled,
-                        NMAMobileWizardAccessMethod *method,
-                        gpointer user_data)
-{
-	NMConnection *connection = NULL;
-
-	if (!canceled && method) {
-		NMSetting *setting;
-		char *uuid, *id;
-
-		if (method->devtype != NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS) {
-			g_warning ("Unexpected device type (not GSM).");
-			canceled = TRUE;
-			goto done;
-		}
-
-		connection = nm_connection_new ();
-
-		setting = nm_setting_gsm_new ();
-		g_object_set (setting,
-		              NM_SETTING_GSM_NUMBER, "*99#",
-		              NM_SETTING_GSM_USERNAME, method->username,
-		              NM_SETTING_GSM_PASSWORD, method->password,
-		              NM_SETTING_GSM_APN, method->gsm_apn,
-		              NULL);
-		nm_connection_add_setting (connection, setting);
-
-		/* Serial setting */
-		setting = nm_setting_serial_new ();
-		g_object_set (setting,
-		              NM_SETTING_SERIAL_BAUD, 115200,
-		              NM_SETTING_SERIAL_BITS, 8,
-		              NM_SETTING_SERIAL_PARITY, 'n',
-		              NM_SETTING_SERIAL_STOPBITS, 1,
-		              NULL);
-		nm_connection_add_setting (connection, setting);
-
-		nm_connection_add_setting (connection, nm_setting_ppp_new ());
-
-		setting = nm_setting_connection_new ();
-		if (method->plan_name)
-			id = g_strdup_printf ("%s %s", method->provider_name, method->plan_name);
-		else
-			id = g_strdup_printf ("%s connection", method->provider_name);
-		uuid = nm_utils_uuid_generate ();
-		g_object_set (setting,
-		              NM_SETTING_CONNECTION_ID, id,
-		              NM_SETTING_CONNECTION_TYPE, NM_SETTING_GSM_SETTING_NAME,
-		              NM_SETTING_CONNECTION_AUTOCONNECT, FALSE,
-		              NM_SETTING_CONNECTION_UUID, uuid,
-		              NULL);
-		g_free (uuid);
-		g_free (id);
-		nm_connection_add_setting (connection, setting);
-	}
-
-done:
-	connect_3g (connection, canceled, user_data);
-        nma_mobile_wizard_destroy (wizard);
-}
-
-static void
-toplevel_shown (GtkWindow       *toplevel,
-                GParamSpec      *pspec,
-                NMAMobileWizard *wizard)
-{
-        gboolean visible = FALSE;
-
-        g_object_get (G_OBJECT (toplevel), "visible", &visible, NULL);
-        if (visible)
-                nma_mobile_wizard_present (wizard);
-}
-
-static gboolean
-show_wizard_idle_cb (NMAMobileWizard *wizard)
-{
-        nma_mobile_wizard_present (wizard);
-        return FALSE;
-}
-
-void
-cc_network_panel_connect_to_3g_network (CcNetworkPanel   *panel,
-                                        NMClient         *client,
-                                        NMRemoteSettings *settings,
-                                        NMDevice         *device)
-{
-        GtkWidget *toplevel = cc_shell_get_toplevel (cc_panel_get_shell (CC_PANEL (panel)));
-        MobileDialogClosure *closure;
-        NMAMobileWizard *wizard;
-	NMDeviceModemCapabilities caps;
-        gboolean visible = FALSE;
-
-        g_debug ("connect to 3g");
-        if (!NM_IS_DEVICE_MODEM (device)) {
-                g_warning ("Network panel loaded with connect-3g but the selected device"
-                           " is not a modem");
-                return;
-        }
-
-        closure = g_slice_new (MobileDialogClosure);
-        closure->client = g_object_ref (client);
-        closure->settings = g_object_ref (settings);
-        closure->device = g_object_ref (device);
-
-	caps = nm_device_modem_get_current_capabilities (NM_DEVICE_MODEM (device));
-	if (caps & NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS) {
-                wizard = nma_mobile_wizard_new (GTK_WINDOW (toplevel), NULL, NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS, FALSE,
-                                                gsm_mobile_wizard_done, closure);
-		if (wizard == NULL) {
-			g_warning ("failed to construct GSM wizard");
-			return;
-		}
-	} else if (caps & NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO) {
-		wizard = nma_mobile_wizard_new (GTK_WINDOW (toplevel), NULL, NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO, FALSE,
-                                                cdma_mobile_wizard_done, closure);
-		if (wizard == NULL) {
-			g_warning ("failed to construct CDMA wizard");
-			return;
-		}
-        } else {
-                g_warning ("Network panel loaded with connect-3g but the selected device"
-                           " does not support GSM or CDMA");
-                mobile_dialog_closure_free (closure);
-                return;
-        }
-
-        g_object_get (G_OBJECT (toplevel), "visible", &visible, NULL);
-        if (visible) {
-                g_debug ("Scheduling showing the Mobile wizard");
-                g_idle_add ((GSourceFunc) show_wizard_idle_cb, wizard);
-        } else {
-                g_debug ("Will show wizard a bit later, toplevel is not visible");
-                g_signal_connect (G_OBJECT (toplevel), "notify::visible",
-                                  G_CALLBACK (toplevel_shown), wizard);
-        }
-}
diff --git a/panels/network/network-dialogs.h b/panels/network/network-dialogs.h
deleted file mode 100644
index fdd19ef..0000000
--- a/panels/network/network-dialogs.h
+++ /dev/null
@@ -1,43 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Giovanni Campagna <scampa.giovanni@gmail.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include <nm-client.h>
-#include <nm-remote-settings.h>
-#include <nm-device.h>
-#include <nm-access-point.h>
-#include "cc-network-panel.h"
-
-void cc_network_panel_create_wifi_network (CcNetworkPanel   *panel,
-					   NMClient         *client,
-					   NMRemoteSettings *settings);
-
-void cc_network_panel_connect_to_hidden_network (CcNetworkPanel   *panel,
-						 NMClient         *client,
-						 NMRemoteSettings *settings);
-
-void cc_network_panel_connect_to_8021x_network (CcNetworkPanel   *panel,
-                                                NMClient         *client,
-                                                NMRemoteSettings *settings,
-                                                NMDevice         *device,
-                                                const gchar      *arg_access_point);
-
-void cc_network_panel_connect_to_3g_network (CcNetworkPanel   *panel,
-                                             NMClient         *client,
-                                             NMRemoteSettings *settings,
-                                             NMDevice         *device);
diff --git a/panels/network/network-mobile.ui b/panels/network/network-mobile.ui
deleted file mode 100644
index 3715289..0000000
--- a/panels/network/network-mobile.ui
+++ /dev/null
@@ -1,378 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-
-  <object class="GtkListStore" id="liststore_mobile_connections">
-    <columns>
-      <!-- column-name id -->
-      <column type="gchararray"/>
-      <!-- column-name title -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkWindow" id="window_tmp">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkVBox" id="vbox7">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="border_width">12</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkGrid" id="grid3">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="valign">start</property>
-            <property name="row_spacing">10</property>
-            <property name="column_spacing">6</property>
-            <child>
-              <object class="GtkImage" id="image_device">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-                <property name="xalign">1</property>
-                <property name="pixel_size">48</property>
-                <property name="icon_name">network-cellular-connected-symbolic</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkVBox" id="vbox11">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="valign">start</property>
-                <property name="hexpand">True</property>
-                <property name="spacing">3</property>
-                <child>
-                  <object class="GtkLabel" id="label_device">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">Mobile Broadband</property>
-                    <property name="ellipsize">end</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                      <attribute name="scale" value="1.2"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_status">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">Not connected</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_imei">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">IMEI</property>
-                <property name="mnemonic_widget">label_imei</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">1</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_provider">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Provider</property>
-                <property name="mnemonic_widget">label_provider</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">3</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_imei">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="label">1234567890</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">1</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_provider">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="label">SuperTel Supremo	</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">3</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_ipv4">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="label">127.0.0.1</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">4</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_ipv6">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">5</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_route">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">6</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_dns">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="yalign">0</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">7</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkAlignment" id="alignment_switch">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-                <child>
-                  <object class="GtkSwitch" id="device_off_switch">
-                    <property name="use_action_appearance">False</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="halign">end</property>
-                    <property name="valign">start</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="left_attach">2</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_ipv4">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">IP Address</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">4</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_ipv6">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">IPv6 Address</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">5</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_route">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Default Route</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">6</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_dns">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="yalign">0</property>
-                <property name="label" translatable="yes">DNS</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">7</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_network">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Network</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">2</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkComboBox" id="combobox_network">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="model">liststore_mobile_connections</property>
-                <property name="entry_text_column">1</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">2</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkAlignment" id="alignment3">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="yalign">1</property>
-            <property name="xscale">0</property>
-            <property name="yscale">0</property>
-            <property name="top_padding">12</property>
-            <child>
-              <object class="GtkButton" id="button_options">
-                <property name="label" translatable="yes">_Options...</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_underline">True</property>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-</interface>
diff --git a/panels/network/network-module.c b/panels/network/network-module.c
deleted file mode 100644
index fac5b94..0000000
--- a/panels/network/network-module.c
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- mode: C; c-file-style: "gnu"; indent-tabs-mode: nil; -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- *
- */
-
-#include <config.h>
-
-#include "cc-network-panel.h"
-
-#include <glib/gi18n-lib.h>
-
-void
-g_io_module_load (GIOModule *module)
-{
-        bindtextdomain (GETTEXT_PACKAGE, GNOMELOCALEDIR);
-        bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
-
-        /* register the panel */
-        cc_network_panel_register (module);
-}
-
-void
-g_io_module_unload (GIOModule *module)
-{
-}
diff --git a/panels/network/network-proxy.ui b/panels/network/network-proxy.ui
deleted file mode 100644
index 5652134..0000000
--- a/panels/network/network-proxy.ui
+++ /dev/null
@@ -1,442 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkAdjustment" id="adjustment_proxy_port_ftp">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment_proxy_port_http">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment_proxy_port_https">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment_proxy_port_socks">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkListStore" id="liststore_proxy_method">
-    <columns>
-      <!-- column-name text -->
-      <column type="gchararray"/>
-      <!-- column-name type -->
-      <column type="gint"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes" context="proxy method">None</col>
-        <col id="1">0</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes" context="proxy method">Manual</col>
-        <col id="1">1</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes" context="proxy method">Automatic</col>
-        <col id="1">2</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkWindow" id="window_tmp">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkGrid" id="grid5">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="valign">start</property>
-        <property name="border_width">12</property>
-        <property name="row_spacing">10</property>
-        <property name="column_spacing">6</property>
-        <child>
-          <object class="GtkImage" id="image_proxy_device">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="halign">end</property>
-            <property name="valign">start</property>
-            <property name="xalign">1</property>
-            <property name="pixel_size">48</property>
-            <property name="icon_name">preferences-system-network</property>
-            <property name="icon-size">6</property>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">0</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="vbox13">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="valign">start</property>
-            <property name="hexpand">True</property>
-            <property name="spacing">3</property>
-            <child>
-              <object class="GtkLabel" id="label_proxy_device">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="label">Proxy</property>
-                <property name="ellipsize">end</property>
-                <attributes>
-                  <attribute name="weight" value="bold"/>
-                  <attribute name="scale" value="1.2"/>
-                </attributes>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_proxy_status">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">0</property>
-                <property name="label">Not connected</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">0</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkAlignment" id="alignment_proxy_switch">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="halign">end</property>
-            <property name="valign">start</property>
-            <child>
-              <object class="GtkSwitch" id="device_proxy_off_switch">
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="left_attach">2</property>
-            <property name="top_attach">0</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="heading_proxy_method">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="label" translatable="yes">_Method</property>
-            <property name="use_underline">True</property>
-            <property name="mnemonic_widget">combobox_proxy_mode</property>
-            <style>
-              <class name="dim-label-ucc"/>
-            </style>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">1</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkComboBoxText" id="combobox_proxy_mode">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="entry_text_column">0</property>
-            <property name="id_column">1</property>
-            <property name="model">liststore_proxy_method</property>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">1</property>
-            <property name="width">2</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="heading_proxy_url">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="label" translatable="yes">_Configuration URL</property>
-            <property name="use_underline">True</property>
-            <property name="mnemonic_widget">entry_proxy_url</property>
-            <style>
-              <class name="dim-label-ucc"/>
-            </style>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">2</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkEntry" id="entry_proxy_url">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="invisible_char_set">True</property>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">2</property>
-            <property name="width">2</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="heading_proxy_http">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="label" translatable="yes">_HTTP Proxy</property>
-            <property name="use_underline">True</property>
-            <property name="mnemonic_widget">entry_proxy_http</property>
-            <style>
-              <class name="dim-label-ucc"/>
-            </style>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">3</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="heading_proxy_https">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="label" translatable="yes">H_TTPS Proxy</property>
-            <property name="use_underline">True</property>
-            <property name="mnemonic_widget">entry_proxy_https</property>
-            <style>
-              <class name="dim-label-ucc"/>
-            </style>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">4</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="heading_proxy_ftp">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="label" translatable="yes">_FTP Proxy</property>
-            <property name="use_underline">True</property>
-            <property name="mnemonic_widget">entry_proxy_ftp</property>
-            <style>
-              <class name="dim-label-ucc"/>
-            </style>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">5</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="heading_proxy_socks">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">1</property>
-            <property name="label" translatable="yes">_Socks Host</property>
-            <property name="use_underline">True</property>
-            <property name="mnemonic_widget">entry_proxy_socks</property>
-            <style>
-              <class name="dim-label-ucc"/>
-            </style>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">6</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkButton" id="system_proxy_button">
-            <property name="label" translatable="yes">Apply system wide</property>
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="receives_default">True</property>
-            <property name="use_action_appearance">False</property>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">7</property>
-            <property name="width">3</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="label_proxy_warning">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="xalign">0</property>
-            <property name="label">WPAD warning...</property>
-            <property name="wrap">True</property>
-            <property name="width_chars">50</property>
-          </object>
-          <packing>
-            <property name="left_attach">0</property>
-            <property name="top_attach">8</property>
-            <property name="width">3</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkEntry" id="entry_proxy_http">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="invisible_char_set">True</property>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">3</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkSpinButton" id="spinbutton_proxy_http">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="xalign">1</property>
-            <property name="invisible_char_set">True</property>
-            <property name="adjustment">adjustment_proxy_port_http</property>
-          </object>
-          <packing>
-            <property name="left_attach">2</property>
-            <property name="top_attach">3</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkEntry" id="entry_proxy_https">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="invisible_char_set">True</property>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">4</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkEntry" id="entry_proxy_ftp">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="invisible_char_set">True</property>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">5</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkEntry" id="entry_proxy_socks">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="invisible_char_set">True</property>
-          </object>
-          <packing>
-            <property name="left_attach">1</property>
-            <property name="top_attach">6</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkSpinButton" id="spinbutton_proxy_https">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="xalign">1</property>
-            <property name="invisible_char_set">True</property>
-            <property name="adjustment">adjustment_proxy_port_https</property>
-          </object>
-          <packing>
-            <property name="left_attach">2</property>
-            <property name="top_attach">4</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkSpinButton" id="spinbutton_proxy_ftp">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="xalign">1</property>
-            <property name="invisible_char_set">True</property>
-            <property name="adjustment">adjustment_proxy_port_ftp</property>
-          </object>
-          <packing>
-            <property name="left_attach">2</property>
-            <property name="top_attach">5</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkSpinButton" id="spinbutton_proxy_socks">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="invisible_char">●</property>
-            <property name="xalign">1</property>
-            <property name="invisible_char_set">True</property>
-            <property name="adjustment">adjustment_proxy_port_socks</property>
-          </object>
-          <packing>
-            <property name="left_attach">2</property>
-            <property name="top_attach">6</property>
-            <property name="width">1</property>
-            <property name="height">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup3">
-    <widgets>
-      <widget name="combobox_proxy_mode"/>
-      <widget name="entry_proxy_url"/>
-    </widgets>
-  </object>
-</interface>
diff --git a/panels/network/network-vpn.ui b/panels/network/network-vpn.ui
deleted file mode 100644
index 04881d1..0000000
--- a/panels/network/network-vpn.ui
+++ /dev/null
@@ -1,336 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkListStore" id="liststore1">
-    <columns>
-      <!-- column-name type -->
-      <column type="gchararray"/>
-      <!-- column-name name -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">VPN</col>
-        <col id="1">vpn</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkWindow" id="window_tmp">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkVBox" id="vbox9">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="border_width">12</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkGrid" id="grid4">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="valign">start</property>
-            <property name="row_spacing">10</property>
-            <property name="column_spacing">6</property>
-            <child>
-              <object class="GtkImage" id="image_device">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-                <property name="xalign">1</property>
-                <property name="pixel_size">48</property>
-                <property name="icon_name">network-vpn</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkVBox" id="vbox12">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="valign">start</property>
-                <property name="hexpand">True</property>
-                <property name="spacing">3</property>
-                <child>
-                  <object class="GtkLabel" id="label_device">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">VPN</property>
-                    <property name="ellipsize">end</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                      <attribute name="scale" value="1.2"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_status">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">Not connected</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_service_type">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">VPN Type</property>
-                <property name="mnemonic_widget">label_service_type</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">1</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_gateway">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Gateway</property>
-                <property name="mnemonic_widget">label_gateway</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">2</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_group_name">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Group Name</property>
-                <property name="mnemonic_widget">label_group_name</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">3</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_group_password">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Group Password</property>
-                <property name="mnemonic_widget">label_group_password</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">4</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_username">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Username</property>
-                <property name="mnemonic_widget">label_username</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">5</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_service_type">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">openvpn</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">1</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_gateway">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">AA:BB:CC:DD:55:66:77:88</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">2</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_group_name">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">SEKRIT</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">3</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_group_password">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">**********</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">4</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_username">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">smithy</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">5</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkAlignment" id="alignment_switch">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-                <child>
-                  <object class="GtkSwitch" id="device_off_switch">
-                    <property name="use_action_appearance">False</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="halign">end</property>
-                    <property name="valign">start</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="left_attach">2</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkBox" id="box3">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkButton" id="button_options">
-                <property name="label" translatable="yes">_Configure...</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="halign">end</property>
-                <property name="valign">end</property>
-                <property name="hexpand">True</property>
-                <property name="vexpand">True</property>
-                <property name="use_underline">True</property>
-                <property name="xalign">1</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="pack_type">end</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1">
-    <widgets>
-      <widget name="heading_service_type"/>
-      <widget name="heading_gateway"/>
-      <widget name="heading_group_name"/>
-      <widget name="heading_group_password"/>
-      <widget name="heading_username"/>
-    </widgets>
-  </object>
-</interface>
diff --git a/panels/network/network-wifi.ui b/panels/network/network-wifi.ui
deleted file mode 100644
index c3840d0..0000000
--- a/panels/network/network-wifi.ui
+++ /dev/null
@@ -1,1087 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkDialog" id="hotspot-dialog">
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="modal">True</property>
-    <property name="destroy_with_parent">True</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="hotspot-dialog-vbox1">
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">14</property>
-        <child>
-          <object class="GtkBox" id="hotspot-dialog-box1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="border_width">5</property>
-            <property name="spacing">12</property>
-            <child>
-              <object class="GtkImage" id="hotspot-dialog-image">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="icon_name">network-wireless</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="hotspot-dialog-title">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="label" translatable="yes">Wireless Hotspot</property>
-                <attributes>
-                  <attribute name="weight" value="bold"/>
-                  <attribute name="scale" value="1.2"/>
-                </attributes>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="hotspot-dialog-content">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="wrap">True</property>
-            <property name="width_chars">60</property>
-            <property name="max_width_chars">60</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="hotspot-dialog-action_area1">
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="hotspot-cancel-button">
-                <property name="label">gtk-cancel</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="hotspot-turn-on-button">
-                <property name="label" translatable="yes">_Turn On</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="has_default">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_underline">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="-6">hotspot-cancel-button</action-widget>
-      <action-widget response="-5">hotspot-turn-on-button</action-widget>
-    </action-widgets>
-  </object>
-  <object class="GtkListStore" id="liststore_network">
-    <columns>
-      <!-- column-name ap-id -->
-      <column type="gchararray"/>
-      <!-- column-name connection-id -->
-      <column type="gchararray"/>
-      <!-- column-name title -->
-      <column type="gchararray"/>
-      <!-- column-name sortable -->
-      <column type="gchararray"/>
-      <!-- column-name strength -->
-      <column type="guint"/>
-      <!-- column-name mode -->
-      <column type="guint"/>
-      <!-- column-name security -->
-      <column type="guint"/>
-      <!-- column-name active -->
-      <column type="gboolean"/>
-      <!-- column-name ap-in-range -->
-      <column type="gboolean"/>
-      <!-- column-name ap-out-of-range -->
-      <column type="gboolean"/>
-      <!-- column-name is-saved -->
-      <column type="gboolean"/>
-    </columns>
-  </object>
-  <object class="GtkWindow" id="window_tmp">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkNotebook" id="notebook_view">
-        <property name="visible">True</property>
-        <property name="can_focus">True</property>
-        <child>
-          <object class="GtkBox" id="box3">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="orientation">vertical</property>
-            <child>
-              <object class="GtkBox" id="box_list">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="margin_bottom">12</property>
-                <property name="orientation">vertical</property>
-                <child>
-                  <object class="GtkBox" id="box_list_heading">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin_left">12</property>
-                    <property name="margin_right">12</property>
-                    <property name="margin_top">12</property>
-                    <property name="margin_bottom">12</property>
-                    <child>
-                      <object class="GtkLabel" id="heading_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="halign">start</property>
-                        <property name="hexpand">True</property>
-                        <property name="label" translatable="yes">Wireless</property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                          <attribute name="scale" value="1.2"/>
-                        </attributes>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkSwitch" id="device_off_switch">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="halign">end</property>
-                        <property name="valign">start</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow_list">
-                    <property name="height_request">300</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="margin_left">12</property>
-                    <property name="margin_right">12</property>
-                    <property name="hexpand">True</property>
-                    <property name="vexpand">True</property>
-                    <property name="shadow_type">in</property>
-                    <property name="hscrollbar_policy">never</property>
-                    <child>
-                      <object class="GtkTreeView" id="treeview_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="hexpand">True</property>
-                        <property name="vexpand">True</property>
-                        <property name="model">liststore_network</property>
-                        <property name="headers_visible">False</property>
-                        <property name="headers_clickable">False</property>
-                        <property name="search_column">0</property>
-                        <child internal-child="selection">
-                          <object class="GtkTreeSelection" id="treeview-selection1">
-                            <property name="mode">none</property>
-                          </object>
-                        </child>
-                        <child>
-                          <object class="GtkTreeViewColumn" id="treeview_list_column">
-                            <property name="title">Column</property>
-                          </object>
-                        </child>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkBox" id="list_actions">
-                <property name="visible">True</property>
-                <property name="orientation">horizontal</property>
-                <property name="spacing">6</property>
-                <child>
-                  <object class="GtkButton" id="start_hotspot_button">
-                    <property name="label" translatable="yes">_Use as Hotspot...</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                    <property name="halign">start</property>
-                    <property name="margin_left">12</property>
-                    <property name="margin_bottom">12</property>
-                    <property name="use_underline">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkButton" id="connect_hidden_button">
-                    <property name="label" translatable="yes">Connect to a Hidden Network</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                    <property name="halign">start</property>
-                    <property name="margin_left">12</property>
-                    <property name="margin_bottom">12</property>
-                    <property name="use_underline">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">2</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-              </packing>
-            </child>
-          </object>
-        </child>
-        <child type="tab">
-          <object class="GtkLabel" id="label1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="label">list</property>
-          </object>
-          <packing>
-            <property name="tab_fill">False</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="vbox5">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="border_width">12</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkGrid" id="grid2">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="valign">start</property>
-                <property name="row_spacing">10</property>
-                <property name="column_spacing">6</property>
-                <child>
-                  <object class="GtkVBox" id="vbox3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="valign">start</property>
-                    <property name="hexpand">True</property>
-                    <property name="spacing">3</property>
-                    <child>
-                      <object class="GtkLabel" id="label_device">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Wireless</property>
-                        <property name="ellipsize">end</property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                          <attribute name="scale" value="1.2"/>
-                        </attributes>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label_status">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label">Not connected</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">0</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox" id="box5">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkButton" id="button_disconnect1">
-                        <property name="label" translatable="yes">_Disconnect</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="no_show_all">True</property>
-                        <property name="halign">end</property>
-                        <property name="valign">center</property>
-                        <property name="hexpand">True</property>
-                        <property name="use_underline">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="button_connect1">
-                        <property name="label" translatable="yes">_Connect</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="no_show_all">True</property>
-                        <property name="use_underline">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="left_attach">2</property>
-                    <property name="top_attach">0</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_last_used">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Last used</property>
-                    <property name="mnemonic_widget">label_last_used</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">3</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_last_used">
-                    <property name="visible">True</property>
-                    <property name="selectable">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">today</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">3</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_mac">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Hardware Address</property>
-                    <property name="mnemonic_widget">label_mac</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">1</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_mac">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">AA:BB:CC:DD:55:66:77:88</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">1</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_security">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Security</property>
-                    <property name="mnemonic_widget">label_security</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">2</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_security">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">WPA</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">2</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_strength">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Strength</property>
-                    <property name="mnemonic_widget">label_strength</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">4</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_strength">
-                    <property name="visible">True</property>
-                    <property name="selectable">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">Weak</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">4</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_speed">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Link speed</property>
-                    <property name="mnemonic_widget">label_speed</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">5</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_speed">
-                    <property name="visible">True</property>
-                    <property name="selectable">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">1Mb/sec</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">5</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_ipv4">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">IPv4 Address</property>
-                    <property name="mnemonic_widget">label_ipv4</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">6</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_ipv4">
-                    <property name="visible">True</property>
-                    <property name="selectable">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">127.0.0.1</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">6</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_ipv6">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">IPv6 Address</property>
-                    <property name="mnemonic_widget">label_ipv6</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">7</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_ipv6">
-                    <property name="visible">True</property>
-                    <property name="selectable">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">::1</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">7</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_route">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Default Route</property>
-                    <property name="mnemonic_widget">label_route</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">8</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_route">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="label">127.0.0.1</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">8</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_dns">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="yalign">0</property>
-                    <property name="label" translatable="yes">DNS</property>
-                    <property name="mnemonic_widget">label_dns</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">9</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_dns">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="xalign">0</property>
-                    <property name="yalign">0</property>
-                    <property name="label">127.0.0.1</property>
-                    <property name="wrap">True</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">9</property>
-                    <property name="width">2</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox" id="box1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkButton" id="button_back1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="halign">start</property>
-                        <property name="valign">center</property>
-                        <property name="hexpand">True</property>
-                        <child>
-                          <object class="GtkArrow" id="arrow1">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="arrow_type">left</property>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">0</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkBox" id="box2">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="margin_top">12</property>
-                <child>
-                  <object class="GtkButton" id="button_forget1">
-                    <property name="label" translatable="yes">_Forget Network</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                    <property name="halign">start</property>
-                    <property name="valign">end</property>
-                    <property name="use_underline">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkButton" id="button_options1">
-                    <property name="label" translatable="yes">_Settings...</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                    <property name="halign">end</property>
-                    <property name="valign">end</property>
-                    <property name="hexpand">True</property>
-                    <property name="vexpand">True</property>
-                    <property name="use_underline">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">2</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="position">1</property>
-          </packing>
-        </child>
-        <child type="tab">
-          <object class="GtkLabel" id="label2">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="label">details</property>
-          </object>
-          <packing>
-            <property name="position">1</property>
-            <property name="tab_fill">False</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkLabel" id="label5">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="label">label</property>
-          </object>
-          <packing>
-            <property name="position">2</property>
-          </packing>
-        </child>
-        <child type="tab">
-          <object class="GtkLabel" id="label3">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="label">hidden</property>
-          </object>
-          <packing>
-            <property name="position">2</property>
-            <property name="tab_fill">False</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="box_hotspot">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="border_width">12</property>
-            <property name="spacing">9</property>
-            <child>
-              <object class="GtkBox" id="box_hotspot_top">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <child>
-                  <object class="GtkBox" id="vbox345">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="halign">start</property>
-                    <property name="valign">center</property>
-                    <property name="hexpand">True</property>
-                    <property name="orientation">vertical</property>
-                    <property name="spacing">3</property>
-                    <child>
-                      <object class="GtkLabel" id="label_hotspot_title">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Wireless Hotspot</property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                          <attribute name="scale" value="1.2"/>
-                        </attributes>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label_hotspot_explanation">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Switch off to connect to a wireless network</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkSwitch" id="switch_hotspot_off">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="halign">end</property>
-                    <property name="valign">center</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkGrid" id="grid_hotspot">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">center</property>
-                <property name="valign">start</property>
-                <property name="row_spacing">10</property>
-                <property name="column_spacing">6</property>
-                <child>
-                  <object class="GtkLabel" id="heading_hotspot_network_name">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Network Name</property>
-                    <property name="mnemonic_widget">label_hotspot_network_name</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">0</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_hotspot_connected">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Connected Devices</property>
-                    <property name="mnemonic_widget">label_hotspot_connected</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">1</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_hotspot_security">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Security type</property>
-                    <property name="mnemonic_widget">label_hotspot_security</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">2</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_hotspot_network_name">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">networkname0</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">0</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_hotspot_connected">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">hughsie-dell-mini, hughsie-work</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">1</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_hotspot_security">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">WPA Enterprise</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">2</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="heading_hotspot_security_key">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">1</property>
-                    <property name="label" translatable="yes">Security key</property>
-                    <property name="mnemonic_widget">label_hotspot_security_key</property>
-                    <style>
-                      <class name="dim-label-ucc"/>
-                    </style>
-                  </object>
-                  <packing>
-                    <property name="left_attach">0</property>
-                    <property name="top_attach">3</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_hotspot_security_key">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">0xdeadbeef</property>
-                    <property name="selectable">True</property>
-                  </object>
-                  <packing>
-                    <property name="left_attach">1</property>
-                    <property name="top_attach">3</property>
-                    <property name="width">1</property>
-                    <property name="height">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="position">3</property>
-          </packing>
-        </child>
-        <child type="tab">
-          <object class="GtkLabel" id="label33">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="label">hotspot</property>
-          </object>
-          <packing>
-            <property name="position">3</property>
-            <property name="tab_fill">False</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-</interface>
diff --git a/panels/network/network-wired.ui b/panels/network/network-wired.ui
deleted file mode 100644
index c74f648..0000000
--- a/panels/network/network-wired.ui
+++ /dev/null
@@ -1,332 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkWindow" id="window_tmp">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkVBox" id="vbox6">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="border_width">12</property>
-        <property name="spacing">6</property>
-        <child>
-          <object class="GtkGrid" id="grid1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="valign">start</property>
-            <property name="row_spacing">10</property>
-            <property name="column_spacing">6</property>
-            <child>
-              <object class="GtkImage" id="image_device">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-                <property name="xalign">1</property>
-                <property name="pixel_size">48</property>
-                <property name="icon_name">network-wired</property>
-                <property name="icon-size">6</property>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkVBox" id="vbox4">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="valign">start</property>
-                <property name="hexpand">True</property>
-                <property name="spacing">3</property>
-                <child>
-                  <object class="GtkLabel" id="label_device">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">Wired</property>
-                    <property name="ellipsize">end</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                      <attribute name="scale" value="1.2"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="label_status">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label">Cable unplugged</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_mac">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Hardware Address</property>
-                <property name="mnemonic_widget">label_mac</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">1</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_ipv4">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">IPv4 Address</property>
-                <property name="mnemonic_widget">label_ipv4</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">3</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_ipv6">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">IPv6 Address</property>
-                <property name="mnemonic_widget">label_ipv6</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">4</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_route">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="label" translatable="yes">Default Route</property>
-                <property name="mnemonic_widget">label_route</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">5</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="heading_dns">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="xalign">1</property>
-                <property name="yalign">0</property>
-                <property name="label" translatable="yes">DNS</property>
-                <property name="mnemonic_widget">label_dns</property>
-                <style>
-                  <class name="dim-label-ucc"/>
-                </style>
-              </object>
-              <packing>
-                <property name="left_attach">0</property>
-                <property name="top_attach">6</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_mac">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">AA:BB:CC:DD:55:66:77:88</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">1</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_ipv4">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">127.0.0.1</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">3</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_ipv6">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">::1</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">4</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_route">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="label">127.0.0.1</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">5</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkLabel" id="label_dns">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="xalign">0</property>
-                <property name="yalign">0</property>
-                <property name="label">127.0.0.1</property>
-                <property name="wrap">True</property>
-                <property name="selectable">True</property>
-              </object>
-              <packing>
-                <property name="left_attach">1</property>
-                <property name="top_attach">6</property>
-                <property name="width">2</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkAlignment" id="alignment_switch">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">end</property>
-                <property name="valign">start</property>
-                <child>
-                  <object class="GtkSwitch" id="device_off_switch">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="halign">end</property>
-                    <property name="valign">start</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="left_attach">2</property>
-                <property name="top_attach">0</property>
-                <property name="width">1</property>
-                <property name="height">1</property>
-              </packing>
-            </child>
-            <child>
-              <placeholder/>
-            </child>
-            <child>
-              <placeholder/>
-            </child>
-            <child>
-              <placeholder/>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkBox" id="box1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="margin_top">12</property>
-            <property name="orientation">vertical</property>
-            <child>
-              <object class="GtkButton" id="button_options">
-                <property name="label" translatable="yes">_Options...</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="halign">end</property>
-                <property name="valign">end</property>
-                <property name="hexpand">True</property>
-                <property name="vexpand">True</property>
-                <property name="use_underline">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1">
-    <widgets>
-      <widget name="heading_mac"/>
-      <widget name="heading_ipv4"/>
-      <widget name="heading_ipv6"/>
-      <widget name="heading_route"/>
-      <widget name="heading_dns"/>
-    </widgets>
-  </object>
-</interface>
diff --git a/panels/network/network.ui b/panels/network/network.ui
deleted file mode 100644
index ae2d3c3..0000000
--- a/panels/network/network.ui
+++ /dev/null
@@ -1,355 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkAdjustment" id="adjustment_proxy_port_ftp">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment_proxy_port_http">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment_proxy_port_https">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment_proxy_port_socks">
-    <property name="upper">65535</property>
-    <property name="step_increment">1</property>
-  </object>
-  <object class="GtkDialog" id="connection_type_dialog">
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="resizable">False</property>
-    <property name="modal">True</property>
-    <property name="title"></property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="vbox_1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="margin_left">12</property>
-        <property name="margin_right">12</property>
-        <property name="margin_top">12</property>
-        <property name="margin_bottom">12</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">10</property>
-        <child>
-          <object class="GtkHBox" id="hbox_1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkLabel" id="label">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="label" translatable="yes">Select the interface to use for the new service</property>
-                <attributes>
-                  <attribute name="weight" value="bold"/>
-                </attributes>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">False</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="hbuttonbox_1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="cancel_button">
-                <property name="label">gtk-cancel</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="create_button">
-                <property name="label" translatable="yes">C_reate...</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="receives_default">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkBox" id="box_1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="halign">center</property>
-            <property name="spacing">10</property>
-            <child>
-              <object class="GtkLabel" id="label_1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="label" translatable="yes">_Interface</property>
-                <property name="use_underline">True</property>
-                <property name="mnemonic_widget">connection_type_combo</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkComboBox" id="connection_type_combo">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="halign">start</property>
-                <property name="valign">start</property>
-                <property name="margin_top">12</property>
-                <property name="margin_bottom">12</property>
-                <property name="model">liststore1</property>
-                <property name="active">0</property>
-                <child>
-                  <object class="GtkCellRendererText" id="renderer_1"/>
-                  <attributes>
-                    <attribute name="text">0</attribute>
-                  </attributes>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="0">cancel_button</action-widget>
-      <action-widget response="-5">create_button</action-widget>
-    </action-widgets>
-  </object>
-  <object class="GtkListStore" id="liststore1">
-    <columns>
-      <!-- column-name type -->
-      <column type="gchararray"/>
-      <!-- column-name name -->
-      <column type="gchararray"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes">VPN</col>
-        <col id="1">vpn</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkListStore" id="liststore_devices">
-    <columns>
-      <!-- column-name icon -->
-      <column type="gchararray"/>
-      <!-- column-name title -->
-      <column type="gchararray"/>
-      <!-- column-name sort -->
-      <column type="gchararray"/>
-      <!-- column-name object -->
-      <column type="GObject"/>
-    </columns>
-  </object>
-  <object class="GtkListStore" id="liststore_proxy_method">
-    <columns>
-      <!-- column-name text -->
-      <column type="gchararray"/>
-      <!-- column-name type -->
-      <column type="gint"/>
-    </columns>
-    <data>
-      <row>
-        <col id="0" translatable="yes" context="proxy method">None</col>
-        <col id="1">0</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes" context="proxy method">Manual</col>
-        <col id="1">1</col>
-      </row>
-      <row>
-        <col id="0" translatable="yes" context="proxy method">Automatic</col>
-        <col id="1">2</col>
-      </row>
-    </data>
-  </object>
-  <object class="GtkListStore" id="liststore_mobile_connections">
-    <columns>
-      <!-- column-name id -->
-      <column type="gchararray"/>
-      <!-- column-name title -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkWindow" id="window1">
-    <property name="can_focus">False</property>
-    <child>
-      <object class="GtkVBox" id="vbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="spacing">12</property>
-        <child>
-          <object class="GtkVBox" id="vbox2">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="spacing">3</property>
-            <child>
-              <object class="GtkHBox" id="hbox2">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">6</property>
-                <child>
-                  <object class="GtkVBox" id="vbox10">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin_left">12</property>
-                    <property name="margin_top">12</property>
-                    <property name="margin_bottom">12</property>
-                    <child>
-                      <object class="GtkScrolledWindow" id="devices_scrolledwindow">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="hscrollbar_policy">never</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkTreeView" id="treeview_devices">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="model">liststore_devices</property>
-                            <property name="headers_visible">False</property>
-                            <property name="search_column">2</property>
-                            <property name="show_expanders">False</property>
-                            <child internal-child="selection">
-                              <object class="GtkTreeSelection" id="treeview-selection1"/>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkToolbar" id="devices_toolbar">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="toolbar_style">icons</property>
-                        <property name="show_arrow">False</property>
-                        <property name="icon_size">1</property>
-                        <style>
-                          <class name="inline-toolbar"/>
-                        </style>
-                        <child>
-                          <object class="GtkToolButton" id="add_toolbutton">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="label" translatable="yes">Add Device</property>
-                            <property name="use_underline">True</property>
-                            <property name="icon_name">list-add-symbolic</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="homogeneous">True</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkToolButton" id="remove_toolbutton">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="label" translatable="yes">Remove Device</property>
-                            <property name="use_underline">True</property>
-                            <property name="icon_name">list-remove-symbolic</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="homogeneous">True</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkNotebook" id="notebook_types">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="show_border">False</property>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1">
-  </object>
-</interface>
diff --git a/panels/network/panel-cell-renderer-mode.c b/panels/network/panel-cell-renderer-mode.c
deleted file mode 100644
index 7bc443d..0000000
--- a/panels/network/panel-cell-renderer-mode.c
+++ /dev/null
@@ -1,144 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "panel-cell-renderer-mode.h"
-
-enum {
-        PROP_0,
-        PROP_AP_MODE,
-        PROP_LAST
-};
-
-G_DEFINE_TYPE (PanelCellRendererMode, panel_cell_renderer_mode, GTK_TYPE_CELL_RENDERER_PIXBUF)
-
-static gpointer parent_class = NULL;
-
-/**
- * panel_cell_renderer_mode_get_property:
- **/
-static void
-panel_cell_renderer_mode_get_property (GObject *object, guint param_id,
-                                       GValue *value, GParamSpec *pspec)
-{
-        PanelCellRendererMode *renderer = PANEL_CELL_RENDERER_MODE (object);
-
-        switch (param_id) {
-        case PROP_AP_MODE:
-                g_value_set_uint (value, renderer->mode);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-/**
- * panel_cell_renderer_set_name:
- **/
-static void
-panel_cell_renderer_set_name (PanelCellRendererMode *renderer)
-{
-        const gchar *icon_name = NULL;
-
-        if (renderer->mode == NM_802_11_MODE_ADHOC)
-                icon_name = "network-workgroup-symbolic";
-
-        g_object_set (renderer, "icon-name", icon_name, NULL);
-}
-
-/**
- * panel_cell_renderer_mode_set_property:
- **/
-static void
-panel_cell_renderer_mode_set_property (GObject *object, guint param_id,
-                                       const GValue *value, GParamSpec *pspec)
-{
-        PanelCellRendererMode *renderer = PANEL_CELL_RENDERER_MODE (object);
-
-        switch (param_id) {
-        case PROP_AP_MODE:
-                renderer->mode = g_value_get_uint (value);
-                panel_cell_renderer_set_name (renderer);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-/**
- * panel_cell_renderer_finalize:
- **/
-static void
-panel_cell_renderer_finalize (GObject *object)
-{
-        PanelCellRendererMode *renderer;
-        renderer = PANEL_CELL_RENDERER_MODE (object);
-        g_free (renderer->icon_name);
-        G_OBJECT_CLASS (parent_class)->finalize (object);
-}
-
-/**
- * panel_cell_renderer_mode_class_init:
- **/
-static void
-panel_cell_renderer_mode_class_init (PanelCellRendererModeClass *class)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (class);
-        object_class->finalize = panel_cell_renderer_finalize;
-
-        parent_class = g_type_class_peek_parent (class);
-
-        object_class->get_property = panel_cell_renderer_mode_get_property;
-        object_class->set_property = panel_cell_renderer_mode_set_property;
-
-        g_object_class_install_property (object_class, PROP_AP_MODE,
-                                         g_param_spec_uint ("ap-mode", NULL,
-                                                            NULL,
-                                                            0, G_MAXUINT, 0,
-                                                            G_PARAM_READWRITE));
-}
-
-/**
- * panel_cell_renderer_mode_init:
- **/
-static void
-panel_cell_renderer_mode_init (PanelCellRendererMode *renderer)
-{
-        renderer->mode = 0;
-        renderer->icon_name = NULL;
-}
-
-/**
- * panel_cell_renderer_mode_new:
- **/
-GtkCellRenderer *
-panel_cell_renderer_mode_new (void)
-{
-        return g_object_new (PANEL_TYPE_CELL_RENDERER_MODE, NULL);
-}
-
diff --git a/panels/network/panel-cell-renderer-mode.h b/panels/network/panel-cell-renderer-mode.h
deleted file mode 100644
index 3c18f6e..0000000
--- a/panels/network/panel-cell-renderer-mode.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef PANEL_CELL_RENDERER_MODE_H
-#define PANEL_CELL_RENDERER_MODE_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-#include "nm-device.h"
-#include "nm-access-point.h"
-
-#define PANEL_TYPE_CELL_RENDERER_MODE           (panel_cell_renderer_mode_get_type())
-#define PANEL_CELL_RENDERER_MODE(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj), PANEL_TYPE_CELL_RENDERER_MODE, PanelCellRendererMode))
-#define PANEL_CELL_RENDERER_MODE_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST((cls), PANEL_TYPE_CELL_RENDERER_MODE, PanelCellRendererModeClass))
-#define PANEL_IS_CELL_RENDERER_MODE(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANEL_TYPE_CELL_RENDERER_MODE))
-#define PANEL_IS_CELL_RENDERER_MODE_CLASS(cls)  (G_TYPE_CHECK_CLASS_TYPE((cls), PANEL_TYPE_CELL_RENDERER_MODE))
-#define PANEL_CELL_RENDERER_MODE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANEL_TYPE_CELL_RENDERER_MODE, PanelCellRendererModeClass))
-
-G_BEGIN_DECLS
-
-typedef struct _PanelCellRendererMode           PanelCellRendererMode;
-typedef struct _PanelCellRendererModeClass      PanelCellRendererModeClass;
-
-struct _PanelCellRendererMode
-{
-        GtkCellRendererPixbuf    parent;
-        guint                    mode;
-        gchar                   *icon_name;
-};
-
-struct _PanelCellRendererModeClass
-{
-        GtkCellRendererPixbufClass parent_class;
-};
-
-GType            panel_cell_renderer_mode_get_type      (void);
-GtkCellRenderer *panel_cell_renderer_mode_new           (void);
-
-G_END_DECLS
-
-#endif /* PANEL_CELL_RENDERER_MODE_H */
-
diff --git a/panels/network/panel-cell-renderer-pixbuf.c b/panels/network/panel-cell-renderer-pixbuf.c
deleted file mode 100644
index 72650c9..0000000
--- a/panels/network/panel-cell-renderer-pixbuf.c
+++ /dev/null
@@ -1,82 +0,0 @@
-/* -*- Pixbuf: C; tab-width: 8; indent-tabs-pixbuf: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Written by Matthias Clasen
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "panel-cell-renderer-pixbuf.h"
-
-enum {
-        ACTIVATE,
-        LAST_SIGNAL
-};
-
-static guint signals[LAST_SIGNAL] = { 0 };
-
-G_DEFINE_TYPE (PanelCellRendererPixbuf, panel_cell_renderer_pixbuf, GTK_TYPE_CELL_RENDERER_PIXBUF)
-
-static gint
-activate (GtkCellRenderer      *cell,
-          GdkEvent             *event,
-          GtkWidget            *widget,
-          const gchar          *path,
-          const GdkRectangle   *background_area,
-          const GdkRectangle   *cell_area,
-          GtkCellRendererState  flags)
-{
-        g_signal_emit (cell,  signals[ACTIVATE], 0, path);
-
-        return TRUE;
-}
-
-static void
-panel_cell_renderer_pixbuf_class_init (PanelCellRendererPixbufClass *class)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (class);
-        GtkCellRendererClass *cell_renderer_class = GTK_CELL_RENDERER_CLASS (class);
-
-        cell_renderer_class->activate = activate;
-
-        signals[ACTIVATE] =
-                g_signal_new ("activate",
-                              G_OBJECT_CLASS_TYPE (object_class),
-                              G_SIGNAL_RUN_LAST,
-                              G_STRUCT_OFFSET (PanelCellRendererPixbufClass, activate),
-                              NULL, NULL,
-                              g_cclosure_marshal_VOID__STRING,
-                              G_TYPE_NONE, 1, G_TYPE_STRING);
-}
-
-static void
-panel_cell_renderer_pixbuf_init (PanelCellRendererPixbuf *renderer)
-{
-}
-
-GtkCellRenderer *
-panel_cell_renderer_pixbuf_new (void)
-{
-        return g_object_new (PANEL_TYPE_CELL_RENDERER_PIXBUF, NULL);
-}
diff --git a/panels/network/panel-cell-renderer-pixbuf.h b/panels/network/panel-cell-renderer-pixbuf.h
deleted file mode 100644
index 839af92..0000000
--- a/panels/network/panel-cell-renderer-pixbuf.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/* -*- Pixbuf: C; tab-width: 8; indent-tabs-pixbuf: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Written by Matthias Clasen
- */
-
-#ifndef PANEL_CELL_RENDERER_PIXBUF_H
-#define PANEL_CELL_RENDERER_PIXBUF_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-#define PANEL_TYPE_CELL_RENDERER_PIXBUF           (panel_cell_renderer_pixbuf_get_type())
-#define PANEL_CELL_RENDERER_PIXBUF(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj), PANEL_TYPE_CELL_RENDERER_PIXBUF, PanelCellRendererPixbuf))
-#define PANEL_CELL_RENDERER_PIXBUF_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST((cls), PANEL_TYPE_CELL_RENDERER_PIXBUF, PanelCellRendererPixbufClass))
-#define PANEL_IS_CELL_RENDERER_PIXBUF(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANEL_TYPE_CELL_RENDERER_PIXBUF))
-#define PANEL_IS_CELL_RENDERER_PIXBUF_CLASS(cls)  (G_TYPE_CHECK_CLASS_TYPE((cls), PANEL_TYPE_CELL_RENDERER_PIXBUF))
-#define PANEL_CELL_RENDERER_PIXBUF_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANEL_TYPE_CELL_RENDERER_PIXBUF, PanelCellRendererPixbufClass))
-
-G_BEGIN_DECLS
-
-typedef struct _PanelCellRendererPixbuf           PanelCellRendererPixbuf;
-typedef struct _PanelCellRendererPixbufClass      PanelCellRendererPixbufClass;
-
-struct _PanelCellRendererPixbuf
-{
-        GtkCellRendererPixbuf parent;
-};
-
-struct _PanelCellRendererPixbufClass
-{
-        GtkCellRendererPixbufClass parent_class;
-
-        void (*activate) (PanelCellRendererPixbuf *pixbuf,
-                          const gchar           *path);
-};
-
-GType            panel_cell_renderer_pixbuf_get_type (void);
-GtkCellRenderer *panel_cell_renderer_pixbuf_new      (void);
-
-G_END_DECLS
-
-#endif /* PANEL_CELL_RENDERER_PIXBUF_H */
-
diff --git a/panels/network/panel-cell-renderer-security.c b/panels/network/panel-cell-renderer-security.c
deleted file mode 100644
index a964bcf..0000000
--- a/panels/network/panel-cell-renderer-security.c
+++ /dev/null
@@ -1,153 +0,0 @@
-/* -*- Security: C; tab-width: 8; indent-tabs-security: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Red Hat, Inc
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "panel-cell-renderer-security.h"
-
-enum {
-        PROP_0,
-        PROP_SECURITY,
-        PROP_LAST
-};
-
-G_DEFINE_TYPE (PanelCellRendererSecurity, panel_cell_renderer_security, GTK_TYPE_CELL_RENDERER_PIXBUF)
-
-static gpointer parent_class = NULL;
-
-/**
- * panel_cell_renderer_security_get_property:
- **/
-static void
-panel_cell_renderer_security_get_property (GObject *object, guint param_id,
-                                       GValue *value, GParamSpec *pspec)
-{
-        PanelCellRendererSecurity *renderer = PANEL_CELL_RENDERER_SECURITY (object);
-
-        switch (param_id) {
-        case PROP_SECURITY:
-                g_value_set_uint (value, renderer->security);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-/**
- * panel_cell_renderer_set_name:
- **/
-static void
-panel_cell_renderer_set_name (PanelCellRendererSecurity *renderer)
-{
-        const gchar *icon_name = NULL;
-
-        if (renderer->security != NM_AP_SEC_UNKNOWN &&
-            renderer->security != NM_AP_SEC_NONE)
-                icon_name = "network-wireless-encrypted-symbolic";
-
-        if (icon_name != NULL) {
-                g_object_set (renderer,
-                              "icon-name", icon_name,
-                              NULL);
-        } else {
-                g_object_set (renderer,
-                              "icon-name", "",
-                              NULL);
-        }
-}
-
-/**
- * panel_cell_renderer_security_set_property:
- **/
-static void
-panel_cell_renderer_security_set_property (GObject *object, guint param_id,
-                                       const GValue *value, GParamSpec *pspec)
-{
-        PanelCellRendererSecurity *renderer = PANEL_CELL_RENDERER_SECURITY (object);
-
-        switch (param_id) {
-        case PROP_SECURITY:
-                renderer->security = g_value_get_uint (value);
-                panel_cell_renderer_set_name (renderer);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-/**
- * panel_cell_renderer_finalize:
- **/
-static void
-panel_cell_renderer_finalize (GObject *object)
-{
-        PanelCellRendererSecurity *renderer;
-        renderer = PANEL_CELL_RENDERER_SECURITY (object);
-        g_free (renderer->icon_name);
-        G_OBJECT_CLASS (parent_class)->finalize (object);
-}
-
-/**
- * panel_cell_renderer_security_class_init:
- **/
-static void
-panel_cell_renderer_security_class_init (PanelCellRendererSecurityClass *class)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (class);
-        object_class->finalize = panel_cell_renderer_finalize;
-
-        parent_class = g_type_class_peek_parent (class);
-
-        object_class->get_property = panel_cell_renderer_security_get_property;
-        object_class->set_property = panel_cell_renderer_security_set_property;
-
-        g_object_class_install_property (object_class, PROP_SECURITY,
-                                         g_param_spec_uint ("security", NULL,
-                                                            NULL,
-                                                            0, G_MAXUINT, 0,
-                                                            G_PARAM_READWRITE));
-}
-
-/**
- * panel_cell_renderer_security_init:
- **/
-static void
-panel_cell_renderer_security_init (PanelCellRendererSecurity *renderer)
-{
-        renderer->security = 0;
-        renderer->icon_name = NULL;
-}
-
-/**
- * panel_cell_renderer_security_new:
- **/
-GtkCellRenderer *
-panel_cell_renderer_security_new (void)
-{
-        return g_object_new (PANEL_TYPE_CELL_RENDERER_SECURITY, NULL);
-}
-
diff --git a/panels/network/panel-cell-renderer-security.h b/panels/network/panel-cell-renderer-security.h
deleted file mode 100644
index e297abe..0000000
--- a/panels/network/panel-cell-renderer-security.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/* -*- Security: C; tab-width: 8; indent-tabs-security: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Red Hat, Inc
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef PANEL_CELL_RENDERER_SECURITY_H
-#define PANEL_CELL_RENDERER_SECURITY_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-#include "nm-device.h"
-#include "nm-access-point.h"
-
-#define PANEL_TYPE_CELL_RENDERER_SECURITY           (panel_cell_renderer_security_get_type())
-#define PANEL_CELL_RENDERER_SECURITY(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj), PANEL_TYPE_CELL_RENDERER_SECURITY, PanelCellRendererSecurity))
-#define PANEL_CELL_RENDERER_SECURITY_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST((cls), PANEL_TYPE_CELL_RENDERER_SECURITY, PanelCellRendererSecurityClass))
-#define PANEL_IS_CELL_RENDERER_SECURITY(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANEL_TYPE_CELL_RENDERER_SECURITY))
-#define PANEL_IS_CELL_RENDERER_SECURITY_CLASS(cls)  (G_TYPE_CHECK_CLASS_TYPE((cls), PANEL_TYPE_CELL_RENDERER_SECURITY))
-#define PANEL_CELL_RENDERER_SECURITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANEL_TYPE_CELL_RENDERER_SECURITY, PanelCellRendererSecurityClass))
-
-G_BEGIN_DECLS
-
-typedef struct _PanelCellRendererSecurity           PanelCellRendererSecurity;
-typedef struct _PanelCellRendererSecurityClass      PanelCellRendererSecurityClass;
-
-typedef enum {
-  NM_AP_SEC_UNKNOWN,
-  NM_AP_SEC_NONE,
-  NM_AP_SEC_WEP,
-  NM_AP_SEC_WPA,
-  NM_AP_SEC_WPA2
-} NMAccessPointSecurity;
-
-struct _PanelCellRendererSecurity
-{
-        GtkCellRendererPixbuf    parent;
-        guint                    security;
-        gchar                   *icon_name;
-};
-
-struct _PanelCellRendererSecurityClass
-{
-        GtkCellRendererPixbufClass parent_class;
-};
-
-GType            panel_cell_renderer_security_get_type      (void);
-GtkCellRenderer *panel_cell_renderer_security_new           (void);
-
-G_END_DECLS
-
-#endif /* PANEL_CELL_RENDERER_SECURITY_H */
-
diff --git a/panels/network/panel-cell-renderer-separator.c b/panels/network/panel-cell-renderer-separator.c
deleted file mode 100644
index ae4d5d2..0000000
--- a/panels/network/panel-cell-renderer-separator.c
+++ /dev/null
@@ -1,130 +0,0 @@
-/* -*- Separator: C; tab-width: 8; indent-tabs-separator: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Written by Matthias Clasen
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "panel-cell-renderer-separator.h"
-
-enum {
-        PROP_0,
-        PROP_DRAW,
-        PROP_LAST
-};
-
-G_DEFINE_TYPE (PanelCellRendererSeparator, panel_cell_renderer_separator, GTK_TYPE_CELL_RENDERER)
-
-static void
-panel_cell_renderer_separator_get_property (GObject    *object,
-                                            guint       param_id,
-                                            GValue     *value,
-                                            GParamSpec *pspec)
-{
-        PanelCellRendererSeparator *renderer = PANEL_CELL_RENDERER_SEPARATOR (object);
-
-        switch (param_id) {
-        case PROP_DRAW:
-                g_value_set_boolean (value, renderer->draw);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-static void
-panel_cell_renderer_separator_set_property (GObject      *object,
-                                            guint         param_id,
-                                            const GValue *value,
-                                            GParamSpec   *pspec)
-{
-        PanelCellRendererSeparator *renderer = PANEL_CELL_RENDERER_SEPARATOR (object);
-
-        switch (param_id) {
-        case PROP_DRAW:
-                renderer->draw = g_value_get_boolean (value);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-static void
-render (GtkCellRenderer      *cell,
-        cairo_t              *cr,
-        GtkWidget            *widget,
-        const GdkRectangle   *background_area,
-        const GdkRectangle   *cell_area,
-        GtkCellRendererState  flags)
-{
-        PanelCellRendererSeparator *renderer = PANEL_CELL_RENDERER_SEPARATOR (cell);
-        GtkStyleContext *context;
-        gint x, y, w, h, xpad, ypad;
-
-        if (!renderer->draw)
-                return;
-
-        context = gtk_widget_get_style_context (widget);
-
-        gtk_cell_renderer_get_padding (cell, &xpad, &ypad);
-
-        x = cell_area->x + xpad;
-        y = cell_area->y + ypad;
-        w = cell_area->width - xpad * 2;
-        h = cell_area->height - ypad * 2;
-
-        gtk_render_line (context, cr, x + w / 2, y, x + w / 2, y + h - 1);
-}
-
-static void
-panel_cell_renderer_separator_class_init (PanelCellRendererSeparatorClass *class)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (class);
-        GtkCellRendererClass *cell_renderer_class = GTK_CELL_RENDERER_CLASS (class);
-
-        object_class->get_property = panel_cell_renderer_separator_get_property;
-        object_class->set_property = panel_cell_renderer_separator_set_property;
-
-        cell_renderer_class->render = render;
-
-        g_object_class_install_property (object_class, PROP_DRAW,
-                                         g_param_spec_boolean ("draw", "draw", "draw",
-                                                               TRUE,
-                                                               G_PARAM_READWRITE));
-}
-
-static void
-panel_cell_renderer_separator_init (PanelCellRendererSeparator *renderer)
-{
-        renderer->draw = TRUE;
-}
-
-GtkCellRenderer *
-panel_cell_renderer_separator_new (void)
-{
-        return g_object_new (PANEL_TYPE_CELL_RENDERER_SEPARATOR, NULL);
-}
diff --git a/panels/network/panel-cell-renderer-separator.h b/panels/network/panel-cell-renderer-separator.h
deleted file mode 100644
index 29dfa1d..0000000
--- a/panels/network/panel-cell-renderer-separator.h
+++ /dev/null
@@ -1,62 +0,0 @@
-/* -*- Separator: C; tab-width: 8; indent-tabs-separator: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Written by Matthias Clasen
- */
-
-#ifndef PANEL_CELL_RENDERER_SEPARATOR_H
-#define PANEL_CELL_RENDERER_SEPARATOR_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-#include "nm-device.h"
-#include "nm-access-point.h"
-
-#define PANEL_TYPE_CELL_RENDERER_SEPARATOR           (panel_cell_renderer_separator_get_type())
-#define PANEL_CELL_RENDERER_SEPARATOR(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj), PANEL_TYPE_CELL_RENDERER_SEPARATOR, PanelCellRendererSeparator))
-#define PANEL_CELL_RENDERER_SEPARATOR_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST((cls), PANEL_TYPE_CELL_RENDERER_SEPARATOR, PanelCellRendererSeparatorClass))
-#define PANEL_IS_CELL_RENDERER_SEPARATOR(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANEL_TYPE_CELL_RENDERER_SEPARATOR))
-#define PANEL_IS_CELL_RENDERER_SEPARATOR_CLASS(cls)  (G_TYPE_CHECK_CLASS_TYPE((cls), PANEL_TYPE_CELL_RENDERER_SEPARATOR))
-#define PANEL_CELL_RENDERER_SEPARATOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANEL_TYPE_CELL_RENDERER_SEPARATOR, PanelCellRendererSeparatorClass))
-
-G_BEGIN_DECLS
-
-typedef struct _PanelCellRendererSeparator           PanelCellRendererSeparator;
-typedef struct _PanelCellRendererSeparatorClass      PanelCellRendererSeparatorClass;
-
-struct _PanelCellRendererSeparator
-{
-        GtkCellRenderer parent;
-        gboolean draw;
-};
-
-struct _PanelCellRendererSeparatorClass
-{
-        GtkCellRendererClass parent_class;
-};
-
-GType            panel_cell_renderer_separator_get_type (void);
-GtkCellRenderer *panel_cell_renderer_separator_new      (void);
-
-G_END_DECLS
-
-#endif /* PANEL_CELL_RENDERER_SEPARATOR_H */
-
diff --git a/panels/network/panel-cell-renderer-signal.c b/panels/network/panel-cell-renderer-signal.c
deleted file mode 100644
index fbdfcee..0000000
--- a/panels/network/panel-cell-renderer-signal.c
+++ /dev/null
@@ -1,161 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-signal: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "panel-cell-renderer-signal.h"
-
-enum {
-        PROP_0,
-        PROP_SIGNAL,
-        PROP_LAST
-};
-
-G_DEFINE_TYPE (PanelCellRendererSignal, panel_cell_renderer_signal, GTK_TYPE_CELL_RENDERER_PIXBUF)
-
-static gpointer parent_class = NULL;
-
-/**
- * panel_cell_renderer_signal_get_property:
- **/
-static void
-panel_cell_renderer_signal_get_property (GObject *object, guint param_id,
-                                       GValue *value, GParamSpec *pspec)
-{
-        PanelCellRendererSignal *renderer = PANEL_CELL_RENDERER_SIGNAL (object);
-
-        switch (param_id) {
-        case PROP_SIGNAL:
-                g_value_set_uint (value, renderer->signal);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-/**
- * panel_cell_renderer_set_name:
- **/
-static void
-panel_cell_renderer_set_name (PanelCellRendererSignal *renderer)
-{
-        const gchar *icon_name = NULL;
-        GIcon *icon;
-
-        /* the 'Other...' entry */
-        if (renderer->signal <= 0) {
-                g_object_set (renderer, "gicon", NULL, NULL);
-                return;
-        }
-
-        if (renderer->signal < 20)
-                icon_name = "network-wireless-signal-none-symbolic";
-        else if (renderer->signal < 40)
-                icon_name = "network-wireless-signal-weak-symbolic";
-        else if (renderer->signal < 50)
-                icon_name = "network-wireless-signal-ok-symbolic";
-        else if (renderer->signal < 80)
-                icon_name = "network-wireless-signal-good-symbolic";
-        else
-                icon_name = "network-wireless-signal-excellent-symbolic";
-
-        icon = g_themed_icon_new_with_default_fallbacks (icon_name);
-        g_object_set (renderer, "gicon", icon, NULL);
-        g_object_unref (icon);
-}
-
-/**
- * panel_cell_renderer_signal_set_property:
- **/
-static void
-panel_cell_renderer_signal_set_property (GObject *object, guint param_id,
-                                       const GValue *value, GParamSpec *pspec)
-{
-        PanelCellRendererSignal *renderer = PANEL_CELL_RENDERER_SIGNAL (object);
-
-        switch (param_id) {
-        case PROP_SIGNAL:
-                renderer->signal = g_value_get_uint (value);
-                panel_cell_renderer_set_name (renderer);
-                break;
-        default:
-                G_OBJECT_WARN_INVALID_PROPERTY_ID (object, param_id, pspec);
-                break;
-        }
-}
-
-/**
- * panel_cell_renderer_finalize:
- **/
-static void
-panel_cell_renderer_finalize (GObject *object)
-{
-        PanelCellRendererSignal *renderer;
-        renderer = PANEL_CELL_RENDERER_SIGNAL (object);
-        g_free (renderer->icon_name);
-        G_OBJECT_CLASS (parent_class)->finalize (object);
-}
-
-/**
- * panel_cell_renderer_signal_class_init:
- **/
-static void
-panel_cell_renderer_signal_class_init (PanelCellRendererSignalClass *class)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (class);
-        object_class->finalize = panel_cell_renderer_finalize;
-
-        parent_class = g_type_class_peek_parent (class);
-
-        object_class->get_property = panel_cell_renderer_signal_get_property;
-        object_class->set_property = panel_cell_renderer_signal_set_property;
-
-        g_object_class_install_property (object_class, PROP_SIGNAL,
-                                         g_param_spec_uint ("signal", NULL,
-                                                            NULL,
-                                                            0, G_MAXUINT, 0,
-                                                            G_PARAM_READWRITE));
-}
-
-/**
- * panel_cell_renderer_signal_init:
- **/
-static void
-panel_cell_renderer_signal_init (PanelCellRendererSignal *renderer)
-{
-        renderer->signal = 0;
-        renderer->icon_name = NULL;
-}
-
-/**
- * panel_cell_renderer_signal_new:
- **/
-GtkCellRenderer *
-panel_cell_renderer_signal_new (void)
-{
-        return g_object_new (PANEL_TYPE_CELL_RENDERER_SIGNAL, NULL);
-}
-
diff --git a/panels/network/panel-cell-renderer-signal.h b/panels/network/panel-cell-renderer-signal.h
deleted file mode 100644
index 3829e2f..0000000
--- a/panels/network/panel-cell-renderer-signal.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-signal: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef PANEL_CELL_RENDERER_SIGNAL_H
-#define PANEL_CELL_RENDERER_SIGNAL_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-#include "nm-device.h"
-#include "nm-access-point.h"
-
-#define PANEL_TYPE_CELL_RENDERER_SIGNAL                 (panel_cell_renderer_signal_get_type())
-#define PANEL_CELL_RENDERER_SIGNAL(obj)                 (G_TYPE_CHECK_INSTANCE_CAST((obj), PANEL_TYPE_CELL_RENDERER_SIGNAL, PanelCellRendererSignal))
-#define PANEL_CELL_RENDERER_SIGNAL_CLASS(cls)           (G_TYPE_CHECK_CLASS_CAST((cls), PANEL_TYPE_CELL_RENDERER_SIGNAL, PanelCellRendererSignalClass))
-#define PANEL_IS_CELL_RENDERER_SIGNAL(obj)              (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANEL_TYPE_CELL_RENDERER_SIGNAL))
-#define PANEL_IS_CELL_RENDERER_SIGNAL_CLASS(cls)        (G_TYPE_CHECK_CLASS_TYPE((cls), PANEL_TYPE_CELL_RENDERER_SIGNAL))
-#define PANEL_CELL_RENDERER_SIGNAL_GET_CLASS(obj)       (G_TYPE_INSTANCE_GET_CLASS((obj), PANEL_TYPE_CELL_RENDERER_SIGNAL, PanelCellRendererSignalClass))
-
-G_BEGIN_DECLS
-
-typedef struct _PanelCellRendererSignal         PanelCellRendererSignal;
-typedef struct _PanelCellRendererSignalClass    PanelCellRendererSignalClass;
-
-struct _PanelCellRendererSignal
-{
-        GtkCellRendererPixbuf    parent;
-        guint                    signal;
-        gchar                   *icon_name;
-};
-
-struct _PanelCellRendererSignalClass
-{
-        GtkCellRendererPixbufClass parent_class;
-};
-
-GType            panel_cell_renderer_signal_get_type    (void);
-GtkCellRenderer *panel_cell_renderer_signal_new         (void);
-
-G_END_DECLS
-
-#endif /* PANEL_CELL_RENDERER_SIGNAL_H */
-
diff --git a/panels/network/panel-cell-renderer-text.c b/panels/network/panel-cell-renderer-text.c
deleted file mode 100644
index 5731da6..0000000
--- a/panels/network/panel-cell-renderer-text.c
+++ /dev/null
@@ -1,82 +0,0 @@
-/* -*- Text: C; tab-width: 8; indent-tabs-text: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Written by Matthias Clasen
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include "panel-cell-renderer-text.h"
-
-enum {
-        ACTIVATE,
-        LAST_SIGNAL
-};
-
-static guint signals[LAST_SIGNAL] = { 0 };
-
-G_DEFINE_TYPE (PanelCellRendererText, panel_cell_renderer_text, GTK_TYPE_CELL_RENDERER_TEXT)
-
-static gint
-activate (GtkCellRenderer      *cell,
-          GdkEvent             *event,
-          GtkWidget            *widget,
-          const gchar          *path,
-          const GdkRectangle   *background_area,
-          const GdkRectangle   *cell_area,
-          GtkCellRendererState  flags)
-{
-        g_signal_emit (cell,  signals[ACTIVATE], 0, path);
-
-        return TRUE;
-}
-
-static void
-panel_cell_renderer_text_class_init (PanelCellRendererTextClass *class)
-{
-        GObjectClass *object_class = G_OBJECT_CLASS (class);
-        GtkCellRendererClass *cell_renderer_class = GTK_CELL_RENDERER_CLASS (class);
-
-        cell_renderer_class->activate = activate;
-
-        signals[ACTIVATE] =
-                g_signal_new ("activate",
-                              G_OBJECT_CLASS_TYPE (object_class),
-                              G_SIGNAL_RUN_LAST,
-                              G_STRUCT_OFFSET (PanelCellRendererTextClass, activate),
-                              NULL, NULL,
-                              g_cclosure_marshal_VOID__STRING,
-                              G_TYPE_NONE, 1, G_TYPE_STRING);
-}
-
-static void
-panel_cell_renderer_text_init (PanelCellRendererText *renderer)
-{
-}
-
-GtkCellRenderer *
-panel_cell_renderer_text_new (void)
-{
-        return g_object_new (PANEL_TYPE_CELL_RENDERER_TEXT, NULL);
-}
diff --git a/panels/network/panel-cell-renderer-text.h b/panels/network/panel-cell-renderer-text.h
deleted file mode 100644
index c4c2e45..0000000
--- a/panels/network/panel-cell-renderer-text.h
+++ /dev/null
@@ -1,61 +0,0 @@
-/* -*- Text: C; tab-width: 8; indent-tabs-text: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2012 Red Hat, Inc.
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- * Written by Matthias Clasen
- */
-
-#ifndef PANEL_CELL_RENDERER_TEXT_H
-#define PANEL_CELL_RENDERER_TEXT_H
-
-#include <glib-object.h>
-#include <gtk/gtk.h>
-
-#define PANEL_TYPE_CELL_RENDERER_TEXT           (panel_cell_renderer_text_get_type())
-#define PANEL_CELL_RENDERER_TEXT(obj)           (G_TYPE_CHECK_INSTANCE_CAST((obj), PANEL_TYPE_CELL_RENDERER_TEXT, PanelCellRendererText))
-#define PANEL_CELL_RENDERER_TEXT_CLASS(cls)     (G_TYPE_CHECK_CLASS_CAST((cls), PANEL_TYPE_CELL_RENDERER_TEXT, PanelCellRendererTextClass))
-#define PANEL_IS_CELL_RENDERER_TEXT(obj)        (G_TYPE_CHECK_INSTANCE_TYPE((obj), PANEL_TYPE_CELL_RENDERER_TEXT))
-#define PANEL_IS_CELL_RENDERER_TEXT_CLASS(cls)  (G_TYPE_CHECK_CLASS_TYPE((cls), PANEL_TYPE_CELL_RENDERER_TEXT))
-#define PANEL_CELL_RENDERER_TEXT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), PANEL_TYPE_CELL_RENDERER_TEXT, PanelCellRendererTextClass))
-
-G_BEGIN_DECLS
-
-typedef struct _PanelCellRendererText           PanelCellRendererText;
-typedef struct _PanelCellRendererTextClass      PanelCellRendererTextClass;
-
-struct _PanelCellRendererText
-{
-        GtkCellRendererText parent;
-};
-
-struct _PanelCellRendererTextClass
-{
-        GtkCellRendererTextClass parent_class;
-
-        void (*activate) (PanelCellRendererText *text,
-                          const gchar           *path);
-};
-
-GType            panel_cell_renderer_text_get_type (void);
-GtkCellRenderer *panel_cell_renderer_text_new      (void);
-
-G_END_DECLS
-
-#endif /* PANEL_CELL_RENDERER_TEXT_H */
-
diff --git a/panels/network/panel-common.c b/panels/network/panel-common.c
deleted file mode 100644
index debc957..0000000
--- a/panels/network/panel-common.c
+++ /dev/null
@@ -1,699 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- * Copyright (C) 2012 Thomas Bechtold <thomasbechtold@jpberlin.de>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gtk/gtk.h>
-
-#include <nm-device-ethernet.h>
-#include <nm-device-modem.h>
-#include <nm-utils.h>
-
-#include "panel-common.h"
-
-/**
- * panel_device_to_icon_name:
- **/
-const gchar *
-panel_device_to_icon_name (NMDevice *device)
-{
-        const gchar *value = NULL;
-        NMDeviceState state;
-        NMDeviceModemCapabilities caps;
-        switch (nm_device_get_device_type (device)) {
-        case NM_DEVICE_TYPE_ETHERNET:
-                state = nm_device_get_state (device);
-                if (state == NM_DEVICE_STATE_UNAVAILABLE) {
-                        value = "network-wired-disconnected";
-                } else {
-                        value = "network-wired";
-                }
-                break;
-        case NM_DEVICE_TYPE_WIFI:
-        case NM_DEVICE_TYPE_BT:
-        case NM_DEVICE_TYPE_OLPC_MESH:
-                value = "network-wireless";
-                break;
-        case NM_DEVICE_TYPE_MODEM:
-                caps = nm_device_modem_get_current_capabilities (NM_DEVICE_MODEM (device));
-                if ((caps & NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS) ||
-                    (caps & NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO)) {
-                        value = "network-wireless";
-                }
-                break;
-        default:
-                break;
-        }
-        return value;
-}
-
-/**
- * panel_device_to_localized_string:
- **/
-const gchar *
-panel_device_to_localized_string (NMDevice *device)
-{
-        const gchar *value = NULL;
-        NMDeviceModemCapabilities caps;
-        switch (nm_device_get_device_type (device)) {
-        case NM_DEVICE_TYPE_UNKNOWN:
-                /* TRANSLATORS: device type */
-                value = _("Unknown");
-                break;
-        case NM_DEVICE_TYPE_ETHERNET:
-                /* TRANSLATORS: device type */
-                value = _("Wired");
-                break;
-        case NM_DEVICE_TYPE_WIFI:
-                /* TRANSLATORS: device type */
-                value = _("Wireless");
-                break;
-        case NM_DEVICE_TYPE_MODEM:
-                caps = nm_device_modem_get_current_capabilities (NM_DEVICE_MODEM (device));
-                if ((caps & NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS) ||
-                    (caps & NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO)) {
-                        /* TRANSLATORS: device type */
-                        value = _("Mobile broadband");
-                }
-                break;
-        case NM_DEVICE_TYPE_BT:
-                /* TRANSLATORS: device type */
-                value = _("Bluetooth");
-                break;
-        case NM_DEVICE_TYPE_OLPC_MESH:
-                /* TRANSLATORS: device type */
-                value = _("Mesh");
-                break;
-        default:
-                break;
-        }
-        return value;
-}
-
-/**
- * panel_device_to_sortable_string:
- *
- * Try to return order of approximate connection speed.
- * But sort wifi first, since thats the common case.
- **/
-const gchar *
-panel_device_to_sortable_string (NMDevice *device)
-{
-        const gchar *value = NULL;
-        NMDeviceModemCapabilities caps;
-        switch (nm_device_get_device_type (device)) {
-        case NM_DEVICE_TYPE_ETHERNET:
-                value = "2";
-                break;
-        case NM_DEVICE_TYPE_WIFI:
-                value = "1";
-                break;
-        case NM_DEVICE_TYPE_MODEM:
-                caps = nm_device_modem_get_current_capabilities (NM_DEVICE_MODEM (device));
-                if ((caps & NM_DEVICE_MODEM_CAPABILITY_GSM_UMTS) ||
-                    (caps & NM_DEVICE_MODEM_CAPABILITY_CDMA_EVDO)) {
-                        value = "3";
-                }
-                break;
-        case NM_DEVICE_TYPE_BT:
-                value = "4";
-                break;
-        case NM_DEVICE_TYPE_OLPC_MESH:
-                value = "5";
-                break;
-        default:
-                value = "6";
-                break;
-        }
-        return value;
-}
-
-/**
- * panel_ap_mode_to_localized_string:
- **/
-const gchar *
-panel_ap_mode_to_localized_string (NM80211Mode mode)
-{
-        const gchar *value = NULL;
-        switch (mode) {
-        case NM_802_11_MODE_UNKNOWN:
-                /* TRANSLATORS: AP type */
-                value = _("Unknown");
-                break;
-        case NM_802_11_MODE_ADHOC:
-                /* TRANSLATORS: AP type */
-                value = _("Ad-hoc");
-                break;
-        case NM_802_11_MODE_INFRA:
-                /* TRANSLATORS: AP type */
-                value = _("Infrastructure");
-                break;
-        default:
-                break;
-        }
-        return value;
-}
-
-/**
- * panel_device_state_to_localized_string:
- **/
-const gchar *
-panel_device_state_to_localized_string (NMDevice *device)
-{
-        NMDeviceType type;
-        NMDeviceState state;
-
-        type = nm_device_get_device_type (device);
-        state = nm_device_get_state (device);
-
-        const gchar *value = NULL;
-        switch (state) {
-        case NM_DEVICE_STATE_UNKNOWN:
-                /* TRANSLATORS: device status */
-                value = _("Status unknown");
-                break;
-        case NM_DEVICE_STATE_UNMANAGED:
-                /* TRANSLATORS: device status */
-                value = _("Unmanaged");
-                break;
-        case NM_DEVICE_STATE_UNAVAILABLE:
-                /* TRANSLATORS: device status */
-                if (nm_device_get_firmware_missing (device))
-                        value = _("Firmware missing");
-                else if (type == NM_DEVICE_TYPE_ETHERNET &&
-                         !nm_device_ethernet_get_carrier (NM_DEVICE_ETHERNET (device)))
-                        value = _("Cable unplugged");
-                else
-                        value = _("Unavailable");
-                break;
-        case NM_DEVICE_STATE_DISCONNECTED:
-                /* TRANSLATORS: device status */
-                value = _("Disconnected");
-                break;
-        case NM_DEVICE_STATE_PREPARE:
-        case NM_DEVICE_STATE_CONFIG:
-        case NM_DEVICE_STATE_IP_CONFIG:
-        case NM_DEVICE_STATE_IP_CHECK:
-                /* TRANSLATORS: device status */
-                value = _("Connecting");
-                break;
-        case NM_DEVICE_STATE_NEED_AUTH:
-                /* TRANSLATORS: device status */
-                value = _("Authentication required");
-                break;
-        case NM_DEVICE_STATE_ACTIVATED:
-                /* TRANSLATORS: device status */
-                value = _("Connected");
-                break;
-        case NM_DEVICE_STATE_DEACTIVATING:
-                /* TRANSLATORS: device status */
-                value = _("Disconnecting");
-                break;
-        case NM_DEVICE_STATE_FAILED:
-                /* TRANSLATORS: device status */
-                value = _("Connection failed");
-                break;
-        default:
-                /* TRANSLATORS: device status */
-                value = _("Status unknown (missing)");
-                break;
-        }
-        return value;
-}
-
-/**
- * panel_vpn_state_to_localized_string:
- **/
-const gchar *
-panel_vpn_state_to_localized_string (NMVPNConnectionState type)
-{
-        const gchar *value = NULL;
-        switch (type) {
-        case NM_DEVICE_STATE_UNKNOWN:
-                /* TRANSLATORS: VPN status */
-                value = _("Status unknown");
-                break;
-        case NM_VPN_CONNECTION_STATE_PREPARE:
-        case NM_VPN_CONNECTION_STATE_CONNECT:
-        case NM_VPN_CONNECTION_STATE_IP_CONFIG_GET:
-                /* TRANSLATORS: VPN status */
-                value = _("Connecting");
-                break;
-        case NM_VPN_CONNECTION_STATE_NEED_AUTH:
-                /* TRANSLATORS: VPN status */
-                value = _("Authentication required");
-                break;
-        case NM_VPN_CONNECTION_STATE_ACTIVATED:
-                /* TRANSLATORS: VPN status */
-                value = _("Connected");
-                break;
-        case NM_VPN_CONNECTION_STATE_FAILED:
-                /* TRANSLATORS: VPN status */
-                value = _("Connection failed");
-                break;
-        case NM_VPN_CONNECTION_STATE_DISCONNECTED:
-                /* TRANSLATORS: VPN status */
-                value = _("Not connected");
-                break;
-        default:
-                /* TRANSLATORS: VPN status */
-                value = _("Status unknown (missing)");
-                break;
-        }
-        return value;
-}
-
-/**
- * panel_device_state_reason_to_localized_string:
- **/
-const gchar *
-panel_device_state_reason_to_localized_string (NMDevice *device)
-{
-        const gchar *value = NULL;
-        NMDeviceStateReason state_reason;
-
-        /* we only want the StateReason's we care about */
-        nm_device_get_state_reason (device, &state_reason);
-        switch (state_reason) {
-        case NM_DEVICE_STATE_REASON_CONFIG_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Configuration failed");
-                break;
-        case NM_DEVICE_STATE_REASON_IP_CONFIG_UNAVAILABLE:
-                /* TRANSLATORS: device status reason */
-                value = _("IP configuration failed");
-                break;
-        case NM_DEVICE_STATE_REASON_IP_CONFIG_EXPIRED:
-                /* TRANSLATORS: device status reason */
-                value = _("IP configuration expired");
-                break;
-        case NM_DEVICE_STATE_REASON_NO_SECRETS:
-                /* TRANSLATORS: device status reason */
-                value = _("Secrets were required, but not provided");
-                break;
-        case NM_DEVICE_STATE_REASON_SUPPLICANT_DISCONNECT:
-                /* TRANSLATORS: device status reason */
-                value = _("802.1x supplicant disconnected");
-                break;
-        case NM_DEVICE_STATE_REASON_SUPPLICANT_CONFIG_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("802.1x supplicant configuration failed");
-                break;
-        case NM_DEVICE_STATE_REASON_SUPPLICANT_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("802.1x supplicant failed");
-                break;
-        case NM_DEVICE_STATE_REASON_SUPPLICANT_TIMEOUT:
-                /* TRANSLATORS: device status reason */
-                value = _("802.1x supplicant took too long to authenticate");
-                break;
-        case NM_DEVICE_STATE_REASON_PPP_START_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("PPP service failed to start");
-                break;
-        case NM_DEVICE_STATE_REASON_PPP_DISCONNECT:
-                /* TRANSLATORS: device status reason */
-                value = _("PPP service disconnected");
-                break;
-        case NM_DEVICE_STATE_REASON_PPP_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("PPP failed");
-                break;
-        case NM_DEVICE_STATE_REASON_DHCP_START_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("DHCP client failed to start");
-                break;
-        case NM_DEVICE_STATE_REASON_DHCP_ERROR:
-                /* TRANSLATORS: device status reason */
-                value = _("DHCP client error");
-                break;
-        case NM_DEVICE_STATE_REASON_DHCP_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("DHCP client failed");
-                break;
-        case NM_DEVICE_STATE_REASON_SHARED_START_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Shared connection service failed to start");
-                break;
-        case NM_DEVICE_STATE_REASON_SHARED_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Shared connection service failed");
-                break;
-        case NM_DEVICE_STATE_REASON_AUTOIP_START_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("AutoIP service failed to start");
-                break;
-        case NM_DEVICE_STATE_REASON_AUTOIP_ERROR:
-                /* TRANSLATORS: device status reason */
-                value = _("AutoIP service error");
-                break;
-        case NM_DEVICE_STATE_REASON_AUTOIP_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("AutoIP service failed");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_BUSY:
-                /* TRANSLATORS: device status reason */
-                value = _("Line busy");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_NO_DIAL_TONE:
-                /* TRANSLATORS: device status reason */
-                value = _("No dial tone");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_NO_CARRIER:
-                /* TRANSLATORS: device status reason */
-                value = _("No carrier could be established");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_DIAL_TIMEOUT:
-                /* TRANSLATORS: device status reason */
-                value = _("Dialing request timed out");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_DIAL_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Dialing attempt failed");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_INIT_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Modem initialization failed");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_APN_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Failed to select the specified APN");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_NOT_SEARCHING:
-                /* TRANSLATORS: device status reason */
-                value = _("Not searching for networks");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_DENIED:
-                /* TRANSLATORS: device status reason */
-                value = _("Network registration denied");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_TIMEOUT:
-                /* TRANSLATORS: device status reason */
-                value = _("Network registration timed out");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_REGISTRATION_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Failed to register with the requested network");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_PIN_CHECK_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("PIN check failed");
-                break;
-        case NM_DEVICE_STATE_REASON_FIRMWARE_MISSING:
-                /* TRANSLATORS: device status reason */
-                value = _("Firmware for the device may be missing");
-                break;
-        case NM_DEVICE_STATE_REASON_CONNECTION_REMOVED:
-                /* TRANSLATORS: device status reason */
-                value = _("Connection disappeared");
-                break;
-        case NM_DEVICE_STATE_REASON_CARRIER:
-                /* TRANSLATORS: device status reason */
-                value = _("Carrier/link changed");
-                break;
-        case NM_DEVICE_STATE_REASON_CONNECTION_ASSUMED:
-                /* TRANSLATORS: device status reason */
-                value = _("Existing connection was assumed");
-                break;
-        case NM_DEVICE_STATE_REASON_MODEM_NOT_FOUND:
-                /* TRANSLATORS: device status reason */
-                value = _("Modem not found");
-                break;
-        case NM_DEVICE_STATE_REASON_BT_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Bluetooth connection failed");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_SIM_NOT_INSERTED:
-                /* TRANSLATORS: device status reason */
-                value = _("SIM Card not inserted");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_SIM_PIN_REQUIRED:
-                /* TRANSLATORS: device status reason */
-                value = _("SIM Pin required");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_SIM_PUK_REQUIRED:
-                /* TRANSLATORS: device status reason */
-                value = _("SIM Puk required");
-                break;
-        case NM_DEVICE_STATE_REASON_GSM_SIM_WRONG:
-                /* TRANSLATORS: device status reason */
-                value = _("SIM wrong");
-                break;
-        case NM_DEVICE_STATE_REASON_INFINIBAND_MODE:
-                /* TRANSLATORS: device status reason */
-                value = _("InfiniBand device does not support connected mode");
-                break;
-        case NM_DEVICE_STATE_REASON_DEPENDENCY_FAILED:
-                /* TRANSLATORS: device status reason */
-                value = _("Connection dependency failed");
-                break;
-        default:
-                /* no StateReason to show */
-                value = "";
-                break;
-        }
-        return value;
-}
-
-gboolean
-panel_set_device_widget_details (GtkBuilder *builder,
-                                 const gchar *widget_suffix,
-                                 const gchar *value)
-{
-        gchar *heading_id;
-        gchar *label_id;
-        GtkWidget *heading;
-        GtkWidget *widget;
-
-        /* hide the row if there is no value */
-        heading_id = g_strdup_printf ("heading_%s", widget_suffix);
-        label_id = g_strdup_printf ("label_%s", widget_suffix);
-        heading = GTK_WIDGET (gtk_builder_get_object (builder, heading_id));
-        widget = GTK_WIDGET (gtk_builder_get_object (builder, label_id));
-        if (heading == NULL || widget == NULL) {
-                g_critical ("no widgets %s, %s found", heading_id, label_id);
-                return FALSE;
-        }
-        g_free (heading_id);
-        g_free (label_id);
-
-        if (value == NULL) {
-                gtk_widget_hide (heading);
-                gtk_widget_hide (widget);
-        } else {
-                /* there exists a value */
-                gtk_widget_show (heading);
-                gtk_widget_show (widget);
-                gtk_label_set_label (GTK_LABEL (widget), value);
-        }
-        return TRUE;
-}
-
-
-gboolean
-panel_set_device_widget_header (GtkBuilder *builder,
-                                const gchar *widget_suffix,
-                                const gchar *heading)
-{
-        gchar *label_id = NULL;
-        GtkWidget *widget;
-
-        label_id = g_strdup_printf ("heading_%s", widget_suffix);
-        widget = GTK_WIDGET (gtk_builder_get_object (builder, label_id));
-        if (widget == NULL) {
-                g_critical ("no widget %s found", label_id);
-                return FALSE;
-        }
-        gtk_label_set_label (GTK_LABEL (widget), heading);
-        g_free (label_id);
-        return TRUE;
-}
-
-static gchar *
-get_ipv4_config_address_as_string (NMIP4Config *ip4_config, const char *what)
-{
-        const GSList *list;
-        struct in_addr addr;
-        gchar *str = NULL;
-        gchar tmp[INET_ADDRSTRLEN];
-        NMIP4Address *address;
-
-        /* get address */
-        list = nm_ip4_config_get_addresses (ip4_config);
-        if (list == NULL)
-                goto out;
-
-        /* we only care about one address */
-        address = list->data;
-        if (!strcmp (what, "address"))
-                addr.s_addr = nm_ip4_address_get_address (address);
-        else if (!strcmp (what, "gateway"))
-                addr.s_addr = nm_ip4_address_get_gateway (address);
-        else if (!strcmp (what, "netmask"))
-                addr.s_addr = nm_utils_ip4_prefix_to_netmask (nm_ip4_address_get_prefix (address));
-        else
-                goto out;
-
-        if (!inet_ntop (AF_INET, &addr, tmp, sizeof(tmp)))
-                goto out;
-        if (g_strcmp0 (tmp, "0.0.0.0") == 0)
-                goto out;
-        str = g_strdup (tmp);
-out:
-        return str;
-}
-
-static gchar *
-get_ipv4_config_name_servers_as_string (NMIP4Config *ip4_config)
-{
-        const GArray *array;
-        GString *dns;
-        struct in_addr addr;
-        gchar tmp[INET_ADDRSTRLEN];
-        int i;
-        gchar *str = NULL;
-
-        array = nm_ip4_config_get_nameservers (ip4_config);
-        if (array == NULL || array->len == 0)
-                goto out;
-
-        dns = g_string_new (NULL);
-        for (i = 0; i < array->len; i++) {
-                addr.s_addr = g_array_index (array, guint32, i);
-                if (inet_ntop (AF_INET, &addr, tmp, sizeof(tmp)))
-                        g_string_append_printf (dns, "%s ", tmp);
-        }
-        str = g_string_free (dns, FALSE);
-out:
-        return str;
-}
-
-static gchar *
-get_ipv6_config_address_as_string (NMIP6Config *ip6_config)
-{
-        const GSList *list;
-        const struct in6_addr *addr;
-        gchar *str = NULL;
-        gchar tmp[INET6_ADDRSTRLEN];
-        NMIP6Address *address;
-
-        /* get address */
-        list = nm_ip6_config_get_addresses (ip6_config);
-        if (list == NULL)
-                goto out;
-
-        /* we only care about one address */
-        address = list->data;
-        addr = nm_ip6_address_get_address (address);
-        if (addr == NULL)
-                goto out;
-        inet_ntop (AF_INET6, addr, tmp, sizeof(tmp));
-        str = g_strdup (tmp);
-out:
-        return str;
-}
-
-void
-panel_set_device_widgets (GtkBuilder *builder, NMDevice *device)
-{
-        NMIP4Config *ip4_config = NULL;
-        NMIP6Config *ip6_config = NULL;
-        gboolean has_ip4;
-        gboolean has_ip6;
-        gchar *str_tmp;
-
-        /* get IPv4 parameters */
-        ip4_config = nm_device_get_ip4_config (device);
-        if (ip4_config != NULL) {
-
-                /* IPv4 address */
-                str_tmp = get_ipv4_config_address_as_string (ip4_config, "address");
-                panel_set_device_widget_details (builder,
-                                                 "ipv4",
-                                                 str_tmp);
-                has_ip4 = str_tmp != NULL;
-                g_free (str_tmp);
-
-                /* IPv4 DNS */
-                str_tmp = get_ipv4_config_name_servers_as_string (ip4_config);
-                panel_set_device_widget_details (builder,
-                                                 "dns",
-                                                 str_tmp);
-                g_free (str_tmp);
-
-                /* IPv4 route */
-                str_tmp = get_ipv4_config_address_as_string (ip4_config, "gateway");
-                panel_set_device_widget_details (builder,
-                                                 "route",
-                                                 str_tmp);
-                g_free (str_tmp);
-
-        } else {
-                /* IPv4 address */
-                panel_set_device_widget_details (builder,
-                                                 "ipv4",
-                                                 NULL);
-                has_ip4 = FALSE;
-
-                /* IPv4 DNS */
-                panel_set_device_widget_details (builder,
-                                                 "dns",
-                                                 NULL);
-
-                /* IPv4 route */
-                panel_set_device_widget_details (builder,
-                                                 "route",
-                                                 NULL);
-        }
-
-        /* get IPv6 parameters */
-        ip6_config = nm_device_get_ip6_config (device);
-        if (ip6_config != NULL) {
-                str_tmp = get_ipv6_config_address_as_string (ip6_config);
-                panel_set_device_widget_details (builder, "ipv6", str_tmp);
-                has_ip6 = str_tmp != NULL;
-                g_free (str_tmp);
-        } else {
-                panel_set_device_widget_details (builder, "ipv6", NULL);
-                has_ip6 = FALSE;
-        }
-
-        if (has_ip4 && has_ip6) {
-                panel_set_device_widget_header (builder, "ipv4", _("IPv4 Address"));
-                panel_set_device_widget_header (builder, "ipv6", _("IPv6 Address"));
-        } else if (has_ip4) {
-                panel_set_device_widget_header (builder, "ipv4", _("IP Address"));
-        } else if (has_ip6) {
-                panel_set_device_widget_header (builder, "ipv6", _("IP Address"));
-        }
-}
-
-void
-panel_unset_device_widgets (GtkBuilder *builder)
-{
-        panel_set_device_widget_details (builder, "ipv4", NULL);
-        panel_set_device_widget_details (builder, "ipv6", NULL);
-        panel_set_device_widget_details (builder, "dns", NULL);
-        panel_set_device_widget_details (builder, "route", NULL);
-}
diff --git a/panels/network/panel-common.h b/panels/network/panel-common.h
deleted file mode 100644
index 725824f..0000000
--- a/panels/network/panel-common.h
+++ /dev/null
@@ -1,53 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2010 Richard Hughes <richard@hughsie.com>
- *
- * Licensed under the GNU General Public License Version 2
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- */
-
-#ifndef PANEL_COMMON_H
-#define PANEL_COMMON_H
-
-#include <glib-object.h>
-#include <NetworkManager.h>
-#include <NetworkManagerVPN.h>
-#include <nm-device.h>
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-const gchar     *panel_device_to_icon_name                     (NMDevice *device);
-const gchar     *panel_device_to_localized_string              (NMDevice *device);
-const gchar     *panel_device_to_sortable_string               (NMDevice *device);
-const gchar     *panel_ap_mode_to_localized_string             (NM80211Mode mode);
-const gchar     *panel_device_state_to_localized_string        (NMDevice *device);
-const gchar     *panel_vpn_state_to_localized_string           (NMVPNConnectionState type);
-const gchar     *panel_device_state_reason_to_localized_string (NMDevice *device);
-gboolean         panel_set_device_widget_details               (GtkBuilder *builder,
-                                                                const gchar *widget_suffix,
-                                                                const gchar *value);
-gboolean         panel_set_device_widget_header                (GtkBuilder *builder,
-                                                                const gchar *widget_suffix,
-                                                                const gchar *value);
-void             panel_set_device_widgets                      (GtkBuilder *builder,
-                                                                NMDevice *device);
-void             panel_unset_device_widgets                    (GtkBuilder *builder);
-
-G_END_DECLS
-
-#endif /* PANEL_COMMON_H */
-
diff --git a/panels/network/rfkill-glib.c b/panels/network/rfkill-glib.c
deleted file mode 100644
index 7c9ee3c..0000000
--- a/panels/network/rfkill-glib.c
+++ /dev/null
@@ -1,299 +0,0 @@
-/*
- *
- *  gnome-bluetooth - Bluetooth integration for GNOME
- *
- *  Copyright (C) 2012  Bastien Nocera <hadess@hadess.net>
- *
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
- *
- */
-
-#ifdef HAVE_CONFIG_H
-#include <config.h>
-#endif
-
-#include <errno.h>
-#include <unistd.h>
-#include <sys/types.h>
-#include <sys/stat.h>
-#include <fcntl.h>
-#include <string.h>
-
-#include <glib.h>
-
-#include "rfkill-glib.h"
-
-enum {
-	CHANGED,
-	LAST_SIGNAL
-};
-
-static int signals[LAST_SIGNAL] = { 0 };
-
-#define CC_RFKILL_GLIB_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE((obj), \
-				CC_RFKILL_TYPE_GLIB, CcRfkillGlibPrivate))
-
-struct CcRfkillGlibPrivate {
-	int fd;
-	GIOChannel *channel;
-	guint watch_id;
-};
-
-G_DEFINE_TYPE(CcRfkillGlib, cc_rfkill_glib, G_TYPE_OBJECT)
-
-int
-cc_rfkill_glib_send_event (CcRfkillGlib *rfkill, struct rfkill_event *event)
-{
-	g_return_val_if_fail (RFKILL_IS_GLIB (rfkill), -1);
-	g_return_val_if_fail (rfkill->priv->fd > 0, -1);
-
-	return write (rfkill->priv->fd, event, sizeof(struct rfkill_event));
-}
-
-static const char *
-type_to_string (unsigned int type)
-{
-	switch (type) {
-	case RFKILL_TYPE_ALL:
-		return "ALL";
-	case RFKILL_TYPE_WLAN:
-		return "WLAN";
-	case RFKILL_TYPE_BLUETOOTH:
-		return "RFKILL";
-	case RFKILL_TYPE_UWB:
-		return "UWB";
-	case RFKILL_TYPE_WIMAX:
-		return "WIMAX";
-	case RFKILL_TYPE_WWAN:
-		return "WWAN";
-	default:
-		return "UNKNOWN";
-	}
-}
-
-static const char *
-op_to_string (unsigned int op)
-{
-	switch (op) {
-	case RFKILL_OP_ADD:
-		return "ADD";
-	case RFKILL_OP_DEL:
-		return "DEL";
-	case RFKILL_OP_CHANGE:
-		return "CHANGE";
-	case RFKILL_OP_CHANGE_ALL:
-		return "CHANGE_ALL";
-	default:
-		g_assert_not_reached ();
-	}
-}
-
-static void
-print_event (struct rfkill_event *event)
-{
-	g_debug ("RFKILL event: idx %u type %u (%s) op %u (%s) soft %u hard %u",
-		 event->idx,
-		 event->type, type_to_string (event->type),
-		 event->op, op_to_string (event->op),
-		 event->soft, event->hard);
-}
-
-static void
-emit_changed_signal_and_free (CcRfkillGlib *rfkill,
-			      GList      *events)
-{
-	if (events == NULL)
-		return;
-
-	g_signal_emit (G_OBJECT (rfkill),
-		       signals[CHANGED],
-		       0, events);
-	g_list_free_full (events, g_free);
-}
-
-static gboolean
-event_cb (GIOChannel   *source,
-	  GIOCondition  condition,
-	  CcRfkillGlib   *rfkill)
-{
-	GList *events;
-
-	events = NULL;
-
-	if (condition & G_IO_IN) {
-		GIOStatus status;
-		struct rfkill_event event;
-		gsize read;
-
-		status = g_io_channel_read_chars (source,
-						  (char *) &event,
-						  sizeof(event),
-						  &read,
-						  NULL);
-
-		while (status == G_IO_STATUS_NORMAL && read == sizeof(event)) {
-			struct rfkill_event *event_ptr;
-
-			print_event (&event);
-
-			event_ptr = g_memdup (&event, sizeof(event));
-			events = g_list_prepend (events, event_ptr);
-
-			status = g_io_channel_read_chars (source,
-							  (char *) &event,
-							  sizeof(event),
-							  &read,
-							  NULL);
-		}
-		events = g_list_reverse (events);
-	} else {
-		g_debug ("something else happened");
-		return FALSE;
-	}
-
-	emit_changed_signal_and_free (rfkill, events);
-
-	return TRUE;
-}
-
-static void
-cc_rfkill_glib_init (CcRfkillGlib *rfkill)
-{
-	CcRfkillGlibPrivate *priv;
-
-	priv = CC_RFKILL_GLIB_GET_PRIVATE (rfkill);
-	rfkill->priv = priv;
-	rfkill->priv->fd = -1;
-}
-
-int
-cc_rfkill_glib_open (CcRfkillGlib *rfkill)
-{
-	CcRfkillGlibPrivate *priv;
-	int fd;
-	int ret;
-	GList *events;
-
-	g_return_val_if_fail (RFKILL_IS_GLIB (rfkill), -1);
-	g_return_val_if_fail (rfkill->priv->fd == -1, -1);
-
-	priv = rfkill->priv;
-
-	fd = open("/dev/rfkill", O_RDWR);
-	if (fd < 0) {
-		if (errno == EACCES)
-			g_warning ("Could not open RFKILL control device, please verify your installation");
-		return fd;
-	}
-
-	ret = fcntl(fd, F_SETFL, O_NONBLOCK);
-	if (ret < 0) {
-		g_debug ("Can't set RFKILL control device to non-blocking");
-		close(fd);
-		return ret;
-	}
-
-	events = NULL;
-
-	while (1) {
-		struct rfkill_event event;
-		struct rfkill_event *event_ptr;
-		ssize_t len;
-
-		len = read(fd, &event, sizeof(event));
-		if (len < 0) {
-			if (errno == EAGAIN)
-				break;
-			g_debug ("Reading of RFKILL events failed");
-			break;
-		}
-
-		if (len != RFKILL_EVENT_SIZE_V1) {
-			g_warning ("Wrong size of RFKILL event\n");
-			continue;
-		}
-
-		if (event.op != RFKILL_OP_ADD)
-			continue;
-
-		g_debug ("Read killswitch of type '%s' (idx=%d): soft %d hard %d",
-			 type_to_string (event.type),
-			 event.idx, event.soft, event.hard);
-
-		event_ptr = g_memdup (&event, sizeof(event));
-		events = g_list_prepend (events, event_ptr);
-	}
-
-	/* Setup monitoring */
-	priv->fd = fd;
-	priv->channel = g_io_channel_unix_new (priv->fd);
-	priv->watch_id = g_io_add_watch (priv->channel,
-					 G_IO_IN | G_IO_HUP | G_IO_ERR,
-					 (GIOFunc) event_cb,
-					 rfkill);
-
-	events = g_list_reverse (events);
-	emit_changed_signal_and_free (rfkill, events);
-
-	return fd;
-}
-
-static void
-cc_rfkill_glib_finalize (GObject *object)
-{
-	CcRfkillGlib *rfkill;
-	CcRfkillGlibPrivate *priv;
-
-	rfkill = CC_RFKILL_GLIB (object);
-	priv = rfkill->priv;
-
-	/* cleanup monitoring */
-	if (priv->watch_id > 0) {
-		g_source_remove (priv->watch_id);
-		priv->watch_id = 0;
-		g_io_channel_shutdown (priv->channel, FALSE, NULL);
-		g_io_channel_unref (priv->channel);
-	}
-	close(priv->fd);
-	priv->fd = -1;
-
-	G_OBJECT_CLASS(cc_rfkill_glib_parent_class)->finalize(object);
-}
-
-static void
-cc_rfkill_glib_class_init(CcRfkillGlibClass *klass)
-{
-	GObjectClass *object_class = (GObjectClass *) klass;
-
-	g_type_class_add_private(klass, sizeof(CcRfkillGlibPrivate));
-	object_class->finalize = cc_rfkill_glib_finalize;
-
-	signals[CHANGED] =
-		g_signal_new ("changed",
-			      G_TYPE_FROM_CLASS (klass),
-			      G_SIGNAL_RUN_LAST,
-			      G_STRUCT_OFFSET (CcRfkillGlibClass, changed),
-			      NULL, NULL,
-			      NULL,
-			      G_TYPE_NONE, 1, G_TYPE_POINTER);
-
-}
-
-CcRfkillGlib *
-cc_rfkill_glib_new (void)
-{
-	return CC_RFKILL_GLIB (g_object_new (CC_RFKILL_TYPE_GLIB, NULL));
-}
diff --git a/panels/network/rfkill-glib.h b/panels/network/rfkill-glib.h
deleted file mode 100644
index c2834d4..0000000
--- a/panels/network/rfkill-glib.h
+++ /dev/null
@@ -1,65 +0,0 @@
-/*
- *
- *  gnome-bluetooth - Bluetooth integration for GNOME
- *
- *  Copyright (C) 2012  Bastien Nocera <hadess@hadess.net>
- *
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
- *
- */
-
-#ifndef __CC_RFKILL_GLIB_H
-#define __CC_RFKILL_GLIB_H
-
-#include <glib-object.h>
-#include "rfkill.h"
-
-G_BEGIN_DECLS
-
-#define CC_RFKILL_TYPE_GLIB (cc_rfkill_glib_get_type())
-#define CC_RFKILL_GLIB(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj), \
-		CC_RFKILL_TYPE_GLIB, CcRfkillGlib))
-#define CC_RFKILL_GLIB_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), \
-		CC_RFKILL_TYPE_GLIB, CcRfkillGlibClass))
-#define RFKILL_IS_GLIB(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj), \
-		CC_RFKILL_TYPE_GLIB))
-#define RFKILL_IS_GLIB_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), \
-		CC_RFKILL_TYPE_GLIB))
-#define RFKILL_GET_GLIB_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), \
-		CC_RFKILL_TYPE_GLIB, CcRfkillGlibClass))
-
-typedef struct CcRfkillGlibPrivate CcRfkillGlibPrivate;
-
-typedef struct _CcRfkillGlib {
-	GObject parent;
-	CcRfkillGlibPrivate *priv;
-} CcRfkillGlib;
-
-typedef struct _CcRfkillGlibClass {
-	GObjectClass parent_class;
-
-	void (*changed) (CcRfkillGlib *rfkill, GList *events);
-} CcRfkillGlibClass;
-
-GType cc_rfkill_glib_get_type(void);
-
-CcRfkillGlib *cc_rfkill_glib_new (void);
-int cc_rfkill_glib_open (CcRfkillGlib *rfkill);
-int cc_rfkill_glib_send_event (CcRfkillGlib *rfkill, struct rfkill_event *event);
-
-G_END_DECLS
-
-#endif /* __CC_RFKILL_GLIB_H */
diff --git a/panels/network/rfkill.h b/panels/network/rfkill.h
deleted file mode 100644
index abb2c66..0000000
--- a/panels/network/rfkill.h
+++ /dev/null
@@ -1,107 +0,0 @@
-#ifndef __RFKILL_H
-#define __RFKILL_H
-
-/*
- * Copyright (C) 2006 - 2007 Ivo van Doorn
- * Copyright (C) 2007 Dmitry Torokhov
- * Copyright 2009 Johannes Berg <johannes@sipsolutions.net>
- *
- * Permission to use, copy, modify, and/or distribute this software for any
- * purpose with or without fee is hereby granted, provided that the above
- * copyright notice and this permission notice appear in all copies.
- *
- * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
- * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
- * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
- * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
- * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
- * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
- * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
- */
-
-#include <linux/types.h>
-
-/* define userspace visible states */
-#define RFKILL_STATE_SOFT_BLOCKED	0
-#define RFKILL_STATE_UNBLOCKED		1
-#define RFKILL_STATE_HARD_BLOCKED	2
-
-/**
- * enum rfkill_type - type of rfkill switch.
- *
- * @RFKILL_TYPE_ALL: toggles all switches (requests only - not a switch type)
- * @RFKILL_TYPE_WLAN: switch is on a 802.11 wireless network device.
- * @RFKILL_TYPE_BLUETOOTH: switch is on a bluetooth device.
- * @RFKILL_TYPE_UWB: switch is on a ultra wideband device.
- * @RFKILL_TYPE_WIMAX: switch is on a WiMAX device.
- * @RFKILL_TYPE_WWAN: switch is on a wireless WAN device.
- * @RFKILL_TYPE_GPS: switch is on a GPS device.
- * @RFKILL_TYPE_FM: switch is on a FM radio device.
- * @NUM_RFKILL_TYPES: number of defined rfkill types
- */
-enum rfkill_type {
-	RFKILL_TYPE_ALL = 0,
-	RFKILL_TYPE_WLAN,
-	RFKILL_TYPE_BLUETOOTH,
-	RFKILL_TYPE_UWB,
-	RFKILL_TYPE_WIMAX,
-	RFKILL_TYPE_WWAN,
-	RFKILL_TYPE_GPS,
-	RFKILL_TYPE_FM,
-	NUM_RFKILL_TYPES,
-};
-
-/**
- * enum rfkill_operation - operation types
- * @RFKILL_OP_ADD: a device was added
- * @RFKILL_OP_DEL: a device was removed
- * @RFKILL_OP_CHANGE: a device's state changed -- userspace changes one device
- * @RFKILL_OP_CHANGE_ALL: userspace changes all devices (of a type, or all)
- */
-enum rfkill_operation {
-	RFKILL_OP_ADD = 0,
-	RFKILL_OP_DEL,
-	RFKILL_OP_CHANGE,
-	RFKILL_OP_CHANGE_ALL,
-};
-
-/**
- * struct rfkill_event - events for userspace on /dev/rfkill
- * @idx: index of dev rfkill
- * @type: type of the rfkill struct
- * @op: operation code
- * @hard: hard state (0/1)
- * @soft: soft state (0/1)
- *
- * Structure used for userspace communication on /dev/rfkill,
- * used for events from the kernel and control to the kernel.
- */
-struct rfkill_event {
-	__u32 idx;
-	__u8  type;
-	__u8  op;
-	__u8  soft, hard;
-} __attribute__((packed));
-
-/*
- * We are planning to be backward and forward compatible with changes
- * to the event struct, by adding new, optional, members at the end.
- * When reading an event (whether the kernel from userspace or vice
- * versa) we need to accept anything that's at least as large as the
- * version 1 event size, but might be able to accept other sizes in
- * the future.
- *
- * One exception is the kernel -- we already have two event sizes in
- * that we've made the 'hard' member optional since our only option
- * is to ignore it anyway.
- */
-#define RFKILL_EVENT_SIZE_V1	8
-
-/* ioctl for turning off rfkill-input (if present) */
-#define RFKILL_IOC_MAGIC	'R'
-#define RFKILL_IOC_NOINPUT	1
-#define RFKILL_IOCTL_NOINPUT	_IO(RFKILL_IOC_MAGIC, RFKILL_IOC_NOINPUT)
-
-/* and that's all userspace gets */
-
-#endif /* RFKILL_H */
diff --git a/panels/network/unity-network-panel.desktop.in.in b/panels/network/unity-network-panel.desktop.in.in
deleted file mode 100644
index ddcba17..0000000
--- a/panels/network/unity-network-panel.desktop.in.in
+++ /dev/null
@@ -1,13 +0,0 @@
-[Desktop Entry]
-_Name=Network
-_Comment=Network settings
-Exec=unity-control-center network
-Icon=network-workgroup
-Terminal=false
-Type=Application
-StartupNotify=true
-Categories=GNOME;GTK;Settings;HardwareSettings;X-Unity-Settings-Panel;
-OnlyShowIn=Unity;
-X-Unity-Settings-Panel=network
-# Translators: those are keywords for the network control-center panel
-_Keywords=Network;Wireless;IP;LAN;Proxy;
diff --git a/po/POTFILES.in b/po/POTFILES.in
index cf010d3..917bd48 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -28,20 +28,6 @@ panels/mouse/gnome-mouse-properties.c
 [type: gettext/glade]panels/mouse/gnome-mouse-properties.ui
 panels/mouse/gnome-mouse-test.c
 [type: gettext/glade]panels/mouse/gnome-mouse-test.ui
-panels/network/cc-network-panel.c
-panels/network/unity-network-panel.desktop.in.in
-panels/network/net-device-mobile.c
-panels/network/net-device-wifi.c
-panels/network/net-device-wired.c
-panels/network/net-proxy.c
-panels/network/net-vpn.c
-[type: gettext/glade]panels/network/network-mobile.ui
-[type: gettext/glade]panels/network/network-proxy.ui
-[type: gettext/glade]panels/network/network.ui
-[type: gettext/glade]panels/network/network-vpn.ui
-[type: gettext/glade]panels/network/network-wifi.ui
-[type: gettext/glade]panels/network/network-wired.ui
-panels/network/panel-common.c
 panels/power/cc-power-panel.c
 panels/power/unity-power-panel.desktop.in.in
 [type: gettext/glade]panels/power/power.ui
diff --git a/po/POTFILES.skip b/po/POTFILES.skip
index 3cab6d4..7968016 100644
--- a/po/POTFILES.skip
+++ b/po/POTFILES.skip
@@ -4,7 +4,6 @@ panels/datetime/gnome-datetime-panel.desktop.in
 panels/display/gnome-display-panel.desktop.in
 panels/info/gnome-info-panel.desktop.in
 panels/mouse/gnome-mouse-panel.desktop.in
-panels/network/gnome-network-panel.desktop.in
 panels/online-accounts/gnome-online-accounts-panel.desktop.in
 panels/power/gnome-power-panel.desktop.in
 panels/region/gnome-region-panel.desktop.in
diff --git a/shell/completions/unity-control-center.in b/shell/completions/unity-control-center.in
index 8a43b37..0124770 100644
--- a/shell/completions/unity-control-center.in
+++ b/shell/completions/unity-control-center.in
@@ -24,15 +24,6 @@ _unity_control_center()
 		for i in --overview --version @PANELS@; do
 			if [ $i = $prev ]; then
 				case $i in
-				keyboard)
-					command_list="shortcuts typing"
-					;;
-				network)
-					# FIXME
-					# The first 3 commands need an object path like
-					# /org/freedesktop/NetworkManager/Devices/1
-					command_list="connect-3g connect-8021x-wifi show-device connect-hidden-wifi create-wifi"
-					;;
 				sound)
 					command_list="applications effects input outputs"
 					;;
-- 
1.9.2

