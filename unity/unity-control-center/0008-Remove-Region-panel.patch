From 4b88ecef9e6c6f2bd6d287a013b9182bb27adf10 Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Sat, 5 Apr 2014 19:40:15 -0400
Subject: [PATCH 08/19] Remove Region panel

---
 configure.ac                                      |    7 -
 man/unity-control-center.xml                      |   16 -
 panels/Makefile.am                                |    1 -
 panels/region/.indent.pro                         |    2 -
 panels/region/Makefile.am                         |   60 -
 panels/region/cc-region-keyboard-item.c           |  493 ------
 panels/region/cc-region-keyboard-item.h           |  108 --
 panels/region/cc-region-panel.c                   |  213 ---
 panels/region/cc-region-panel.h                   |   74 -
 panels/region/gnome-region-panel-formats.c        |  423 -----
 panels/region/gnome-region-panel-formats.h        |   31 -
 panels/region/gnome-region-panel-input-chooser.ui |  157 --
 panels/region/gnome-region-panel-input.c          | 1911 ---------------------
 panels/region/gnome-region-panel-input.h          |   36 -
 panels/region/gnome-region-panel-lang.c           |  243 ---
 panels/region/gnome-region-panel-lang.h           |   32 -
 panels/region/gnome-region-panel-system.c         |  588 -------
 panels/region/gnome-region-panel-system.h         |   34 -
 panels/region/gnome-region-panel.ui               | 1432 ---------------
 panels/region/gtkentryaccel.c                     |  653 -------
 panels/region/gtkentryaccel.h                     |   54 -
 panels/region/keyboard-shortcuts.c                |  861 ----------
 panels/region/keyboard-shortcuts.h                |   37 -
 panels/region/region-module.c                     |   41 -
 panels/region/unity-region-panel.desktop.in.in    |   13 -
 panels/region/unity-region-panel.ui               |  649 -------
 panels/region/wm-common.c                         |  184 --
 panels/region/wm-common.h                         |   17 -
 po/POTFILES.in                                    |    9 -
 po/POTFILES.skip                                  |    1 -
 30 files changed, 8380 deletions(-)
 delete mode 100644 panels/region/.indent.pro
 delete mode 100644 panels/region/Makefile.am
 delete mode 100644 panels/region/cc-region-keyboard-item.c
 delete mode 100644 panels/region/cc-region-keyboard-item.h
 delete mode 100644 panels/region/cc-region-panel.c
 delete mode 100644 panels/region/cc-region-panel.h
 delete mode 100644 panels/region/gnome-region-panel-formats.c
 delete mode 100644 panels/region/gnome-region-panel-formats.h
 delete mode 100644 panels/region/gnome-region-panel-input-chooser.ui
 delete mode 100644 panels/region/gnome-region-panel-input.c
 delete mode 100644 panels/region/gnome-region-panel-input.h
 delete mode 100644 panels/region/gnome-region-panel-lang.c
 delete mode 100644 panels/region/gnome-region-panel-lang.h
 delete mode 100644 panels/region/gnome-region-panel-system.c
 delete mode 100644 panels/region/gnome-region-panel-system.h
 delete mode 100644 panels/region/gnome-region-panel.ui
 delete mode 100644 panels/region/gtkentryaccel.c
 delete mode 100644 panels/region/gtkentryaccel.h
 delete mode 100644 panels/region/keyboard-shortcuts.c
 delete mode 100644 panels/region/keyboard-shortcuts.h
 delete mode 100644 panels/region/region-module.c
 delete mode 100644 panels/region/unity-region-panel.desktop.in.in
 delete mode 100644 panels/region/unity-region-panel.ui
 delete mode 100644 panels/region/wm-common.c
 delete mode 100644 panels/region/wm-common.h

diff --git a/configure.ac b/configure.ac
index 45d3c6a..334b36c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -125,11 +125,6 @@ PKG_CHECK_MODULES(INFO_PANEL, $COMMON_MODULES libgtop-2.0 gl x11
 PKG_CHECK_MODULES(MEDIA_PANEL, $COMMON_MODULES)
 PKG_CHECK_MODULES(MOUSE_PANEL, $COMMON_MODULES xi >= 1.2
                   unity-settings-daemon x11)
-PKG_CHECK_MODULES(REGION_PANEL, $COMMON_MODULES
-                  polkit-gobject-1 >= $POLKIT_REQUIRED_VERSION
-                  gnome-desktop-3.0 >= $GNOME_DESKTOP_REQUIRED_VERSION
-                  $IBUS_MODULE
-                  x11)
 PKG_CHECK_MODULES(SCREEN_PANEL, $COMMON_MODULES)
 PKG_CHECK_MODULES(SOUND_PANEL, $COMMON_MODULES libxml-2.0
                   libcanberra-gtk3 >= $CANBERRA_REQUIRED_VERSION
@@ -323,8 +318,6 @@ panels/datetime/Makefile
 panels/datetime/unity-datetime-panel.desktop.in
 panels/display/Makefile
 panels/display/unity-display-panel.desktop.in
-panels/region/Makefile
-panels/region/unity-region-panel.desktop.in
 panels/mouse/Makefile
 panels/mouse/unity-mouse-panel.desktop.in
 panels/sound/Makefile
diff --git a/man/unity-control-center.xml b/man/unity-control-center.xml
index 7312035..1ab9f4a 100644
--- a/man/unity-control-center.xml
+++ b/man/unity-control-center.xml
@@ -124,22 +124,6 @@
                         </varlistentry>
 
                         <varlistentry>
-                                <term><option>region</option></term>
-
-                                <listitem><para>The region panel
-                                contains regional settings such as
-                                the display language, formatting for
-                                times, dates, numbers, and input sources.</para>
-                                <para>You can open this panel on a
-                                specific tab by passing
-                                <option>language</option>,
-                                <option>formats</option>,
-                                <option>layouts</option> or
-                                <option>system</option> as extra
-                                argument.</para></listitem>
-                        </varlistentry>
-
-                        <varlistentry>
                                 <term><option>screen</option></term>
 
                                 <listitem><para>The screen panel contains
diff --git a/panels/Makefile.am b/panels/Makefile.am
index 83984ee..a2fd731 100644
--- a/panels/Makefile.am
+++ b/panels/Makefile.am
@@ -5,7 +5,6 @@ SUBDIRS= \
 	screen \
 	display \
 	mouse \
-	region \
 	info \
 	sound \
 	universal-access \
diff --git a/panels/region/.indent.pro b/panels/region/.indent.pro
deleted file mode 100644
index bdff074..0000000
--- a/panels/region/.indent.pro
+++ /dev/null
@@ -1,2 +0,0 @@
--kr -i8 -pcs -lps -psl
-
diff --git a/panels/region/Makefile.am b/panels/region/Makefile.am
deleted file mode 100644
index 9102897..0000000
--- a/panels/region/Makefile.am
+++ /dev/null
@@ -1,60 +0,0 @@
-# This is used in PANEL_CFLAGS
-cappletname = region
-
-INCLUDES =						\
-	$(PANEL_CFLAGS)					\
-	$(REGION_PANEL_CFLAGS)				\
-	-DGNOMELOCALEDIR="\"$(datadir)/locale\""	\
-	-DGNOMECC_DATA_DIR="\"$(pkgdatadir)\""		\
-	-DGNOMECC_UI_DIR="\"$(uidir)\""			\
-	-I$(srcdir)/../common/				\
-	$(NULL)
-
-ccpanelsdir = $(PANELS_DIR)
-ccpanels_LTLIBRARIES = libregion.la
-
-libregion_la_SOURCES =	\
-	region-module.c \
-	cc-region-panel.c \
-	cc-region-panel.h \
-	gnome-region-panel-formats.c \
-	gnome-region-panel-formats.h \
-	gnome-region-panel-lang.c \
-	gnome-region-panel-lang.h \
-	gnome-region-panel-system.c \
-	gnome-region-panel-system.h \
-	gnome-region-panel-input.c \
-	gnome-region-panel-input.h \
-	cc-region-keyboard-item.c \
-	cc-region-keyboard-item.h \
-	keyboard-shortcuts.c \
-	keyboard-shortcuts.h \
-	gtkentryaccel.c \
-	gtkentryaccel.h \
-	wm-common.c \
-	wm-common.h \
-	$(NULL)
-
-libregion_la_LIBADD = $(PANEL_LIBS) $(REGION_PANEL_LIBS) $(builddir)/../common/liblanguage.la
-
-libregion_la_LDFLAGS = $(PANEL_LDFLAGS)
-
-@INTLTOOL_DESKTOP_RULE@
-
-uidir   = $(pkgdatadir)/ui
-ui_DATA = \
-	gnome-region-panel.ui \
-	unity-region-panel.ui \
-	gnome-region-panel-input-chooser.ui \
-	$(NULL)
-
-desktopdir = $(datadir)/applications
-Desktop_in_files =	\
-	unity-region-panel.desktop.in
-desktop_DATA = $(Desktop_in_files:.desktop.in=.desktop)
-
-CLEANFILES = $(Desktop_in_files) $(desktop_DATA)
-EXTRA_DIST = $(ui_DATA)
-
-
--include $(top_srcdir)/git.mk
diff --git a/panels/region/cc-region-keyboard-item.c b/panels/region/cc-region-keyboard-item.c
deleted file mode 100644
index 4001dd4..0000000
--- a/panels/region/cc-region-keyboard-item.c
+++ /dev/null
@@ -1,493 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#include "config.h"
-
-#include <stdlib.h>
-#include <stdio.h>
-
-#include <gtk/gtk.h>
-#include <gio/gio.h>
-#include <glib/gi18n-lib.h>
-
-#include "cc-region-keyboard-item.h"
-
-#define CC_REGION_KEYBOARD_ITEM_GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_REGION_KEYBOARD_ITEM, CcRegionKeyboardItemPrivate))
-
-#define CUSTOM_KEYS_SCHEMA "org.gnome.settings-daemon.plugins.media-keys.custom-keybinding"
-
-struct CcRegionKeyboardItemPrivate
-{
-  /* properties */
-  int foo;
-
-  /* internal */
-};
-
-enum {
-  PROP_0,
-  PROP_DESCRIPTION,
-  PROP_BINDING,
-  PROP_EDITABLE,
-  PROP_TYPE,
-  PROP_COMMAND
-};
-
-static void cc_region_keyboard_item_class_init (CcRegionKeyboardItemClass *klass);
-static void cc_region_keyboard_item_init       (CcRegionKeyboardItem      *region_keyboard_item);
-static void cc_region_keyboard_item_finalize   (GObject                   *object);
-
-G_DEFINE_TYPE (CcRegionKeyboardItem, cc_region_keyboard_item, G_TYPE_OBJECT)
-
-static gboolean
-binding_from_string (const char      *str,
-                     guint           *accelerator_key,
-                     guint           *keycode,
-                     GdkModifierType *accelerator_mods)
-{
-  g_return_val_if_fail (accelerator_key != NULL, FALSE);
-  guint *keycodes;
-
-  if (str == NULL || strcmp (str, "disabled") == 0)
-    {
-      *accelerator_key = 0;
-      *keycode = 0;
-      *accelerator_mods = 0;
-      return TRUE;
-    }
-
-  gtk_accelerator_parse_with_keycode (str, accelerator_key, &keycodes, accelerator_mods);
-
-  if (keycode != NULL)
-    *keycode = (keycodes ? keycodes[0] : 0);
-  g_free (keycodes);
-
-  if (*accelerator_key == 0)
-    return FALSE;
-  else
-    return TRUE;
-}
-
-static void
-_set_description (CcRegionKeyboardItem *item,
-                  const char           *value)
-{
-  g_free (item->description);
-  item->description = g_strdup (value);
-}
-
-const char *
-cc_region_keyboard_item_get_description (CcRegionKeyboardItem *item)
-{
-  g_return_val_if_fail (CC_IS_REGION_KEYBOARD_ITEM (item), NULL);
-
-  return item->description;
-}
-
-/* wrapper around g_settings_set_str[ing|v] */
-static void
-settings_set_binding (GSettings  *settings,
-                      const char *key,
-		      const char *value)
-{
-  GVariant *variant;
-
-  variant = g_settings_get_value (settings, key);
-
-  if (g_variant_is_of_type (variant, G_VARIANT_TYPE_STRING))
-    g_settings_set_string (settings, key, value);
-  else if (g_variant_is_of_type (variant, G_VARIANT_TYPE_STRING_ARRAY))
-    {
-      char **str_array;
-
-      str_array = g_variant_dup_strv (variant, NULL);
-
-      /* create a space for the new binding if empty */
-      if (*str_array == NULL)
-        {
-          g_free (str_array);
-          str_array = g_new0 (char *, 2);
-        }
-
-      /* replace the first binding */
-      g_free (*str_array);
-      *str_array = g_strdup (value);
-
-      g_settings_set_strv (settings, key, (const char * const *)str_array);
-      g_strfreev (str_array);
-    }
-
-  g_variant_unref (variant);
-}
-
-
-static void
-_set_binding (CcRegionKeyboardItem *item,
-              const char           *value,
-	      gboolean              set_backend)
-{
-  /* don't reassign <Alt_L> or <Alt> key in the callback to the binding itself (as it's invalid for the cell renderer) */
-  if ((g_strcmp0 (value, "<Alt_L>") == 0) || (g_strcmp0 (value, "<Alt>") == 0))
-    return;
-
-  g_free (item->binding);
-  item->binding = g_strdup (value);
-  binding_from_string (item->binding, &item->keyval, &item->keycode, &item->mask);
-
-  const char *key;
-  char *cheated_modifier = NULL;
-  if (g_strcmp0 (item->binding, "Alt_L") == 0)
-    cheated_modifier = g_strdup_printf ("<%s>", item->binding);
-
-  if (set_backend == FALSE)
-    return;
-
-  settings_set_binding (item->settings, item->key, cheated_modifier ? cheated_modifier: item->binding);
-
-  g_free (cheated_modifier);
-}
-
-const char *
-cc_region_keyboard_item_get_binding (CcRegionKeyboardItem *item)
-{
-  g_return_val_if_fail (CC_IS_REGION_KEYBOARD_ITEM (item), NULL);
-
-  return item->binding;
-}
-
-static void
-_set_type (CcRegionKeyboardItem *item,
-           gint                  value)
-{
-  item->type = value;
-}
-
-static void
-_set_command (CcRegionKeyboardItem *item,
-              const char           *value)
-{
-  g_free (item->command);
-  item->command = g_strdup (value);
-}
-
-const char *
-cc_region_keyboard_item_get_command (CcRegionKeyboardItem *item)
-{
-  g_return_val_if_fail (CC_IS_REGION_KEYBOARD_ITEM (item), NULL);
-
-  return item->command;
-}
-
-static void
-cc_region_keyboard_item_set_property (GObject      *object,
-                                      guint         prop_id,
-                                      const GValue *value,
-                                      GParamSpec   *pspec)
-{
-  CcRegionKeyboardItem *self;
-
-  self = CC_REGION_KEYBOARD_ITEM (object);
-
-  switch (prop_id) {
-  case PROP_DESCRIPTION:
-    _set_description (self, g_value_get_string (value));
-    break;
-  case PROP_BINDING:
-    _set_binding (self, g_value_get_string (value), TRUE);
-    break;
-  case PROP_COMMAND:
-    _set_command (self, g_value_get_string (value));
-    break;
-  case PROP_TYPE:
-    _set_type (self, g_value_get_int (value));
-    break;
-  default:
-    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-    break;
-  }
-}
-
-static void
-cc_region_keyboard_item_get_property (GObject    *object,
-                                      guint       prop_id,
-                                      GValue     *value,
-                                      GParamSpec *pspec)
-{
-  CcRegionKeyboardItem *self;
-
-  self = CC_REGION_KEYBOARD_ITEM (object);
-
-  switch (prop_id) {
-  case PROP_DESCRIPTION:
-    g_value_set_string (value, self->description);
-    break;
-  case PROP_BINDING:
-    g_value_set_string (value, self->binding);
-    break;
-  case PROP_EDITABLE:
-    g_value_set_boolean (value, self->editable);
-    break;
-  case PROP_COMMAND:
-    g_value_set_string (value, self->command);
-    break;
-  default:
-    G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
-    break;
-  }
-}
-
-static GObject *
-cc_region_keyboard_item_constructor (GType                  type,
-                                     guint                  n_construct_properties,
-                                     GObjectConstructParam *construct_properties)
-{
-  CcRegionKeyboardItem      *region_keyboard_item;
-
-  region_keyboard_item = CC_REGION_KEYBOARD_ITEM (G_OBJECT_CLASS (cc_region_keyboard_item_parent_class)->constructor (type,
-                                                                                                 n_construct_properties,
-                                                                                                 construct_properties));
-
-  return G_OBJECT (region_keyboard_item);
-}
-
-static void
-cc_region_keyboard_item_class_init (CcRegionKeyboardItemClass *klass)
-{
-  GObjectClass  *object_class = G_OBJECT_CLASS (klass);
-
-  object_class->get_property = cc_region_keyboard_item_get_property;
-  object_class->set_property = cc_region_keyboard_item_set_property;
-  object_class->constructor = cc_region_keyboard_item_constructor;
-  object_class->finalize = cc_region_keyboard_item_finalize;
-
-  g_object_class_install_property (object_class,
-                                   PROP_DESCRIPTION,
-                                   g_param_spec_string ("description",
-                                                        "description",
-                                                        "description",
-                                                        NULL,
-                                                        G_PARAM_READWRITE));
-
-  g_object_class_install_property (object_class,
-                                   PROP_BINDING,
-                                   g_param_spec_string ("binding",
-                                                        "binding",
-                                                        "binding",
-                                                        NULL,
-                                                        G_PARAM_READWRITE));
-
-  g_object_class_install_property (object_class,
-                                   PROP_EDITABLE,
-                                   g_param_spec_boolean ("editable",
-                                                         NULL,
-                                                         NULL,
-                                                         FALSE,
-                                                         G_PARAM_READABLE));
-
-  g_object_class_install_property (object_class,
-                                   PROP_TYPE,
-                                   g_param_spec_int ("type",
-                                                     NULL,
-                                                     NULL,
-                                                     CC_REGION_KEYBOARD_ITEM_TYPE_NONE,
-                                                     CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS,
-                                                     CC_REGION_KEYBOARD_ITEM_TYPE_NONE,
-                                                     G_PARAM_CONSTRUCT_ONLY | G_PARAM_WRITABLE));
-
-  g_object_class_install_property (object_class,
-                                   PROP_COMMAND,
-                                   g_param_spec_string ("command",
-                                                        "command",
-                                                        "command",
-                                                        NULL,
-                                                        G_PARAM_READWRITE));
-
-  g_type_class_add_private (klass, sizeof (CcRegionKeyboardItemPrivate));
-}
-
-static void
-cc_region_keyboard_item_init (CcRegionKeyboardItem *item)
-{
-  item->priv = CC_REGION_KEYBOARD_ITEM_GET_PRIVATE (item);
-}
-
-static void
-cc_region_keyboard_item_finalize (GObject *object)
-{
-  CcRegionKeyboardItem *item;
-
-  g_return_if_fail (object != NULL);
-  g_return_if_fail (CC_IS_REGION_KEYBOARD_ITEM (object));
-
-  item = CC_REGION_KEYBOARD_ITEM (object);
-
-  g_return_if_fail (item->priv != NULL);
-
-  if (item->settings != NULL)
-    g_object_unref (item->settings);
-
-  /* Free memory */
-  g_free (item->binding);
-  g_free (item->gettext_package);
-  g_free (item->gsettings_path);
-  g_free (item->description);
-  g_free (item->command);
-  g_free (item->schema);
-  g_free (item->key);
-
-  G_OBJECT_CLASS (cc_region_keyboard_item_parent_class)->finalize (object);
-}
-
-CcRegionKeyboardItem *
-cc_region_keyboard_item_new (CcRegionKeyboardItemType type)
-{
-  GObject *object;
-
-  object = g_object_new (CC_TYPE_REGION_KEYBOARD_ITEM,
-                         "type", type,
-                         NULL);
-
-  return CC_REGION_KEYBOARD_ITEM (object);
-}
-
-/* wrapper around g_settings_get_str[ing|v] */
-static char *
-settings_get_binding (GSettings  *settings,
-                      const char *key)
-{
-  GVariant *variant;
-  char *value = NULL;
-
-  variant = g_settings_get_value (settings, key);
-  if (g_variant_is_of_type (variant, G_VARIANT_TYPE_STRING))
-    value = g_variant_dup_string (variant, NULL);
-  else if (g_variant_is_of_type (variant, G_VARIANT_TYPE_STRING_ARRAY))
-    {
-      const char **str_array;
-
-      str_array = g_variant_get_strv (variant, NULL);
-      value = g_strdup (str_array[0]);
-    }
-  g_variant_unref (variant);
-
-  return value;
-}
-
-static void
-binding_changed (GSettings            *settings,
-                 const char           *key,
-                 CcRegionKeyboardItem *item)
-{
-  char *value;
-
-  value = settings_get_binding (item->settings, item->key);
-  item->editable = g_settings_is_writable (item->settings, item->key);
-  _set_binding (item, value, FALSE);
-  g_free (value);
-  g_object_notify (G_OBJECT (item), "binding");
-}
-
-gboolean
-cc_region_keyboard_item_load_from_gsettings_path (CcRegionKeyboardItem *item,
-                                                  const char           *path,
-                                                  gboolean              reset)
-{
-  item->schema = g_strdup (CUSTOM_KEYS_SCHEMA);
-  item->gsettings_path = g_strdup (path);
-  item->key = g_strdup ("binding");
-  item->settings = g_settings_new_with_path (item->schema, path);
-  item->editable = g_settings_is_writable (item->settings, item->key);
-  item->desc_editable = g_settings_is_writable (item->settings, "name");
-  item->cmd_editable = g_settings_is_writable (item->settings, "command");
-
-  if (reset)
-    {
-      g_settings_reset (item->settings, "name");
-      g_settings_reset (item->settings, "command");
-      g_settings_reset (item->settings, "binding");
-    }
-
-  g_settings_bind (item->settings, "name",
-                   G_OBJECT (item), "description", G_SETTINGS_BIND_DEFAULT);
-  g_settings_bind (item->settings, "command",
-                   G_OBJECT (item), "command", G_SETTINGS_BIND_DEFAULT);
-
-  item->binding = settings_get_binding (item->settings, item->key);
-  binding_from_string (item->binding, &item->keyval, &item->keycode, &item->mask);
-  g_signal_connect (G_OBJECT (item->settings), "changed::binding",
-		    G_CALLBACK (binding_changed), item);
-
-  return TRUE;
-}
-
-gboolean
-cc_region_keyboard_item_load_from_gsettings (CcRegionKeyboardItem *item,
-                                             const char           *description,
-                                             const char           *schema,
-                                             const char           *key)
-{
-  char *signal_name;
-
-  item->schema = g_strdup (schema);
-  item->key = g_strdup (key);
-  item->description = g_strdup (description);
-
-  item->settings = g_settings_new (item->schema);
-  item->binding = settings_get_binding (item->settings, item->key);
-  item->editable = g_settings_is_writable (item->settings, item->key);
-
-  if ((g_strcmp0 (item->binding, "<Alt>") == 0) || (g_strcmp0 (item->binding, "<Alt_L>") == 0))
-    {
-      g_free (item->binding);
-      item->binding = g_strdup ("Alt_L");
-    }
-
-  binding_from_string (item->binding, &item->keyval, &item->keycode, &item->mask);
-
-  signal_name = g_strdup_printf ("changed::%s", item->key);
-  g_signal_connect (G_OBJECT (item->settings), signal_name,
-		    G_CALLBACK (binding_changed), item);
-  g_free (signal_name);
-
-  return TRUE;
-}
-
-gboolean
-cc_region_keyboard_item_equal (CcRegionKeyboardItem *a,
-                               CcRegionKeyboardItem *b)
-{
-  if (a->type != b->type)
-    return FALSE;
-  switch (a->type)
-    {
-      case CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH:
-	return g_str_equal (a->gsettings_path, b->gsettings_path);
-      case CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS:
-	return (g_str_equal (a->schema, b->schema) &&
-		g_str_equal (a->key, b->key));
-      default:
-	g_assert_not_reached ();
-    }
-
-}
-
-/*
- * vim: sw=2 ts=8 cindent noai bs=2
- */
diff --git a/panels/region/cc-region-keyboard-item.h b/panels/region/cc-region-keyboard-item.h
deleted file mode 100644
index 427ddb9..0000000
--- a/panels/region/cc-region-keyboard-item.h
+++ /dev/null
@@ -1,108 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#ifndef __CC_REGION_KEYBOARD_ITEM_H
-#define __CC_REGION_KEYBOARD_ITEM_H
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define CC_TYPE_REGION_KEYBOARD_ITEM         (cc_region_keyboard_item_get_type ())
-#define CC_REGION_KEYBOARD_ITEM(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), CC_TYPE_REGION_KEYBOARD_ITEM, CcRegionKeyboardItem))
-#define CC_REGION_KEYBOARD_ITEM_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), CC_TYPE_REGION_KEYBOARD_ITEM, CcRegionKeyboardItemClass))
-#define CC_IS_REGION_KEYBOARD_ITEM(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), CC_TYPE_REGION_KEYBOARD_ITEM))
-#define CC_IS_REGION_KEYBOARD_ITEM_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), CC_TYPE_REGION_KEYBOARD_ITEM))
-#define CC_REGION_KEYBOARD_ITEM_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), CC_TYPE_REGION_KEYBOARD_ITEM, CcRegionKeyboardItemClass))
-
-typedef enum
-{
-  BINDING_GROUP_SYSTEM,
-  BINDING_GROUP_APPS,
-  BINDING_GROUP_SEPARATOR,
-  BINDING_GROUP_USER,
-} BindingGroupType;
-
-typedef enum {
-	CC_REGION_KEYBOARD_ITEM_TYPE_NONE = 0,
-	CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH,
-	CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS
-} CcRegionKeyboardItemType;
-
-typedef struct CcRegionKeyboardItemPrivate CcRegionKeyboardItemPrivate;
-
-typedef struct
-{
-  GObject                parent;
-  CcRegionKeyboardItemPrivate *priv;
-
-  /* Move to priv */
-  CcRegionKeyboardItemType type;
-
-  /* common */
-  /* FIXME move to priv? */
-  guint keyval;
-  guint keycode;
-  GdkModifierType mask;
-  BindingGroupType group;
-  GtkTreeModel *model;
-  char *description;
-  char *gettext_package;
-  char *binding;
-  gboolean editable;
-
-  /* GSettings path */
-  char *gsettings_path;
-  gboolean desc_editable;
-  char *command;
-  gboolean cmd_editable;
-
-  /* GSettings */
-  char *schema;
-  char *key;
-  GSettings *settings;
-} CcRegionKeyboardItem;
-
-typedef struct
-{
-  GObjectClass   parent_class;
-} CcRegionKeyboardItemClass;
-
-GType                  cc_region_keyboard_item_get_type                 (void);
-
-CcRegionKeyboardItem * cc_region_keyboard_item_new                      (CcRegionKeyboardItemType  type);
-gboolean               cc_region_keyboard_item_load_from_gsettings_path (CcRegionKeyboardItem     *item,
-                                                                         const char               *path,
-                                                                         gboolean                  reset);
-gboolean               cc_region_keyboard_item_load_from_gsettings      (CcRegionKeyboardItem     *item,
-                                                                         const char               *description,
-                                                                         const char               *schema,
-                                                                         const char               *key);
-
-const char *           cc_region_keyboard_item_get_description          (CcRegionKeyboardItem     *item);
-const char *           cc_region_keyboard_item_get_binding              (CcRegionKeyboardItem     *item);
-const char *           cc_region_keyboard_item_get_command              (CcRegionKeyboardItem     *item);
-
-gboolean               cc_region_keyboard_item_equal                    (CcRegionKeyboardItem     *a,
-                                                                         CcRegionKeyboardItem     *b);
-
-G_END_DECLS
-
-#endif /* __CC_REGION_KEYBOARD_ITEM_H */
diff --git a/panels/region/cc-region-panel.c b/panels/region/cc-region-panel.c
deleted file mode 100644
index c9732e5..0000000
--- a/panels/region/cc-region-panel.c
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Copyright (C) 2010 Intel, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Sergey Udaltsov <svu@gnome.org>
- *
- */
-
-#include "cc-region-panel.h"
-#include <gtk/gtk.h>
-
-#include "gnome-region-panel-input.h"
-#include "gnome-region-panel-lang.h"
-#include "gnome-region-panel-formats.h"
-#include "gnome-region-panel-system.h"
-#include "gtkentryaccel.h"
-
-CC_PANEL_REGISTER (CcRegionPanel, cc_region_panel)
-
-#define REGION_PANEL_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_REGION_PANEL, CcRegionPanelPrivate))
-
-struct _CcRegionPanelPrivate {
-	GtkBuilder *builder;
-};
-
-enum {
-	PROP_0,
-	PROP_ARGV
-};
-
-enum {
-	LANGUAGE_PAGE,
-	FORMATS_PAGE,
-	LAYOUTS_PAGE,
-	SYSTEM_PAGE
-};
-
-#define INDICATOR_KEYBOARD_SCHEMA_ID "com.canonical.indicator.keyboard"
-
-static gboolean
-is_unity (void)
-{
-	return g_strcmp0 (g_getenv ("XDG_CURRENT_DESKTOP"), "Unity") == 0;
-}
-
-static gboolean
-has_indicator_keyboard (void)
-{
-	GSettingsSchema *schema;
-
-	if (!is_unity ())
-		return FALSE;
-
-	schema = g_settings_schema_source_lookup (g_settings_schema_source_get_default (), INDICATOR_KEYBOARD_SCHEMA_ID, TRUE);
-	if (schema) {
-		g_settings_schema_unref (schema);
-		return TRUE;
-	}
-
-	return FALSE;
-}
-
-static void
-cc_region_panel_set_page (CcRegionPanel *panel,
-			  const char    *page)
-{
-	GtkWidget *notebook;
-	int page_num;
-
-	if (g_strcmp0 (page, "formats") == 0)
-		page_num = FORMATS_PAGE;
-	else if (g_strcmp0 (page, "layouts") == 0)
-		page_num = LAYOUTS_PAGE;
-	else if (g_strcmp0 (page, "system") == 0)
-		page_num = SYSTEM_PAGE;
-	else
-		page_num = LANGUAGE_PAGE;
-
-	notebook = GTK_WIDGET (gtk_builder_get_object (panel->priv->builder, "region_notebook"));
-	gtk_notebook_set_current_page (GTK_NOTEBOOK (notebook), page_num);
-}
-
-static void
-cc_region_panel_set_property (GObject * object,
-			      guint property_id,
-			      const GValue * value,
-			      GParamSpec * pspec)
-{
-	CcRegionPanel *self;
-
-	self = CC_REGION_PANEL (object);
-
-	switch (property_id) {
-        case PROP_ARGV: {
-                gchar **args;
-
-                args = g_value_get_boxed (value);
-
-                if (args && args[0]) {
-                        cc_region_panel_set_page (self, args[0]);
-                }
-                break;
-        }
-	default:
-		G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id,
-						   pspec);
-	}
-}
-
-static void
-cc_region_panel_finalize (GObject * object)
-{
-	CcRegionPanel *panel;
-
-	panel = CC_REGION_PANEL (object);
-
-	if (panel->priv && panel->priv->builder)
-		g_object_unref (panel->priv->builder);
-
-	G_OBJECT_CLASS (cc_region_panel_parent_class)->finalize (object);
-}
-
-static const char *
-cc_region_panel_get_help_uri (CcPanel *panel)
-{
-  return "help:gnome-help/prefs-language";
-}
-
-static void
-cc_region_panel_class_init (CcRegionPanelClass * klass)
-{
-	GObjectClass *object_class = G_OBJECT_CLASS (klass);
-	CcPanelClass * panel_class = CC_PANEL_CLASS (klass);
-
-	g_type_class_add_private (klass, sizeof (CcRegionPanelPrivate));
-
-	panel_class->get_help_uri = cc_region_panel_get_help_uri;
-
-	object_class->set_property = cc_region_panel_set_property;
-	object_class->finalize = cc_region_panel_finalize;
-
-	g_object_class_override_property (object_class, PROP_ARGV, "argv");
-}
-
-static void
-cc_region_panel_init (CcRegionPanel * self)
-{
-	CcRegionPanelPrivate *priv;
-	GtkWidget *prefs_widget;
-	GError *error = NULL;
-
-	GTK_TYPE_ENTRY_ACCEL;
-
-	priv = self->priv = REGION_PANEL_PRIVATE (self);
-
-	priv->builder = gtk_builder_new ();
-
-	if (has_indicator_keyboard ())
-		gtk_builder_add_from_file (priv->builder,
-					   GNOMECC_UI_DIR "/unity-region-panel.ui",
-					   &error);
-	else
-		gtk_builder_add_from_file (priv->builder,
-					   GNOMECC_UI_DIR "/gnome-region-panel.ui",
-					   &error);
-
-	if (error != NULL) {
-		g_warning ("Error loading UI file: %s", error->message);
-		g_error_free (error);
-		return;
-	}
-
-	if (!is_unity ())
-		prefs_widget = (GtkWidget *) gtk_builder_get_object (priv->builder,
-								     "region_notebook");
-	else
-		prefs_widget = (GtkWidget *) gtk_builder_get_object (priv->builder,
-								     "vbox5");
-
-	gtk_widget_set_size_request (GTK_WIDGET (prefs_widget), -1, 400);
-
-	gtk_widget_reparent (prefs_widget, GTK_WIDGET (self));
-
-        setup_input_tabs (priv->builder, self);
-
-	if (!is_unity ()) {
-		setup_language (priv->builder);
-		setup_formats (priv->builder);
-		setup_system (priv->builder);
-	}
-}
-
-void
-cc_region_panel_register (GIOModule * module)
-{
-	cc_region_panel_register_type (G_TYPE_MODULE (module));
-	g_io_extension_point_implement (CC_SHELL_PANEL_EXTENSION_POINT,
-					CC_TYPE_REGION_PANEL,
-					"region", 0);
-}
diff --git a/panels/region/cc-region-panel.h b/panels/region/cc-region-panel.h
deleted file mode 100644
index c67b18e..0000000
--- a/panels/region/cc-region-panel.h
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (C) 2010 Intel, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Sergey Udaltsov <svu@gnome.org>
- *
- */
-
-
-#ifndef _CC_REGION_PANEL_H
-#define _CC_REGION_PANEL_H
-
-#include <shell/cc-panel.h>
-
-G_BEGIN_DECLS
-
-#define CC_TYPE_REGION_PANEL cc_region_panel_get_type()
-
-#define CC_REGION_PANEL(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
-  CC_TYPE_REGION_PANEL, CcRegionPanel))
-
-#define CC_REGION_PANEL_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST ((klass), \
-  CC_TYPE_REGION_PANEL, CcRegionPanelClass))
-
-#define CC_IS_REGION_PANEL(obj) \
-  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
-  CC_TYPE_REGION_PANEL))
-
-#define CC_IS_REGION_PANEL_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
-  CC_TYPE_REGION_PANEL))
-
-#define CC_REGION_PANEL_GET_CLASS(obj) \
-  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
-  CC_TYPE_REGION_PANEL, CcRegionPanelClass))
-
-typedef struct _CcRegionPanel CcRegionPanel;
-typedef struct _CcRegionPanelClass CcRegionPanelClass;
-typedef struct _CcRegionPanelPrivate CcRegionPanelPrivate;
-
-struct _CcRegionPanel
-{
-  CcPanel parent;
-
-  CcRegionPanelPrivate *priv;
-};
-
-struct _CcRegionPanelClass
-{
-  CcPanelClass parent_class;
-};
-
-GType cc_region_panel_get_type (void) G_GNUC_CONST;
-
-void  cc_region_panel_register (GIOModule *module);
-
-G_END_DECLS
-
-#endif /* _CC_REGION_PANEL_H */
diff --git a/panels/region/gnome-region-panel-formats.c b/panels/region/gnome-region-panel-formats.c
deleted file mode 100644
index 1f28de6..0000000
--- a/panels/region/gnome-region-panel-formats.c
+++ /dev/null
@@ -1,423 +0,0 @@
-/*
- * Copyright (C) 2011 Rodrigo Moya
- *
- * Written by: Rodrigo Moya <rodrigo@gnome.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <glib/gi18n-lib.h>
-#include <locale.h>
-#include <langinfo.h>
-#include <stdlib.h>
-#include "cc-common-language.h"
-#include "cc-language-chooser.h"
-#include "gdm-languages.h"
-#include "gnome-region-panel-formats.h"
-#include "gnome-region-panel-system.h"
-
-static void
-display_date (GtkLabel *label, GDateTime *dt, const gchar *format)
-{
-	gchar *s;
-
-	s = g_date_time_format (dt, format);
-	s = g_strstrip (s);
-	gtk_label_set_text (label, s);
-	g_free (s);
-}
-
-static void
-select_region (GtkTreeView *treeview, const gchar *lang)
-{
-        GtkTreeModel *model;
-        GtkTreeSelection *selection;
-        GtkTreeIter iter;
-        GtkTreePath *path;
-        gboolean cont;
-
-        model = gtk_tree_view_get_model (treeview);
-        selection = gtk_tree_view_get_selection (treeview);
-        cont = gtk_tree_model_get_iter_first (model, &iter);
-        while (cont) {
-                gchar *locale;
-
-                gtk_tree_model_get (model, &iter, 0, &locale, -1);
-                if (g_strcmp0 (locale, lang) == 0) {
-                        gtk_tree_selection_select_iter (selection, &iter);
-                        path = gtk_tree_model_get_path (model, &iter);
-                        gtk_tree_view_scroll_to_cell (treeview, path, NULL, FALSE, 0.0, 0.0);
-                        gtk_tree_path_free (path);
-                        g_free (locale);
-                        break;
-                }
-                g_free (locale);
-
-                cont = gtk_tree_model_iter_next (model, &iter);
-        }
-}
-
-static void
-update_examples_cb (GtkTreeSelection *selection, gpointer user_data)
-{
-	GtkBuilder *builder = GTK_BUILDER (user_data);
-        GtkTreeModel *model;
-        GtkTreeIter iter;
-        gchar *active_id;
-	gchar *locale;
-	GDateTime *dt;
-	gchar *s;
-	struct lconv *num_info;
-	const char *fmt;
-
-        if (!gtk_tree_selection_get_selected (selection, &model, &iter)) {
-                return;
-        }
-        gtk_tree_model_get (model, &iter, 0, &active_id, -1);
-
-	locale = g_strdup (setlocale (LC_TIME, NULL));
-        setlocale (LC_TIME, active_id);
-
-	dt = g_date_time_new_now_local ();
-
-	/* Display dates */
-	display_date (GTK_LABEL (gtk_builder_get_object (builder, "full_date_format")), dt, "%A %e %B %Y");
-	display_date (GTK_LABEL (gtk_builder_get_object (builder, "full_day_format")), dt, "%e %B %Y");
-	display_date (GTK_LABEL (gtk_builder_get_object (builder, "short_day_format")), dt, "%e %b %Y");
-	display_date (GTK_LABEL (gtk_builder_get_object (builder, "shortest_day_format")), dt, "%x");
-
-	/* Display times */
-	display_date (GTK_LABEL (gtk_builder_get_object (builder, "full_time_format")), dt, "%r %Z");
-	display_date (GTK_LABEL (gtk_builder_get_object (builder, "short_time_format")), dt, "%X");
-
-	setlocale (LC_TIME, locale);
-	g_free (locale);
-
-	/* Display numbers */
-	locale = g_strdup (setlocale (LC_NUMERIC, NULL));
-	setlocale (LC_NUMERIC, active_id);
-
-	s = g_strdup_printf ("%'.2f", 123456789.00);
-	gtk_label_set_text (GTK_LABEL (gtk_builder_get_object (builder, "numbers_format")), s);
-	g_free (s);
-
-	setlocale (LC_NUMERIC, locale);
-	g_free (locale);
-
-	/* Display currency */
-	locale = g_strdup (setlocale (LC_MONETARY, NULL));
-	setlocale (LC_MONETARY, active_id);
-
-	num_info = localeconv ();
-	if (num_info != NULL) {
-		gtk_label_set_text (GTK_LABEL (gtk_builder_get_object (builder, "currency_format")), num_info->currency_symbol);
-	}
-
-	setlocale (LC_MONETARY, locale);
-	g_free (locale);
-
-	/* Display measurement */
-#ifdef LC_MEASUREMENT
-	locale = g_strdup (setlocale (LC_MEASUREMENT, NULL));
-	setlocale (LC_MEASUREMENT, active_id);
-
-	fmt = nl_langinfo (_NL_MEASUREMENT_MEASUREMENT);
-	if (fmt && *fmt == 2)
-		gtk_label_set_text (GTK_LABEL (gtk_builder_get_object (builder, "measurement_format")), _("Imperial"));
-	else
-		gtk_label_set_text (GTK_LABEL (gtk_builder_get_object (builder, "measurement_format")), _("Metric"));
-
-	setlocale (LC_MEASUREMENT, locale);
-	g_free (locale);
-#endif
-        g_free (active_id);
-}
-
-static void
-set_formats_locale (const gchar *formats_locale)
-{
-	GDBusProxy  *proxy;
-	GError      *error = NULL;
-	gchar       *user_path;
-	GVariant    *ret;
-
-	user_path = g_strdup_printf ("/org/freedesktop/Accounts/User%i", getuid ());
-	proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
-	                                       G_DBUS_PROXY_FLAGS_NONE,
-	                                       NULL,
-	                                       "org.freedesktop.Accounts",
-	                                       user_path,
-	                                       "org.freedesktop.Accounts.User",
-	                                       NULL,
-	                                       &error);
-	if (!proxy) {
-		g_warning ("Couldn't get accountsservice proxy for %s: %s", user_path, error->message);
-		g_error_free (error);
-		g_free (user_path);
-		return;
-	}
-
-	ret = g_dbus_proxy_call_sync (proxy,
-	                              "SetFormatsLocale",
-	                              g_variant_new ("(s)", formats_locale),
-	                              G_DBUS_CALL_FLAGS_NONE,
-	                              -1,
-	                              NULL,
-	                              &error);
-	if (!ret) {
-		g_warning ("Couldn't set FormatsLocale: %s", error->message);
-		g_error_free (error);
-	} else
-		g_variant_unref (ret);
-
-	g_object_unref (proxy);
-	g_free (user_path);
-}
-
-static void
-update_settings_cb (GtkTreeSelection *selection, gpointer user_data)
-{
-        GtkBuilder *builder = GTK_BUILDER (user_data);
-        GtkTreeModel *model;
-        GtkTreeIter iter;
-        gchar *active_id;
-        GtkWidget *treeview;
-        GSettings *locale_settings;
-
-        if (!gtk_tree_selection_get_selected (selection, &model, &iter)) {
-                return;
-        }
-        gtk_tree_model_get (model, &iter, 0, &active_id, -1);
-
-        treeview = GTK_WIDGET (gtk_builder_get_object (builder, "region_selector"));
-
-        locale_settings = g_object_get_data (G_OBJECT (treeview), "settings");
-
-        set_formats_locale (active_id);
-        locale_settings_changed (locale_settings, NULL, builder);
-
-        g_free (active_id);
-}
-
-static void
-setting_changed_cb (GSettings *locale_settings, gchar *key, GtkTreeView *treeview)
-{
-        gchar *current_setting;
-
-        current_setting = cc_common_language_get_property ("FormatsLocale");
-        select_region (treeview, current_setting);
-        g_free (current_setting);
-}
-
-static gint
-sort_regions (GtkTreeModel *model,
-              GtkTreeIter  *a,
-              GtkTreeIter  *b,
-              gpointer      data)
-{
-        gchar *la, *lb;
-        gint result;
-
-        gtk_tree_model_get (model, a, 1, &la, -1);
-        gtk_tree_model_get (model, b, 1, &lb, -1);
-
-        result = strcmp (la, lb);
-
-        g_free (la);
-        g_free (lb);
-
-        return result;
-}
-
-static void
-populate_regions (GtkBuilder *builder, const gchar *current_lang)
-{
-        gchar *current_region;
-        GHashTable *ht;
-        GHashTableIter htiter;
-        GtkTreeModel *model;
-        gchar *name, *language;
-        GtkWidget *treeview;
-        GtkTreeIter iter;
-        GtkTreeSelection *selection;
-
-        treeview = GTK_WIDGET (gtk_builder_get_object (builder, "region_selector"));
-        /* don't update the setting just because the list is repopulated */
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview));
-        g_signal_handlers_block_by_func (selection, update_settings_cb, builder);
-
-        model = gtk_tree_view_get_model (GTK_TREE_VIEW (treeview));
-
-        ht = cc_common_language_get_initial_regions (current_lang);
-
-        current_region = cc_common_language_get_property ("FormatsLocale");
-        if (!current_region || !current_region[0]) {
-                current_region = g_strdup (current_lang);
-        }
-        else if (!g_hash_table_lookup (ht, current_region)) {
-                name = gdm_get_region_from_name (current_region, NULL);
-                g_hash_table_insert (ht, g_strdup (current_region), name);
-        }
-
-        gtk_list_store_clear (GTK_LIST_STORE (model));
-
-        g_hash_table_iter_init (&htiter, ht);
-        while (g_hash_table_iter_next (&htiter, (gpointer *)&name, (gpointer *)&language)) {
-                gtk_list_store_append (GTK_LIST_STORE (model), &iter);
-                gtk_list_store_set (GTK_LIST_STORE (model), &iter, 0, name, 1, language, -1);
-        }
-        g_hash_table_unref (ht);
-
-        select_region (GTK_TREE_VIEW (treeview), current_region);
-
-        g_free (current_region);
-
-        g_signal_handlers_unblock_by_func (selection, update_settings_cb, builder);
-}
-
-static void
-region_response (GtkDialog *dialog,
-                 gint       response_id,
-                 GtkWidget *treeview)
-{
-        gchar *lang;
-        GtkTreeModel *model;
-        GtkTreeSelection *selection;
-        GtkTreeIter iter;
-
-        gtk_widget_hide (GTK_WIDGET (dialog));
-
-        if (response_id != GTK_RESPONSE_OK) {
-                return;
-        }
-
-        lang = cc_language_chooser_get_language (GTK_WIDGET (dialog));
-
-        if (lang == NULL) {
-                return;
-        }
-        model = gtk_tree_view_get_model (GTK_TREE_VIEW (treeview));
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview));
-
-        if (cc_common_language_get_iter_for_region (model, lang, &iter)) {
-                gtk_tree_selection_select_iter (selection, &iter);
-        }
-
-        gtk_widget_grab_focus (treeview);
-
-        g_free (lang);
-}
-
-static void
-add_region (GtkWidget *button, GtkWidget *treeview)
-{
-        GtkWidget *toplevel;
-        GtkWidget *chooser;
-
-        toplevel = gtk_widget_get_toplevel (button);
-        chooser = g_object_get_data (G_OBJECT (button), "chooser");
-        if (chooser == NULL) {
-                chooser = cc_language_chooser_new (toplevel, TRUE);
-
-                g_signal_connect (chooser, "response",
-                                  G_CALLBACK (region_response), treeview);
-                g_signal_connect (chooser, "delete-event",
-                                  G_CALLBACK (gtk_widget_hide_on_delete), NULL);
-
-                g_object_set_data_full (G_OBJECT (button), "chooser",
-                                        chooser, (GDestroyNotify)gtk_widget_destroy);
-        }
-        else {
-                cc_language_chooser_clear_filter (chooser);
-        }
-
-        gdk_window_set_cursor (gtk_widget_get_window (toplevel), NULL);
-        gtk_window_present (GTK_WINDOW (chooser));
-}
-
-void
-setup_formats (GtkBuilder *builder)
-{
-	GtkWidget *treeview;
-	gchar *current_lang;
-	GtkTreeModel *model;
-        GtkCellRenderer *cell;
-        GtkTreeViewColumn *column;
-        GtkWidget *widget;
-        GtkStyleContext *context;
-        GSettings *locale_settings;
-        GtkTreeSelection *selection;
-
-	locale_settings = g_settings_new ("org.gnome.system.locale");
-
-        /* Setup junction between toolbar and treeview */
-        widget = (GtkWidget *)gtk_builder_get_object (builder, "region-swindow");
-        context = gtk_widget_get_style_context (widget);
-        gtk_style_context_set_junction_sides (context, GTK_JUNCTION_BOTTOM);
-        widget = (GtkWidget *)gtk_builder_get_object (builder, "region-toolbar");
-        context = gtk_widget_get_style_context (widget);
-        gtk_style_context_set_junction_sides (context, GTK_JUNCTION_TOP);
-
-	/* Setup formats selector */
-	treeview = GTK_WIDGET (gtk_builder_get_object (builder, "region_selector"));
-        cell = gtk_cell_renderer_text_new ();
-        g_object_set (cell,
-                      "width-chars", 40,
-                      "ellipsize", PANGO_ELLIPSIZE_END,
-                      NULL);
-        column = gtk_tree_view_column_new_with_attributes (NULL, cell, "text", 1, NULL);
-        gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-
-        model = (GtkTreeModel*)gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_STRING);
-        gtk_tree_sortable_set_default_sort_func (GTK_TREE_SORTABLE (model),
-                                                 sort_regions, NULL, NULL);
-        gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (model),
-                                              GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID,
-                                              GTK_SORT_ASCENDING);
-        gtk_tree_view_set_model (GTK_TREE_VIEW (treeview), model);
-
-        g_object_set_data_full (G_OBJECT (treeview), "settings", locale_settings, g_object_unref);
-
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview));
-        g_signal_connect (selection, "changed",
-                          G_CALLBACK (update_settings_cb), builder);
-        g_signal_connect (selection, "changed",
-                          G_CALLBACK (update_examples_cb), builder);
-
-        /* Connect buttons */
-        widget = (GtkWidget *)gtk_builder_get_object (builder, "region_add");
-        g_signal_connect (widget, "clicked",
-                          G_CALLBACK (add_region), treeview);
-
-	current_lang = cc_common_language_get_current_language ();
-        populate_regions (builder, current_lang);
-	g_free (current_lang);
-
-        g_signal_connect (locale_settings, "changed::region",
-                          G_CALLBACK (setting_changed_cb), treeview);
-}
-
-void
-formats_update_language (GtkBuilder  *builder,
-                         const gchar *language)
-{
-        populate_regions (builder, language);
-}
-
diff --git a/panels/region/gnome-region-panel-formats.h b/panels/region/gnome-region-panel-formats.h
deleted file mode 100644
index 6ba1176..0000000
--- a/panels/region/gnome-region-panel-formats.h
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- * Copyright (C) 2011 Rodrigo Moya
- *
- * Written by: Rodrigo Moya <rodrigo@gnome.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifndef __GNOME_REGION_PANEL_FORMATS_H
-#define __GNOME_REGION_PANEL_FORMATS_H
-
-#include <gtk/gtk.h>
-
-void setup_formats (GtkBuilder *builder);
-void formats_update_language (GtkBuilder  *builder,
-                              const gchar *language);
-
-#endif
diff --git a/panels/region/gnome-region-panel-input-chooser.ui b/panels/region/gnome-region-panel-input-chooser.ui
deleted file mode 100644
index c81c856..0000000
--- a/panels/region/gnome-region-panel-input-chooser.ui
+++ /dev/null
@@ -1,157 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <requires lib="gtk+" version="2.16"/>
-  <object class="GtkListStore" id="input_source_model">
-    <columns>
-      <!-- display name -->
-      <column type="gchararray"/>
-      <!-- input source type -->
-      <column type="gchararray"/>
-      <!-- type specific identifier -->
-      <column type="gchararray"/>
-    </columns>
-  </object>
-  <object class="GtkTreeModelFilter" id="filtered_input_source_model">
-    <property name="child_model">input_source_model</property>
-  </object>
-  <object class="GtkDialog" id="input_source_chooser">
-    <property name="visible">False</property>
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes">Choose an input source</property>
-    <property name="modal">True</property>
-    <property name="window_position">center-on-parent</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="dialog-vbox3">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="hbtnBox">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="cancel-button">
-                <property name="label">gtk-cancel</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="receives_default">False</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="ok-button">
-                <property name="label">gtk-add</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="can_default">True</property>
-                <property name="receives_default">False</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_stock">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-        </child>
-        <child>
-          <object class="GtkVBox" id="vbox40">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="border_width">5</property>
-            <property name="spacing">6</property>
-            <child>
-              <object class="GtkVBox" id="vbox1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">6</property>
-                <child>
-                  <object class="GtkLabel" id="label1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label" translatable="yes">Select an input source to add</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkScrolledWindow" id="scrolledwindow1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="hscrollbar_policy">never</property>
-                    <property name="shadow_type">etched-in</property>
-                    <property name="min_content_width">450</property>
-                    <property name="min_content_height">250</property>
-                    <child>
-                      <object class="GtkTreeView" id="filtered_input_source_list">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="model">filtered_input_source_model</property>
-                        <property name="headers_visible">False</property>
-                        <property name="search_column">0</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">True</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkEntry" id="input_source_filter">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="invisible_char">•</property>
-                <property name="secondary-icon-name">edit-find-symbolic</property>
-                <property name="secondary-icon-activatable">False</property>
-                <property name="secondary-icon-sensitive">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="pack_type">end</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="-5">ok-button</action-widget>
-      <action-widget response="-6">cancel-button</action-widget>
-    </action-widgets>
-  </object>
-</interface>
diff --git a/panels/region/gnome-region-panel-input.c b/panels/region/gnome-region-panel-input.c
deleted file mode 100644
index cb1ceb2..0000000
--- a/panels/region/gnome-region-panel-input.c
+++ /dev/null
@@ -1,1911 +0,0 @@
-/*
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * Written by: Matthias Clasen <mclasen@redhat.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#include <config.h>
-
-#include <string.h>
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <gio/gdesktopappinfo.h>
-
-#define GNOME_DESKTOP_USE_UNSTABLE_API
-#include <libgnome-desktop/gnome-xkb-info.h>
-
-#ifdef HAVE_IBUS
-#include <ibus.h>
-#endif
-
-#include "gdm-languages.h"
-#include "gnome-region-panel-input.h"
-#include "keyboard-shortcuts.h"
-#include "gtkentryaccel.h"
-
-#define WID(s) GTK_WIDGET(gtk_builder_get_object (builder, s))
-
-#define GNOME_DESKTOP_INPUT_SOURCES_DIR "org.gnome.desktop.input-sources"
-#define KEY_CURRENT_INPUT_SOURCE        "current"
-#define KEY_INPUT_SOURCES               "sources"
-#define INPUT_SOURCE_TYPE_XKB           "xkb"
-#define INPUT_SOURCE_TYPE_IBUS          "ibus"
-
-#define MEDIA_KEYS_SCHEMA_ID  "org.gnome.desktop.wm.keybindings"
-#define KEY_PREV_INPUT_SOURCE "switch-input-source-backward"
-#define KEY_NEXT_INPUT_SOURCE "switch-input-source"
-
-#define INDICATOR_KEYBOARD_SCHEMA_ID "com.canonical.indicator.keyboard"
-#define KEY_VISIBLE                  "visible"
-
-#define LIBGNOMEKBD_DESKTOP_SCHEMA_ID "org.gnome.libgnomekbd.desktop"
-#define KEY_GROUP_PER_WINDOW          "group-per-window"
-#define KEY_DEFAULT_GROUP             "default-group"
-
-#define IBUS_PANEL_SCHEMA_ID     "org.freedesktop.ibus.panel"
-#define IBUS_ORIENTATION_KEY     "lookup-table-orientation"
-#define IBUS_USE_CUSTOM_FONT_KEY "use-custom-font"
-#define IBUS_CUSTOM_FONT_KEY     "custom-font"
-
-#define LEGACY_IBUS_XML_DIR   "/usr/share/ibus/component"
-#define LEGACY_IBUS_SETUP_DIR "/usr/lib/ibus"
-#define LEGACY_IBUS_SETUP_FMT "ibus-setup-%s"
-
-enum {
-  NAME_COLUMN,
-  TYPE_COLUMN,
-  ID_COLUMN,
-  SETUP_COLUMN,
-  LEGACY_SETUP_COLUMN,
-  N_COLUMNS
-};
-
-static GSettings *input_sources_settings = NULL;
-static GSettings *libgnomekbd_settings = NULL;
-static GSettings *ibus_panel_settings = NULL;
-static GSettings *media_key_settings = NULL;
-static GSettings *indicator_settings = NULL;
-static GnomeXkbInfo *xkb_info = NULL;
-static GtkBuilder *builder = NULL; /* weak pointer */
-static GtkWidget *input_chooser = NULL; /* weak pointer */
-static CcRegionKeyboardItem *prev_source_item = NULL;
-static CcRegionKeyboardItem *next_source_item = NULL;
-
-#ifdef HAVE_IBUS
-static IBusBus *ibus = NULL;
-static GHashTable *ibus_engines = NULL;
-static GCancellable *ibus_cancellable = NULL;
-static guint shell_name_watch_id = 0;
-
-#endif  /* HAVE_IBUS */
-
-static void       populate_model             (GtkListStore  *store,
-                                              GtkListStore  *active_sources_store);
-static GtkWidget *input_chooser_new          (GtkWindow     *main_window,
-                                              GtkListStore  *active_sources);
-static gboolean   input_chooser_get_selected (GtkWidget     *chooser,
-                                              GtkTreeModel **model,
-                                              GtkTreeIter   *iter);
-static GtkTreeModel *tree_view_get_actual_model (GtkTreeView *tv);
-
-static gboolean
-is_unity (void)
-{
-  return g_strcmp0 (g_getenv ("XDG_CURRENT_DESKTOP"), "Unity") == 0;
-}
-
-static gboolean
-has_indicator_keyboard (void)
-{
-	GSettingsSchema *schema;
-
-	if (!is_unity ())
-		return FALSE;
-
-	schema = g_settings_schema_source_lookup (g_settings_schema_source_get_default (), INDICATOR_KEYBOARD_SCHEMA_ID, TRUE);
-	if (schema) {
-		g_settings_schema_unref (schema);
-		return TRUE;
-	}
-
-	return FALSE;
-}
-
-static gboolean
-strv_contains (const gchar * const *strv,
-               const gchar         *str)
-{
-  const gchar * const *p = strv;
-  for (p = strv; *p; p++)
-    if (g_strcmp0 (*p, str) == 0)
-      return TRUE;
-
-  return FALSE;
-}
-
-#ifdef HAVE_IBUS
-static void
-clear_ibus (void)
-{
-  if (shell_name_watch_id > 0)
-    {
-      g_bus_unwatch_name (shell_name_watch_id);
-      shell_name_watch_id = 0;
-    }
-  g_cancellable_cancel (ibus_cancellable);
-  g_clear_object (&ibus_cancellable);
-  g_clear_pointer (&ibus_engines, g_hash_table_destroy);
-  g_clear_object (&ibus);
-}
-
-static gchar *
-engine_get_display_name (IBusEngineDesc *engine_desc)
-{
-  const gchar *name;
-  const gchar *language_code;
-  const gchar *language;
-  gchar *display_name;
-
-  name = ibus_engine_desc_get_longname (engine_desc);
-  language_code = ibus_engine_desc_get_language (engine_desc);
-  language = ibus_get_language_name (language_code);
-
-  display_name = g_strdup_printf ("%s (%s)", language, name);
-
-  return display_name;
-}
-
-static GDesktopAppInfo *
-setup_app_info_for_id (const gchar *id)
-{
-  GDesktopAppInfo *app_info;
-  gchar *desktop_file_name;
-  gchar **strv;
-
-  strv = g_strsplit (id, ":", 2);
-  desktop_file_name = g_strdup_printf ("ibus-setup-%s.desktop", strv[0]);
-  g_strfreev (strv);
-
-  app_info = g_desktop_app_info_new (desktop_file_name);
-  g_free (desktop_file_name);
-
-  return app_info;
-}
-
-typedef struct _IBusXMLState IBusXMLState;
-
-struct _IBusXMLState
-{
-  GHashTable *table;
-  GString    *buffer;
-  gchar      *name;
-  gchar      *setup;
-};
-
-static IBusXMLState *
-ibus_xml_state_new (GHashTable *table)
-{
-  IBusXMLState *state = g_new0 (IBusXMLState, 1);
-
-  state->table = g_hash_table_ref (table);
-
-  return state;
-}
-
-static void
-ibus_xml_state_free (gpointer data)
-{
-  if (data)
-    {
-      IBusXMLState *state = data;
-
-      g_free (state->setup);
-      g_free (state->name);
-
-      if (state->buffer)
-        g_string_free (state->buffer, TRUE);
-
-      g_hash_table_unref (state->table);
-
-      g_free (state);
-    }
-}
-
-static void
-parse_start (GMarkupParseContext  *context,
-             const gchar          *element_name,
-             const gchar         **attribute_names,
-             const gchar         **attribute_values,
-             gpointer              user_data,
-             GError              **error)
-{
-  IBusXMLState *state = user_data;
-  const GSList *stack = g_markup_parse_context_get_element_stack (context);
-  const gchar *parent = stack->next ? stack->next->data : NULL;
-
-  if (state->buffer)
-    {
-      g_set_error (error, G_MARKUP_ERROR, G_MARKUP_ERROR_INVALID_CONTENT,
-                   "Didn't expect a tag within a <%s>", element_name);
-    }
-  else if (parent && g_str_equal (parent, "engine"))
-    {
-      if (g_str_equal (element_name, "name") && !state->name)
-        state->buffer = g_string_new (NULL);
-      else if (g_str_equal (element_name, "setup") && !state->setup)
-        state->buffer = g_string_new (NULL);
-    }
-}
-
-static void
-parse_end (GMarkupParseContext  *context,
-           const gchar          *element_name,
-           gpointer              user_data,
-           GError              **error)
-{
-  IBusXMLState *state = user_data;
-
-  /* only set for <name> and <setup> */
-  if (state->buffer)
-    {
-      if (g_str_equal (element_name, "name"))
-        state->name = g_string_free (state->buffer, FALSE);
-      else /* g_str_equal (element_name, "setup") */
-        state->setup = g_string_free (state->buffer, FALSE);
-
-      state->buffer = NULL;
-    }
-  else if (g_str_equal (element_name, "engine"))
-    {
-      if (state->name && state->setup)
-        g_hash_table_insert (state->table, g_strdup (state->name), g_strdup (state->setup));
-
-      g_free (state->name);
-      g_free (state->setup);
-
-      state->name = NULL;
-      state->setup = NULL;
-    }
-}
-
-static void
-parse_text (GMarkupParseContext  *context,
-            const gchar          *text,
-            gsize                 text_len,
-            gpointer              user_data,
-            GError              **error)
-{
-  IBusXMLState *state = user_data;
-
-  if (state->buffer)
-    g_string_append_len (state->buffer, text, text_len);
-}
-
-static void
-parse_ibus_component (const gchar *path,
-                      const gchar *text,
-                      gssize       length,
-                      GHashTable  *table)
-{
-  static const GMarkupParser parser = { parse_start, parse_end, parse_text, NULL, NULL };
-
-  GMarkupParseContext *context;
-  GError *error = NULL;
-
-  context = g_markup_parse_context_new (&parser, 0, ibus_xml_state_new (table), ibus_xml_state_free);
-
-  if (!(g_markup_parse_context_parse (context, text, length, &error) && g_markup_parse_context_end_parse (context, &error)))
-    {
-      g_warning ("Couldn't parse file '%s': %s", path, error->message);
-      g_error_free (error);
-    }
-
-  g_markup_parse_context_free (context);
-}
-
-static void
-fetch_setup_entries (GHashTable *table)
-{
-  GDir *dir;
-  const gchar *name;
-  GError *error = NULL;
-
-  dir = g_dir_open (LEGACY_IBUS_XML_DIR, 0, &error);
-
-  if (!dir)
-    {
-      g_warning ("Couldn't open directory '%s': %s", LEGACY_IBUS_XML_DIR, error->message);
-      g_error_free (error);
-      return;
-    }
-
-  for (name = g_dir_read_name (dir); name; name = g_dir_read_name (dir))
-    {
-      gchar *path;
-      gchar *text;
-      gssize length;
-
-      path = g_build_filename (LEGACY_IBUS_XML_DIR, name, NULL);
-
-      if (g_file_get_contents (path, &text, &length, &error))
-        {
-          parse_ibus_component (path, text, length, table);
-          g_free (text);
-        }
-      else
-        {
-          g_warning ("Couldn't read file '%s': %s", path, error->message);
-          g_clear_error (&error);
-        }
-
-      g_free (path);
-    }
-
-  g_dir_close (dir);
-}
-
-static gchar *
-legacy_setup_for_id (const gchar *id)
-{
-  static GHashTable *table;
-
-  const gchar *lookup;
-  gchar *name;
-  gchar *path;
-
-  if (!table)
-    {
-      table = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
-      fetch_setup_entries (table);
-    }
-
-  lookup = g_hash_table_lookup (table, id);
-
-  if (lookup)
-    return g_strdup (lookup);
-
-  name = g_strdup_printf (LEGACY_IBUS_SETUP_FMT, id);
-  path = g_build_filename (LEGACY_IBUS_SETUP_DIR, name, NULL);
-
-  g_free (name);
-
-  if (g_access (path, R_OK) != 0)
-    {
-      g_free (path);
-      path = NULL;
-    }
-
-  if (path)
-    g_hash_table_insert (table, g_strdup (id), g_strdup (path));
-
-  return path;
-}
-
-static void
-input_chooser_repopulate (GtkListStore *active_sources_store)
-{
-  GtkBuilder *builder;
-  GtkListStore *model;
-
-  if (!input_chooser)
-    return;
-
-  builder = g_object_get_data (G_OBJECT (input_chooser), "builder");
-  model = GTK_LIST_STORE (gtk_builder_get_object (builder, "input_source_model"));
-
-  gtk_list_store_clear (model);
-  populate_model (model, active_sources_store);
-}
-
-static void
-update_ibus_active_sources (GtkBuilder *builder)
-{
-  GtkTreeView *tv;
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  gchar *type, *id;
-  gboolean ret;
-
-  tv = GTK_TREE_VIEW (WID ("active_input_sources"));
-  model = tree_view_get_actual_model (tv);
-
-  ret = gtk_tree_model_get_iter_first (model, &iter);
-  while (ret)
-    {
-      gtk_tree_model_get (model, &iter,
-                          TYPE_COLUMN, &type,
-                          ID_COLUMN, &id,
-                          -1);
-
-      if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS))
-        {
-          IBusEngineDesc *engine_desc = NULL;
-          GDesktopAppInfo *app_info = NULL;
-          gchar *legacy_setup = NULL;
-          gchar *display_name = NULL;
-
-          engine_desc = g_hash_table_lookup (ibus_engines, id);
-          if (engine_desc)
-            {
-              display_name = engine_get_display_name (engine_desc);
-              app_info = setup_app_info_for_id (id);
-              legacy_setup = legacy_setup_for_id (id);
-
-              gtk_list_store_set (GTK_LIST_STORE (model), &iter,
-                                  NAME_COLUMN, display_name,
-                                  SETUP_COLUMN, app_info,
-                                  LEGACY_SETUP_COLUMN, legacy_setup,
-                                  -1);
-              g_free (display_name);
-              g_free (legacy_setup);
-              if (app_info)
-                g_object_unref (app_info);
-            }
-        }
-
-      g_free (type);
-      g_free (id);
-
-      ret = gtk_tree_model_iter_next (model, &iter);
-    }
-
-  input_chooser_repopulate (GTK_LIST_STORE (model));
-}
-
-static void
-fetch_ibus_engines_result (GObject      *object,
-                           GAsyncResult *result,
-                           GtkBuilder   *builder)
-{
-  gboolean show_all_sources;
-  GList *list, *l;
-  GError *error;
-
-  error = NULL;
-  list = ibus_bus_list_engines_async_finish (ibus, result, &error);
-
-  g_clear_object (&ibus_cancellable);
-
-  if (!list && error)
-    {
-      g_warning ("Couldn't finish IBus request: %s", error->message);
-      g_error_free (error);
-      return;
-    }
-
-  show_all_sources = g_settings_get_boolean (input_sources_settings, "show-all-sources");
-
-  /* Maps engine ids to engine description objects */
-  ibus_engines = g_hash_table_new_full (g_str_hash, g_str_equal, NULL, g_object_unref);
-
-  for (l = list; l; l = l->next)
-    {
-      IBusEngineDesc *engine = l->data;
-      const gchar *engine_id = ibus_engine_desc_get_name (engine);
-
-      if (g_str_has_prefix (engine_id, "xkb:"))
-        g_object_unref (engine);
-      else
-        g_hash_table_replace (ibus_engines, (gpointer)engine_id, engine);
-    }
-  g_list_free (list);
-
-  update_ibus_active_sources (builder);
-}
-
-static void
-fetch_ibus_engines (GtkBuilder *builder)
-{
-  ibus_cancellable = g_cancellable_new ();
-
-  ibus_bus_list_engines_async (ibus,
-                               -1,
-                               ibus_cancellable,
-                               (GAsyncReadyCallback)fetch_ibus_engines_result,
-                               builder);
-}
-
-static void
-maybe_start_ibus (void)
-{
-  /* IBus doesn't export API in the session bus. The only thing
-   * we have there is a well known name which we can use as a
-   * sure-fire way to activate it. */
-  g_bus_unwatch_name (g_bus_watch_name (G_BUS_TYPE_SESSION,
-                                        IBUS_SERVICE_IBUS,
-                                        G_BUS_NAME_WATCHER_FLAGS_AUTO_START,
-                                        NULL,
-                                        NULL,
-                                        NULL,
-                                        NULL));
-}
-
-static void
-update_source_radios (GtkBuilder *builder)
-{
-  GtkWidget *same_source_radio = WID ("same-source-radio");
-  GtkWidget *different_source_radio = WID ("different-source-radio");
-  GtkWidget *default_source_radio = WID ("default-source-radio");
-  GtkWidget *current_source_radio = WID ("current-source-radio");
-  gboolean group_per_window = g_settings_get_boolean (libgnomekbd_settings, KEY_GROUP_PER_WINDOW);
-  gboolean default_group = g_settings_get_int (libgnomekbd_settings, KEY_DEFAULT_GROUP) >= 0;
-
-  gtk_widget_set_sensitive (default_source_radio, group_per_window);
-  gtk_widget_set_sensitive (current_source_radio, group_per_window);
-
-  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (different_source_radio)) != group_per_window)
-    {
-      if (group_per_window)
-        gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (different_source_radio), TRUE);
-      else
-        gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (same_source_radio), TRUE);
-    }
-
-  if (gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (default_source_radio)) != default_group)
-    {
-      if (default_group)
-        gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (default_source_radio), TRUE);
-      else
-        gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (current_source_radio), TRUE);
-    }
-}
-
-static void
-source_radio_toggled (GtkToggleButton *widget,
-                      gpointer         user_data)
-{
-  GtkWidget *same_source_radio = WID ("same-source-radio");
-  GtkWidget *different_source_radio = WID ("different-source-radio");
-  GtkWidget *default_source_radio = WID ("default-source-radio");
-  GtkWidget *current_source_radio = WID ("current-source-radio");
-  gboolean different_source_active = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (different_source_radio));
-  gboolean default_source_active = gtk_toggle_button_get_active (GTK_TOGGLE_BUTTON (default_source_radio));
-  gboolean group_per_window = g_settings_get_boolean (libgnomekbd_settings, KEY_GROUP_PER_WINDOW);
-  gboolean default_group = g_settings_get_int (libgnomekbd_settings, KEY_DEFAULT_GROUP) >= 0;
-
-  if (different_source_active != group_per_window)
-    g_settings_set_boolean (libgnomekbd_settings, KEY_GROUP_PER_WINDOW, different_source_active);
-
-  if (default_source_active != default_group)
-    g_settings_set_int (libgnomekbd_settings, KEY_DEFAULT_GROUP, default_source_active ? 0 : -1);
-
-  gtk_widget_set_sensitive (default_source_radio, different_source_active);
-  gtk_widget_set_sensitive (current_source_radio, different_source_active);
-}
-
-static void
-ibus_connected (IBusBus  *bus,
-                gpointer  user_data)
-{
-  GtkBuilder *builder = user_data;
-
-  fetch_ibus_engines (builder);
-
-  if (has_indicator_keyboard ())
-    update_source_radios (builder);
-
-  /* We've got everything we needed, don't want to be called again. */
-  g_signal_handlers_disconnect_by_func (ibus, ibus_connected, builder);
-}
-
-static void
-on_shell_appeared (GDBusConnection *connection,
-                   const gchar     *name,
-                   const gchar     *name_owner,
-                   gpointer         data)
-{
-  GtkBuilder *builder = data;
-
-  if (!ibus)
-    {
-      ibus = ibus_bus_new_async ();
-      if (ibus_bus_is_connected (ibus))
-        ibus_connected (ibus, builder);
-      else
-        g_signal_connect (ibus, "connected", G_CALLBACK (ibus_connected), builder);
-    }
-  maybe_start_ibus ();
-}
-#endif  /* HAVE_IBUS */
-
-static gboolean
-add_source_to_table (GtkTreeModel *model,
-                     GtkTreePath  *path,
-                     GtkTreeIter  *iter,
-                     gpointer      data)
-{
-  GHashTable *hash = data;
-  gchar *type;
-  gchar *id;
-
-  gtk_tree_model_get (model, iter,
-                      TYPE_COLUMN, &type,
-                      ID_COLUMN, &id,
-                      -1);
-
-  g_hash_table_add (hash, g_strconcat (type, id, NULL));
-
-  g_free (type);
-  g_free (id);
-
-  return FALSE;
-}
-
-static void
-populate_model (GtkListStore *store,
-                GtkListStore *active_sources_store)
-{
-  GHashTable *active_sources_table;
-  GtkTreeIter iter;
-  const gchar *name;
-  GList *sources, *tmp;
-  gchar *source_id = NULL;
-
-  active_sources_table = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
-
-  gtk_tree_model_foreach (GTK_TREE_MODEL (active_sources_store),
-                          add_source_to_table,
-                          active_sources_table);
-
-  sources = gnome_xkb_info_get_all_layouts (xkb_info);
-
-  for (tmp = sources; tmp; tmp = tmp->next)
-    {
-      g_free (source_id);
-      source_id = g_strconcat (INPUT_SOURCE_TYPE_XKB, tmp->data, NULL);
-
-      if (g_hash_table_contains (active_sources_table, source_id))
-        continue;
-
-      gnome_xkb_info_get_layout_info (xkb_info, (const gchar *)tmp->data,
-                                      &name, NULL, NULL, NULL);
-
-      gtk_list_store_append (store, &iter);
-      gtk_list_store_set (store, &iter,
-                          NAME_COLUMN, name,
-                          TYPE_COLUMN, INPUT_SOURCE_TYPE_XKB,
-                          ID_COLUMN, tmp->data,
-                          -1);
-    }
-  g_free (source_id);
-
-  g_list_free (sources);
-
-#ifdef HAVE_IBUS
-  if (ibus_engines)
-    {
-      gchar *display_name;
-
-      sources = g_hash_table_get_keys (ibus_engines);
-
-      source_id = NULL;
-      for (tmp = sources; tmp; tmp = tmp->next)
-        {
-          g_free (source_id);
-          source_id = g_strconcat (INPUT_SOURCE_TYPE_IBUS, tmp->data, NULL);
-
-          if (g_hash_table_contains (active_sources_table, source_id))
-            continue;
-
-          display_name = engine_get_display_name (g_hash_table_lookup (ibus_engines, tmp->data));
-
-          gtk_list_store_append (store, &iter);
-          gtk_list_store_set (store, &iter,
-                              NAME_COLUMN, display_name,
-                              TYPE_COLUMN, INPUT_SOURCE_TYPE_IBUS,
-                              ID_COLUMN, tmp->data,
-                              -1);
-          g_free (display_name);
-        }
-      g_free (source_id);
-
-      g_list_free (sources);
-    }
-#endif
-
-  g_hash_table_destroy (active_sources_table);
-}
-
-static void
-populate_with_active_sources (GtkListStore *store)
-{
-  GVariant *sources;
-  GVariantIter iter;
-  const gchar *name;
-  const gchar *type;
-  const gchar *id;
-  gchar *display_name;
-  GDesktopAppInfo *app_info;
-  gchar *legacy_setup;
-  GtkTreeIter tree_iter;
-
-  sources = g_settings_get_value (input_sources_settings, KEY_INPUT_SOURCES);
-
-  g_variant_iter_init (&iter, sources);
-  while (g_variant_iter_next (&iter, "(&s&s)", &type, &id))
-    {
-      display_name = NULL;
-      app_info = NULL;
-      legacy_setup = NULL;
-
-      if (g_str_equal (type, INPUT_SOURCE_TYPE_XKB))
-        {
-          gnome_xkb_info_get_layout_info (xkb_info, id, &name, NULL, NULL, NULL);
-          if (!name)
-            {
-              g_warning ("Couldn't find XKB input source '%s'", id);
-              continue;
-            }
-          display_name = g_strdup (name);
-        }
-      else if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS))
-        {
-#ifdef HAVE_IBUS
-          IBusEngineDesc *engine_desc = NULL;
-
-          if (ibus_engines)
-            engine_desc = g_hash_table_lookup (ibus_engines, id);
-
-          if (engine_desc)
-            {
-              display_name = engine_get_display_name (engine_desc);
-              app_info = setup_app_info_for_id (id);
-              legacy_setup = legacy_setup_for_id (id);
-            }
-#else
-          g_warning ("IBus input source type specified but IBus support was not compiled");
-          continue;
-#endif
-        }
-      else
-        {
-          g_warning ("Unknown input source type '%s'", type);
-          continue;
-        }
-
-      gtk_list_store_append (store, &tree_iter);
-      gtk_list_store_set (store, &tree_iter,
-                          NAME_COLUMN, display_name,
-                          TYPE_COLUMN, type,
-                          ID_COLUMN, id,
-                          SETUP_COLUMN, app_info,
-                          LEGACY_SETUP_COLUMN, legacy_setup,
-                          -1);
-      g_free (display_name);
-      g_free (legacy_setup);
-      if (app_info)
-        g_object_unref (app_info);
-    }
-
-  g_variant_unref (sources);
-}
-
-static void
-update_configuration (GtkTreeModel *model)
-{
-  GtkTreeIter iter;
-  gchar *type;
-  gchar *id;
-  GVariantBuilder builder;
-  GVariant *old_sources;
-  const gchar *old_current_type;
-  const gchar *old_current_id;
-  guint old_current_index;
-  guint old_n_sources;
-  guint index;
-
-  old_sources = g_settings_get_value (input_sources_settings, KEY_INPUT_SOURCES);
-  old_current_index = g_settings_get_uint (input_sources_settings, KEY_CURRENT_INPUT_SOURCE);
-  old_n_sources = g_variant_n_children (old_sources);
-
-  if (old_n_sources > 0 && old_current_index < old_n_sources)
-    {
-      g_variant_get_child (old_sources,
-                           old_current_index,
-                           "(&s&s)",
-                           &old_current_type,
-                           &old_current_id);
-    }
-  else
-    {
-      old_current_type = "";
-      old_current_id = "";
-    }
-
-  g_variant_builder_init (&builder, G_VARIANT_TYPE ("a(ss)"));
-  index = 0;
-  gtk_tree_model_get_iter_first (model, &iter);
-  do
-    {
-      gtk_tree_model_get (model, &iter,
-                          TYPE_COLUMN, &type,
-                          ID_COLUMN, &id,
-                          -1);
-      if (index != old_current_index &&
-          g_str_equal (type, old_current_type) &&
-          g_str_equal (id, old_current_id))
-        {
-          g_settings_set_uint (input_sources_settings, KEY_CURRENT_INPUT_SOURCE, index);
-        }
-      g_variant_builder_add (&builder, "(ss)", type, id);
-      g_free (type);
-      g_free (id);
-      index += 1;
-    }
-  while (gtk_tree_model_iter_next (model, &iter));
-
-  g_settings_set_value (input_sources_settings, KEY_INPUT_SOURCES, g_variant_builder_end (&builder));
-  g_settings_apply (input_sources_settings);
-
-  g_variant_unref (old_sources);
-}
-
-static gboolean
-get_selected_iter (GtkBuilder    *builder,
-                   GtkTreeModel **model,
-                   GtkTreeIter   *iter)
-{
-  GtkTreeSelection *selection;
-
-  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (WID ("active_input_sources")));
-
-  return gtk_tree_selection_get_selected (selection, model, iter);
-}
-
-static gint
-idx_from_model_iter (GtkTreeModel *model,
-                     GtkTreeIter  *iter)
-{
-  GtkTreePath *path;
-  gint idx;
-
-  path = gtk_tree_model_get_path (model, iter);
-  if (path == NULL)
-    return -1;
-
-  idx = gtk_tree_path_get_indices (path)[0];
-  gtk_tree_path_free (path);
-
-  return idx;
-}
-
-static void
-update_button_sensitivity (GtkBuilder *builder)
-{
-  GtkWidget *remove_button;
-  GtkWidget *up_button;
-  GtkWidget *down_button;
-  GtkWidget *show_button;
-  GtkWidget *settings_button;
-  GtkTreeView *tv;
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  gint n_active;
-  gint index;
-  gboolean settings_sensitive;
-  GDesktopAppInfo *app_info;
-  gchar *legacy_setup;
-
-  remove_button = WID("input_source_remove");
-  show_button = WID("input_source_show");
-  up_button = WID("input_source_move_up");
-  down_button = WID("input_source_move_down");
-  settings_button = WID("input_source_settings");
-
-  tv = GTK_TREE_VIEW (WID ("active_input_sources"));
-  n_active = gtk_tree_model_iter_n_children (gtk_tree_view_get_model (tv), NULL);
-
-  if (get_selected_iter (builder, &model, &iter))
-    {
-      index = idx_from_model_iter (model, &iter);
-      gtk_tree_model_get (model, &iter,
-                          SETUP_COLUMN, &app_info,
-                          LEGACY_SETUP_COLUMN, &legacy_setup,
-                          -1);
-    }
-  else
-    {
-      index = -1;
-      app_info = NULL;
-      legacy_setup = NULL;
-    }
-
-  settings_sensitive = (index >= 0 && (app_info != NULL || legacy_setup != NULL));
-
-  if (app_info)
-    g_object_unref (app_info);
-
-  g_free (legacy_setup);
-
-  gtk_widget_set_sensitive (remove_button, index >= 0 && n_active > 1);
-  gtk_widget_set_sensitive (show_button, index >= 0);
-  gtk_widget_set_sensitive (up_button, index > 0);
-  gtk_widget_set_sensitive (down_button, index >= 0 && index < n_active - 1);
-  gtk_widget_set_visible (settings_button, settings_sensitive);
-}
-
-static void
-set_selected_path (GtkBuilder  *builder,
-                   GtkTreePath *path)
-{
-  GtkTreeSelection *selection;
-
-  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (WID ("active_input_sources")));
-
-  gtk_tree_selection_select_path (selection, path);
-}
-
-static GtkTreeModel *
-tree_view_get_actual_model (GtkTreeView *tv)
-{
-  GtkTreeModel *filtered_store;
-
-  filtered_store = gtk_tree_view_get_model (tv);
-
-  return gtk_tree_model_filter_get_model (GTK_TREE_MODEL_FILTER (filtered_store));
-}
-
-static void
-chooser_response (GtkWidget *chooser, gint response_id, gpointer data)
-{
-  GtkBuilder *builder = data;
-
-  if (response_id == GTK_RESPONSE_OK)
-    {
-      GtkTreeModel *model;
-      GtkTreeIter iter;
-
-      if (input_chooser_get_selected (chooser, &model, &iter))
-        {
-          GtkTreeView *tv;
-          GtkListStore *child_model;
-          GtkTreeIter child_iter, filter_iter;
-          gchar *name;
-          gchar *type;
-          gchar *id;
-          GDesktopAppInfo *app_info = NULL;
-          gchar *legacy_setup = NULL;
-
-          gtk_tree_model_get (model, &iter,
-                              NAME_COLUMN, &name,
-                              TYPE_COLUMN, &type,
-                              ID_COLUMN, &id,
-                              -1);
-
-#ifdef HAVE_IBUS
-          if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS))
-            {
-              app_info = setup_app_info_for_id (id);
-              legacy_setup = legacy_setup_for_id (id);
-            }
-#endif
-
-          tv = GTK_TREE_VIEW (WID ("active_input_sources"));
-          child_model = GTK_LIST_STORE (tree_view_get_actual_model (tv));
-
-          gtk_list_store_append (child_model, &child_iter);
-
-          gtk_list_store_set (child_model, &child_iter,
-                              NAME_COLUMN, name,
-                              TYPE_COLUMN, type,
-                              ID_COLUMN, id,
-                              SETUP_COLUMN, app_info,
-                              LEGACY_SETUP_COLUMN, legacy_setup,
-                              -1);
-          g_free (legacy_setup);
-          g_free (name);
-          g_free (type);
-          g_free (id);
-          if (app_info)
-            g_object_unref (app_info);
-
-          gtk_tree_model_filter_convert_child_iter_to_iter (GTK_TREE_MODEL_FILTER (gtk_tree_view_get_model (tv)),
-                                                            &filter_iter,
-                                                            &child_iter);
-          gtk_tree_selection_select_iter (gtk_tree_view_get_selection (tv), &filter_iter);
-
-          update_button_sensitivity (builder);
-          update_configuration (GTK_TREE_MODEL (child_model));
-        }
-      else
-        {
-          g_debug ("nothing selected, nothing added");
-        }
-    }
-
-  gtk_widget_destroy (GTK_WIDGET (chooser));
-}
-
-static void
-add_input (GtkButton *button, gpointer data)
-{
-  GtkBuilder *builder = data;
-  GtkWidget *chooser;
-  GtkWidget *toplevel;
-  GtkWidget *treeview;
-  GtkListStore *active_sources;
-
-  g_debug ("add an input source");
-
-  toplevel = gtk_widget_get_toplevel (WID ("active_input_sources"));
-  treeview = WID ("active_input_sources");
-  active_sources = GTK_LIST_STORE (tree_view_get_actual_model (GTK_TREE_VIEW (treeview)));
-
-  chooser = input_chooser_new (GTK_WINDOW (toplevel), active_sources);
-  g_signal_connect (chooser, "response",
-                    G_CALLBACK (chooser_response), builder);
-}
-
-static void
-remove_selected_input (GtkButton *button, gpointer data)
-{
-  GtkBuilder *builder = data;
-  GtkTreeModel *model;
-  GtkTreeModel *child_model;
-  GtkTreeIter iter;
-  GtkTreeIter child_iter;
-  GtkTreePath *path;
-
-  g_debug ("remove selected input source");
-
-  if (get_selected_iter (builder, &model, &iter) == FALSE)
-    return;
-
-  path = gtk_tree_model_get_path (model, &iter);
-
-  child_model = gtk_tree_model_filter_get_model (GTK_TREE_MODEL_FILTER (model));
-  gtk_tree_model_filter_convert_iter_to_child_iter (GTK_TREE_MODEL_FILTER (model),
-                                                    &child_iter,
-                                                    &iter);
-  gtk_list_store_remove (GTK_LIST_STORE (child_model), &child_iter);
-
-  if (!gtk_tree_model_get_iter (model, &iter, path))
-    gtk_tree_path_prev (path);
-
-  set_selected_path (builder, path);
-
-  gtk_tree_path_free (path);
-
-  update_button_sensitivity (builder);
-  update_configuration (child_model);
-}
-
-static void
-move_selected_input_up (GtkButton *button, gpointer data)
-{
-  GtkBuilder *builder = data;
-  GtkTreeModel *model;
-  GtkTreeModel *child_model;
-  GtkTreeIter iter, prev;
-  GtkTreeIter child_iter, child_prev;
-  GtkTreePath *path;
-
-  g_debug ("move selected input source up");
-
-  if (!get_selected_iter (builder, &model, &iter))
-    return;
-
-  prev = iter;
-  if (!gtk_tree_model_iter_previous (model, &prev))
-    return;
-
-  path = gtk_tree_model_get_path (model, &prev);
-
-  child_model = gtk_tree_model_filter_get_model (GTK_TREE_MODEL_FILTER (model));
-  gtk_tree_model_filter_convert_iter_to_child_iter (GTK_TREE_MODEL_FILTER (model),
-                                                    &child_iter,
-                                                    &iter);
-  gtk_tree_model_filter_convert_iter_to_child_iter (GTK_TREE_MODEL_FILTER (model),
-                                                    &child_prev,
-                                                    &prev);
-  gtk_list_store_swap (GTK_LIST_STORE (child_model), &child_iter, &child_prev);
-
-  set_selected_path (builder, path);
-  gtk_tree_path_free (path);
-
-  update_button_sensitivity (builder);
-  update_configuration (child_model);
-}
-
-static void
-move_selected_input_down (GtkButton *button, gpointer data)
-{
-  GtkBuilder *builder = data;
-  GtkTreeModel *model;
-  GtkTreeModel *child_model;
-  GtkTreeIter iter, next;
-  GtkTreeIter child_iter, child_next;
-  GtkTreePath *path;
-
-  g_debug ("move selected input source down");
-
-  if (!get_selected_iter (builder, &model, &iter))
-    return;
-
-  next = iter;
-  if (!gtk_tree_model_iter_next (model, &next))
-    return;
-
-  path = gtk_tree_model_get_path (model, &next);
-
-  child_model = gtk_tree_model_filter_get_model (GTK_TREE_MODEL_FILTER (model));
-  gtk_tree_model_filter_convert_iter_to_child_iter (GTK_TREE_MODEL_FILTER (model),
-                                                    &child_iter,
-                                                    &iter);
-  gtk_tree_model_filter_convert_iter_to_child_iter (GTK_TREE_MODEL_FILTER (model),
-                                                    &child_next,
-                                                    &next);
-  gtk_list_store_swap (GTK_LIST_STORE (child_model), &child_iter, &child_next);
-
-  set_selected_path (builder, path);
-  gtk_tree_path_free (path);
-
-  update_button_sensitivity (builder);
-  update_configuration (child_model);
-}
-
-static void
-show_selected_layout (GtkButton *button, gpointer data)
-{
-  GtkBuilder *builder = data;
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  gchar *type;
-  gchar *id;
-  gchar *kbd_viewer_args;
-  const gchar *xkb_layout;
-  const gchar *xkb_variant;
-
-  g_debug ("show selected layout");
-
-  if (!get_selected_iter (builder, &model, &iter))
-    return;
-
-  gtk_tree_model_get (model, &iter,
-                      TYPE_COLUMN, &type,
-                      ID_COLUMN, &id,
-                      -1);
-
-  if (g_str_equal (type, INPUT_SOURCE_TYPE_XKB))
-    {
-      gnome_xkb_info_get_layout_info (xkb_info, id, NULL, NULL, &xkb_layout, &xkb_variant);
-
-      if (!xkb_layout || !xkb_layout[0])
-        {
-          g_warning ("Couldn't find XKB input source '%s'", id);
-          goto exit;
-        }
-    }
-  else if (g_str_equal (type, INPUT_SOURCE_TYPE_IBUS))
-    {
-#ifdef HAVE_IBUS
-      IBusEngineDesc *engine_desc = NULL;
-
-      if (ibus_engines)
-        engine_desc = g_hash_table_lookup (ibus_engines, id);
-
-      if (engine_desc)
-        {
-          xkb_layout = ibus_engine_desc_get_layout (engine_desc);
-          xkb_variant = "";
-        }
-      else
-        {
-          g_warning ("Couldn't find IBus input source '%s'", id);
-          goto exit;
-        }
-#else
-      g_warning ("IBus input source type specified but IBus support was not compiled");
-      goto exit;
-#endif
-    }
-  else
-    {
-      g_warning ("Unknown input source type '%s'", type);
-      goto exit;
-    }
-
-  if (xkb_variant[0])
-    kbd_viewer_args = g_strdup_printf ("gkbd-keyboard-display -l \"%s\t%s\"",
-                                       xkb_layout, xkb_variant);
-  else
-    kbd_viewer_args = g_strdup_printf ("gkbd-keyboard-display -l %s",
-                                       xkb_layout);
-
-  g_spawn_command_line_async (kbd_viewer_args, NULL);
-
-  g_free (kbd_viewer_args);
- exit:
-  g_free (type);
-  g_free (id);
-}
-
-static void
-show_selected_settings (GtkButton *button, gpointer data)
-{
-  GtkBuilder *builder = data;
-  GtkTreeModel *model;
-  GtkTreeIter iter;
-  GdkAppLaunchContext *ctx;
-  GDesktopAppInfo *app_info;
-  gchar *legacy_setup;
-  gchar *id;
-  GError *error = NULL;
-
-  g_debug ("show selected layout");
-
-  if (!get_selected_iter (builder, &model, &iter))
-    return;
-
-  gtk_tree_model_get (model, &iter, SETUP_COLUMN, &app_info, LEGACY_SETUP_COLUMN, &legacy_setup, -1);
-
-  if (app_info)
-    {
-      ctx = gdk_display_get_app_launch_context (gdk_display_get_default ());
-      gdk_app_launch_context_set_timestamp (ctx, gtk_get_current_event_time ());
-
-      gtk_tree_model_get (model, &iter, ID_COLUMN, &id, -1);
-      g_app_launch_context_setenv (G_APP_LAUNCH_CONTEXT (ctx),
-                                   "IBUS_ENGINE_NAME",
-                                   id);
-      g_free (id);
-
-      if (!g_app_info_launch (G_APP_INFO (app_info), NULL, G_APP_LAUNCH_CONTEXT (ctx), &error))
-        {
-          g_warning ("Failed to launch input source setup: %s", error->message);
-          g_error_free (error);
-        }
-
-      g_object_unref (ctx);
-      g_object_unref (app_info);
-    }
-  else if (legacy_setup)
-    {
-      if (!g_spawn_command_line_async (legacy_setup, &error))
-        {
-          g_warning ("Failed to launch input source setup: %s", error->message);
-          g_error_free (error);
-        }
-    }
-
-  g_free (legacy_setup);
-}
-
-static gboolean
-go_to_shortcuts (GtkLinkButton *button,
-                 CcRegionPanel *panel)
-{
-  CcShell *shell;
-  const gchar *argv[] = { "shortcuts", "Typing", NULL };
-  GError *error = NULL;
-
-  g_clear_object (&input_sources_settings);
-
-  shell = cc_panel_get_shell (CC_PANEL (panel));
-  if (!cc_shell_set_active_panel_from_id (shell, "keyboard", argv, &error))
-    {
-      g_warning ("Failed to activate Keyboard panel: %s", error->message);
-      g_error_free (error);
-    }
-
-  return TRUE;
-}
-
-static void
-input_sources_changed (GSettings  *settings,
-                       gchar      *key,
-                       GtkBuilder *builder)
-{
-  GtkWidget *treeview;
-  GtkTreeModel *store;
-  GtkTreePath *path;
-  GtkTreeIter iter;
-  GtkTreeModel *model;
-
-  treeview = WID("active_input_sources");
-  store = tree_view_get_actual_model (GTK_TREE_VIEW (treeview));
-
-  if (get_selected_iter (builder, &model, &iter))
-    path = gtk_tree_model_get_path (model, &iter);
-  else
-    path = NULL;
-
-  gtk_list_store_clear (GTK_LIST_STORE (store));
-  populate_with_active_sources (GTK_LIST_STORE (store));
-
-  if (path)
-    {
-      set_selected_path (builder, path);
-      gtk_tree_path_free (path);
-    }
-}
-
-static void
-update_shortcut_label (GtkWidget  *widget,
-		       const char *value)
-{
-  char *text;
-  guint accel_key, *keycode;
-  GdkModifierType mods;
-
-  if (value == NULL || *value == '\0')
-    {
-      gtk_label_set_text (GTK_LABEL (widget), "\342\200\224");
-      return;
-    }
-  gtk_accelerator_parse_with_keycode (value, &accel_key, &keycode, &mods);
-  if (accel_key == 0 && keycode == NULL && mods == 0)
-    {
-      gtk_label_set_text (GTK_LABEL (widget), "\342\200\224");
-      g_warning ("Failed to parse keyboard shortcut: '%s'", value);
-      return;
-    }
-
-  text = gtk_accelerator_get_label_with_keycode (gtk_widget_get_display (widget), accel_key, *keycode, mods);
-  g_free (keycode);
-  gtk_label_set_text (GTK_LABEL (widget), text);
-  g_free (text);
-}
-
-static void
-update_shortcuts (GtkBuilder *builder)
-{
-  char **previous, **next;
-  GSettings *settings;
-
-  settings = g_settings_new ("org.gnome.desktop.wm.keybindings");
-
-  previous = g_settings_get_strv (settings, "switch-input-source-backward");
-  next = g_settings_get_strv (settings, "switch-input-source");
-
-  update_shortcut_label (WID ("prev-source-shortcut-label"), previous[0]);
-  update_shortcut_label (WID ("next-source-shortcut-label"), next[0]);
-
-  g_strfreev (previous);
-  g_strfreev (next);
-}
-
-static void
-libgnomekbd_settings_changed (GSettings *settings,
-                              gchar     *key,
-                              gpointer   user_data)
-{
-  if (g_strcmp0 (key, KEY_GROUP_PER_WINDOW) == 0 || g_strcmp0 (key, KEY_DEFAULT_GROUP) == 0)
-    update_source_radios (user_data);
-}
-
-static gboolean
-active_sources_visible_func (GtkTreeModel *model,
-                             GtkTreeIter  *iter,
-                             gpointer      data)
-{
-  gchar *display_name;
-
-  gtk_tree_model_get (model, iter, NAME_COLUMN, &display_name, -1);
-
-  if (!display_name)
-    return FALSE;
-
-  g_free (display_name);
-
-  return TRUE;
-}
-
-static GtkEntryAccelPostAction
-shortcut_key_pressed (GtkEntryAccel   *entry,
-                      guint           *key,
-                      guint           *code,
-                      GdkModifierType *mask,
-                      gpointer         user_data)
-{
-  GtkBuilder *builder = user_data;
-  CcRegionKeyboardItem *item = NULL;
-  gboolean edited;
-
-  if (entry == GTK_ENTRY_ACCEL (WID ("prev-source-entry")))
-    item = prev_source_item;
-  else if (entry == GTK_ENTRY_ACCEL (WID ("next-source-entry")))
-    item = next_source_item;
-
-  if (*mask == 0 && *key == GDK_KEY_Escape)
-    return GTK_ENTRY_ACCEL_CANCEL;
-
-  if (*mask == 0 && *key == GDK_KEY_BackSpace)
-    {
-      *key = 0;
-      *code = 0;
-      *mask = 0;
-
-      return GTK_ENTRY_ACCEL_UPDATE;
-    }
-
-  if ((*mask & ~GDK_LOCK_MASK) == 0 &&
-      (*key == GDK_KEY_Tab ||
-       *key == GDK_KEY_KP_Tab ||
-       *key == GDK_KEY_ISO_Left_Tab ||
-       *key == GDK_KEY_3270_BackTab))
-    return GTK_ENTRY_ACCEL_IGNORE;
-
-  edited = keyboard_shortcuts_accel_edited (item,
-                                            *key,
-                                            *code,
-                                            *mask,
-                                            gtk_widget_get_toplevel (GTK_WIDGET (entry)));
-
-  return edited ? GTK_ENTRY_ACCEL_UPDATE : GTK_ENTRY_ACCEL_IGNORE;
-}
-
-static void
-builder_finalized (gpointer  data,
-                   GObject  *where_the_object_was)
-{
-  keyboard_shortcuts_dispose ();
-
-  g_clear_object (&input_sources_settings);
-  g_clear_object (&libgnomekbd_settings);
-  g_clear_object (&ibus_panel_settings);
-  g_clear_object (&media_key_settings);
-  g_clear_object (&indicator_settings);
-  g_clear_object (&next_source_item);
-  g_clear_object (&prev_source_item);
-
-#ifdef HAVE_IBUS
-  clear_ibus ();
-#endif
-}
-
-static gboolean
-get_key_setting (GValue   *value,
-                 GVariant *variant,
-                 gpointer  user_data)
-{
-    const gchar **switch_key;
-
-    switch_key = g_variant_get_strv (variant, NULL);
-    g_value_set_string (value, switch_key[0]);
-
-
-    return TRUE;
-}
-
-static GVariant *
-set_key_setting (const GValue   *value,
-                 const GVariantType *expected_type,
-                 gpointer  user_data)
-{
-    const gchar *switch_key;
-    gchar **switch_strv;
-    GVariant *ret = NULL;
-
-    switch_strv = g_settings_get_strv(media_key_settings, user_data);
-    switch_key = g_value_get_string (value);
-    switch_strv[0] = g_strdup (switch_key);
-
-    ret = g_variant_new_strv ((const gchar * const *) switch_strv, -1);
-
-    return ret;
-}
-
-
-void
-setup_input_tabs (GtkBuilder    *builder_,
-                  CcRegionPanel *panel)
-{
-  GtkWidget *treeview;
-  GtkTreeViewColumn *column;
-  GtkCellRenderer *cell;
-  GtkListStore *store;
-  GtkTreeModel *filtered_store;
-  GtkTreeSelection *selection;
-
-  builder = builder_;
-
-  g_object_weak_ref (G_OBJECT (builder), builder_finalized, NULL);
-
-  keyboard_shortcuts_init ();
-
-  prev_source_item = g_object_ref (keyboard_shortcuts_get_item (MEDIA_KEYS_SCHEMA_ID,
-                                                                KEY_PREV_INPUT_SOURCE));
-  next_source_item = g_object_ref (keyboard_shortcuts_get_item (MEDIA_KEYS_SCHEMA_ID,
-                                                                KEY_NEXT_INPUT_SOURCE));
-
-  /* set up the list of active inputs */
-  treeview = WID("active_input_sources");
-  column = gtk_tree_view_column_new ();
-  cell = gtk_cell_renderer_text_new ();
-  gtk_tree_view_column_pack_start (column, cell, TRUE);
-  gtk_tree_view_column_add_attribute (column, cell, "text", NAME_COLUMN);
-  gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-
-  store = gtk_list_store_new (N_COLUMNS,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING,
-                              G_TYPE_DESKTOP_APP_INFO,
-                              G_TYPE_STRING);
-
-  gtk_tree_view_set_model (GTK_TREE_VIEW (treeview), GTK_TREE_MODEL (store));
-
-  input_sources_settings = g_settings_new (GNOME_DESKTOP_INPUT_SOURCES_DIR);
-
-  g_settings_delay (input_sources_settings);
-
-  if (!xkb_info)
-    xkb_info = gnome_xkb_info_new ();
-
-#ifdef HAVE_IBUS
-  ibus_init ();
-  shell_name_watch_id = g_bus_watch_name (G_BUS_TYPE_SESSION,
-                                          "org.gnome.Shell",
-                                          G_BUS_NAME_WATCHER_FLAGS_NONE,
-                                          on_shell_appeared,
-                                          NULL,
-                                          builder,
-                                          NULL);
-#endif
-
-  populate_with_active_sources (store);
-
-  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview));
-  g_signal_connect_swapped (selection, "changed",
-                            G_CALLBACK (update_button_sensitivity), builder);
-
-  /* Some input source types might have their info loaded
-   * asynchronously. In that case we don't want to show them
-   * immediately so we use a filter model on top of the real model
-   * which mirrors the GSettings key. */
-  filtered_store = gtk_tree_model_filter_new (GTK_TREE_MODEL (store), NULL);
-  gtk_tree_model_filter_set_visible_func (GTK_TREE_MODEL_FILTER (filtered_store),
-                                          active_sources_visible_func,
-                                          NULL,
-                                          NULL);
-  gtk_tree_view_set_model (GTK_TREE_VIEW (treeview), filtered_store);
-
-  /* set up the buttons */
-  g_signal_connect (WID("input_source_add"), "clicked",
-                    G_CALLBACK (add_input), builder);
-  g_signal_connect (WID("input_source_remove"), "clicked",
-                    G_CALLBACK (remove_selected_input), builder);
-  g_signal_connect (WID("input_source_move_up"), "clicked",
-                    G_CALLBACK (move_selected_input_up), builder);
-  g_signal_connect (WID("input_source_move_down"), "clicked",
-                    G_CALLBACK (move_selected_input_down), builder);
-  g_signal_connect (WID("input_source_show"), "clicked",
-                    G_CALLBACK (show_selected_layout), builder);
-  g_signal_connect (WID("input_source_settings"), "clicked",
-                    G_CALLBACK (show_selected_settings), builder);
-  g_signal_connect (WID("jump-to-shortcuts"), "activate-link",
-                    G_CALLBACK (go_to_shortcuts), panel);
-  g_signal_connect (G_OBJECT (input_sources_settings),
-                    "changed::" KEY_INPUT_SOURCES,
-                    G_CALLBACK (input_sources_changed),
-                    builder);
-
-  if (has_indicator_keyboard ())
-    {
-      libgnomekbd_settings = g_settings_new (LIBGNOMEKBD_DESKTOP_SCHEMA_ID);
-      ibus_panel_settings = g_settings_new (IBUS_PANEL_SCHEMA_ID);
-      media_key_settings = g_settings_new (MEDIA_KEYS_SCHEMA_ID);
-      indicator_settings = g_settings_new (INDICATOR_KEYBOARD_SCHEMA_ID);
-
-      update_source_radios (builder);
-
-      g_settings_bind (indicator_settings,
-                       KEY_VISIBLE,
-                       WID ("show-indicator-check"),
-                       "active",
-                       G_SETTINGS_BIND_DEFAULT);
-      g_settings_bind (ibus_panel_settings,
-                       IBUS_ORIENTATION_KEY,
-                       WID ("orientation-combo"),
-                       "active",
-                       G_SETTINGS_BIND_DEFAULT);
-      g_settings_bind (ibus_panel_settings,
-                       IBUS_USE_CUSTOM_FONT_KEY,
-                       WID ("custom-font-check"),
-                       "active",
-                       G_SETTINGS_BIND_DEFAULT);
-      g_settings_bind (ibus_panel_settings,
-                       IBUS_USE_CUSTOM_FONT_KEY,
-                       WID ("custom-font-button"),
-                       "sensitive",
-                       G_SETTINGS_BIND_GET | G_SETTINGS_BIND_NO_SENSITIVITY);
-      g_settings_bind (ibus_panel_settings,
-                       IBUS_CUSTOM_FONT_KEY,
-                       WID ("custom-font-button"),
-                       "font-name",
-                       G_SETTINGS_BIND_DEFAULT | G_SETTINGS_BIND_NO_SENSITIVITY);
-      g_settings_bind_with_mapping (media_key_settings,
-                                    KEY_PREV_INPUT_SOURCE,
-                                    WID ("prev-source-entry"),
-                                    "accel",
-                                    G_SETTINGS_BIND_DEFAULT,
-                                    get_key_setting,
-                                    set_key_setting,
-                                    KEY_PREV_INPUT_SOURCE, NULL);
-      g_settings_bind_with_mapping (media_key_settings,
-                                    KEY_NEXT_INPUT_SOURCE,
-                                    WID ("next-source-entry"),
-                                    "accel",
-                                    G_SETTINGS_BIND_DEFAULT,
-                                    get_key_setting,
-                                    set_key_setting,
-                                    KEY_NEXT_INPUT_SOURCE, NULL);
-
-      g_signal_connect (WID ("prev-source-entry"), "key-pressed",
-                        G_CALLBACK (shortcut_key_pressed), builder);
-      g_signal_connect (WID ("next-source-entry"), "key-pressed",
-                        G_CALLBACK (shortcut_key_pressed), builder);
-      g_signal_connect (WID ("same-source-radio"), "toggled",
-                        G_CALLBACK (source_radio_toggled), builder);
-      g_signal_connect (WID ("different-source-radio"), "toggled",
-                        G_CALLBACK (source_radio_toggled), builder);
-      g_signal_connect (WID ("default-source-radio"), "toggled",
-                        G_CALLBACK (source_radio_toggled), builder);
-      g_signal_connect (WID ("current-source-radio"), "toggled",
-                        G_CALLBACK (source_radio_toggled), builder);
-      g_signal_connect (libgnomekbd_settings,
-                        "changed",
-                        G_CALLBACK (libgnomekbd_settings_changed),
-                        builder);
-    }
-  else
-    {
-      g_settings_bind (input_sources_settings, "per-window",
-                       WID("per-window-radio-true"), "active",
-                       G_SETTINGS_BIND_DEFAULT);
-      g_settings_bind (input_sources_settings, "per-window",
-                       WID("per-window-radio-false"), "active",
-                       G_SETTINGS_BIND_DEFAULT | G_SETTINGS_BIND_INVERT_BOOLEAN);
-      /* because we are in delay-apply mode */
-      g_signal_connect_swapped (WID("per-window-radio-true"), "clicked",
-                                G_CALLBACK (g_settings_apply), input_sources_settings);
-      g_signal_connect_swapped (WID("per-window-radio-false"), "clicked",
-                                G_CALLBACK (g_settings_apply), input_sources_settings);
-
-      update_shortcuts (builder);
-    }
-}
-
-static void
-filter_clear (GtkEntry             *entry,
-              GtkEntryIconPosition  icon_pos,
-              GdkEvent             *event,
-              gpointer              user_data)
-{
-  gtk_entry_set_text (entry, "");
-}
-
-static gchar **search_pattern_list;
-
-static void
-filter_changed (GtkBuilder *builder)
-{
-  GtkTreeModelFilter *filtered_model;
-  GtkTreeView *tree_view;
-  GtkTreeSelection *selection;
-  GtkTreeIter selected_iter;
-  GtkWidget *filter_entry;
-  const gchar *pattern;
-  gchar *upattern;
-
-  filter_entry = WID ("input_source_filter");
-  pattern = gtk_entry_get_text (GTK_ENTRY (filter_entry));
-  upattern = g_utf8_strup (pattern, -1);
-  if (!g_strcmp0 (pattern, ""))
-    g_object_set (G_OBJECT (filter_entry),
-                  "secondary-icon-name", "edit-find-symbolic",
-                  "secondary-icon-activatable", FALSE,
-                  "secondary-icon-sensitive", FALSE,
-                  NULL);
-  else
-    g_object_set (G_OBJECT (filter_entry),
-                  "secondary-icon-name", "edit-clear-symbolic",
-                  "secondary-icon-activatable", TRUE,
-                  "secondary-icon-sensitive", TRUE,
-                  NULL);
-
-  if (search_pattern_list != NULL)
-    g_strfreev (search_pattern_list);
-
-  search_pattern_list = g_strsplit (upattern, " ", -1);
-  g_free (upattern);
-
-  filtered_model = GTK_TREE_MODEL_FILTER (gtk_builder_get_object (builder, "filtered_input_source_model"));
-  gtk_tree_model_filter_refilter (filtered_model);
-
-  tree_view = GTK_TREE_VIEW (WID ("filtered_input_source_list"));
-  selection = gtk_tree_view_get_selection (tree_view);
-  if (gtk_tree_selection_get_selected (selection, NULL, &selected_iter))
-    {
-      GtkTreePath *path = gtk_tree_model_get_path (GTK_TREE_MODEL (filtered_model),
-                                                   &selected_iter);
-      gtk_tree_view_scroll_to_cell (tree_view, path, NULL, TRUE, 0.5, 0.5);
-      gtk_tree_path_free (path);
-    }
-  else
-    {
-      GtkTreeIter iter;
-      if (gtk_tree_model_get_iter_first (GTK_TREE_MODEL (filtered_model), &iter))
-        gtk_tree_selection_select_iter (selection, &iter);
-    }
-}
-
-static void
-selection_changed (GtkTreeSelection *selection,
-                   GtkBuilder       *builder)
-{
-  gtk_widget_set_sensitive (WID ("ok-button"),
-                            gtk_tree_selection_get_selected (selection, NULL, NULL));
-}
-
-static void
-row_activated (GtkTreeView       *tree_view,
-               GtkTreePath       *path,
-               GtkTreeViewColumn *column,
-               GtkBuilder        *builder)
-{
-  GtkWidget *add_button;
-  GtkWidget *dialog;
-
-  add_button = WID ("ok-button");
-  dialog = WID ("input_source_chooser");
-  if (gtk_widget_is_sensitive (add_button))
-    gtk_dialog_response (GTK_DIALOG (dialog), GTK_RESPONSE_OK);
-}
-
-static void
-entry_activated (GtkBuilder *builder,
-                 gpointer    data)
-{
-  row_activated (NULL, NULL, NULL, builder);
-}
-
-static gboolean
-filter_func (GtkTreeModel *model,
-             GtkTreeIter  *iter,
-             gpointer      data)
-{
-  gchar *name = NULL;
-  gchar **pattern;
-  gboolean rv = TRUE;
-
-  if (search_pattern_list == NULL || search_pattern_list[0] == NULL)
-    return TRUE;
-
-  gtk_tree_model_get (model, iter,
-                      NAME_COLUMN, &name,
-                      -1);
-
-  pattern = search_pattern_list;
-  do {
-    gboolean is_pattern_found = FALSE;
-    gchar *udesc = g_utf8_strup (name, -1);
-    if (udesc != NULL && g_strstr_len (udesc, -1, *pattern))
-      {
-        is_pattern_found = TRUE;
-      }
-    g_free (udesc);
-
-    if (!is_pattern_found)
-      {
-        rv = FALSE;
-        break;
-      }
-
-  } while (*++pattern != NULL);
-
-  g_free (name);
-
-  return rv;
-}
-
-static GtkWidget *
-input_chooser_new (GtkWindow    *main_window,
-                   GtkListStore *active_sources)
-{
-  GtkBuilder *builder;
-  GtkWidget *chooser;
-  GtkWidget *filtered_list;
-  GtkWidget *filter_entry;
-  GtkTreeViewColumn *visible_column;
-  GtkTreeSelection *selection;
-  GtkListStore *model;
-  GtkTreeModelFilter *filtered_model;
-  GtkTreeIter iter;
-
-  builder = gtk_builder_new ();
-  gtk_builder_add_from_file (builder,
-                             GNOMECC_UI_DIR "/gnome-region-panel-input-chooser.ui",
-                             NULL);
-  chooser = WID ("input_source_chooser");
-  input_chooser = chooser;
-  g_object_add_weak_pointer (G_OBJECT (chooser), (gpointer *) &input_chooser);
-  g_object_set_data_full (G_OBJECT (chooser), "builder", builder, g_object_unref);
-
-  filtered_list = WID ("filtered_input_source_list");
-  filter_entry = WID ("input_source_filter");
-
-  g_object_set_data (G_OBJECT (chooser),
-                     "filtered_input_source_list", filtered_list);
-  visible_column =
-    gtk_tree_view_column_new_with_attributes ("Input Sources",
-                                              gtk_cell_renderer_text_new (),
-                                              "text", NAME_COLUMN,
-                                              NULL);
-
-  gtk_window_set_transient_for (GTK_WINDOW (chooser), main_window);
-
-  gtk_tree_view_append_column (GTK_TREE_VIEW (filtered_list),
-                               visible_column);
-  /* We handle searching ourselves, thank you. */
-  gtk_tree_view_set_enable_search (GTK_TREE_VIEW (filtered_list), FALSE);
-  gtk_tree_view_set_search_column (GTK_TREE_VIEW (filtered_list), -1);
-
-  g_signal_connect_swapped (G_OBJECT (filter_entry), "activate",
-                            G_CALLBACK (entry_activated), builder);
-  g_signal_connect_swapped (G_OBJECT (filter_entry), "notify::text",
-                            G_CALLBACK (filter_changed), builder);
-
-  g_signal_connect (G_OBJECT (filter_entry), "icon-release",
-                    G_CALLBACK (filter_clear), NULL);
-
-  filtered_model = GTK_TREE_MODEL_FILTER (gtk_builder_get_object (builder, "filtered_input_source_model"));
-  model = GTK_LIST_STORE (gtk_builder_get_object (builder, "input_source_model"));
-
-  populate_model (model, active_sources);
-
-  gtk_tree_sortable_set_sort_column_id (GTK_TREE_SORTABLE (model),
-                                        NAME_COLUMN, GTK_SORT_ASCENDING);
-
-  gtk_tree_model_filter_set_visible_func (filtered_model,
-                                          filter_func,
-                                          NULL, NULL);
-
-  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (filtered_list));
-
-  g_signal_connect (G_OBJECT (selection), "changed",
-                    G_CALLBACK (selection_changed), builder);
-
-  if (gtk_tree_model_get_iter_first (GTK_TREE_MODEL (filtered_model), &iter))
-    gtk_tree_selection_select_iter (selection, &iter);
-
-  g_signal_connect (G_OBJECT (filtered_list), "row-activated",
-                    G_CALLBACK (row_activated), builder);
-
-  gtk_widget_grab_focus (filter_entry);
-
-  gtk_widget_show (chooser);
-
-  return chooser;
-}
-
-static gboolean
-input_chooser_get_selected (GtkWidget     *dialog,
-                            GtkTreeModel **model,
-                            GtkTreeIter   *iter)
-{
-  GtkWidget *tv;
-  GtkTreeSelection *selection;
-
-  tv = g_object_get_data (G_OBJECT (dialog), "filtered_input_source_list");
-  selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (tv));
-
-  return gtk_tree_selection_get_selected (selection, model, iter);
-}
diff --git a/panels/region/gnome-region-panel-input.h b/panels/region/gnome-region-panel-input.h
deleted file mode 100644
index 47a1f52..0000000
--- a/panels/region/gnome-region-panel-input.h
+++ /dev/null
@@ -1,36 +0,0 @@
-/* gnome-region-panel-input.h
- * Copyright (C) 2011 Red Hat, Inc.
- *
- * Written by Matthias Clasen
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifndef __GNOME_KEYBOARD_PROPERTY_INPUT_H
-#define __GNOME_KEYBOARD_PROPERTY_INPUT_H
-
-#include <gtk/gtk.h>
-
-#include "cc-region-panel.h"
-
-G_BEGIN_DECLS
-
-void setup_input_tabs (GtkBuilder    *builder,
-                       CcRegionPanel *self);
-
-G_END_DECLS
-
-#endif  /* __GNOME_KEYBOARD_PROPERTY_INPUT_H */
diff --git a/panels/region/gnome-region-panel-lang.c b/panels/region/gnome-region-panel-lang.c
deleted file mode 100644
index a944eca..0000000
--- a/panels/region/gnome-region-panel-lang.c
+++ /dev/null
@@ -1,243 +0,0 @@
-/*
- * Copyright (C) 2010 Bastien Nocera
- *
- * Written by: Bastien Nocera <hadess@hadess.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <string.h>
-#include <glib/gi18n.h>
-
-#include "gnome-region-panel-lang.h"
-#include "gnome-region-panel-formats.h"
-#include "gnome-region-panel-system.h"
-#include "cc-common-language.h"
-#include "cc-language-chooser.h"
-#include "gdm-languages.h"
-
-static GDBusProxy *proxy = NULL;
-
-static void
-selection_changed (GtkTreeSelection *selection,
-                   GtkBuilder       *builder)
-{
-	GtkTreeModel *model;
-	GtkTreeIter iter;
-	char *locale;
-	GDBusProxy *user;
-	GVariant *variant;
-	GError *error = NULL;
-	char *object_path;
-
-	if (gtk_tree_selection_get_selected (selection, &model, &iter) == FALSE) {
-		g_warning ("No selected languages, this shouldn't happen");
-		return;
-	}
-
-	user = NULL;
-	variant = NULL;
-
-	gtk_tree_model_get (model, &iter,
-			    LOCALE_COL, &locale,
-			    -1);
-
-	if (proxy == NULL) {
-		g_warning ("Would change the language to '%s', but no D-Bus connection available", locale);
-		goto bail;
-	}
-
-	variant = g_dbus_proxy_call_sync (proxy,
-					  "FindUserByName",
-					  g_variant_new ("(s)", g_get_user_name ()),
-					  G_DBUS_CALL_FLAGS_NONE,
-					  -1,
-					  NULL,
-					  &error);
-	if (variant == NULL) {
-		g_warning ("Could not contact accounts service to look up '%s': %s",
-			   g_get_user_name (), error->message);
-		g_error_free (error);
-		goto bail;
-	}
-
-	g_variant_get (variant, "(o)", &object_path);
-	user = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
-					      G_DBUS_PROXY_FLAGS_NONE,
-					      NULL,
-					      "org.freedesktop.Accounts",
-					      object_path,
-					      "org.freedesktop.Accounts.User",
-					      NULL,
-					      &error);
-	g_free (object_path);
-
-	if (user == NULL) {
-		g_warning ("Could not create proxy for user '%s': %s",
-			   g_variant_get_string (variant, NULL), error->message);
-		g_error_free (error);
-		goto bail;
-	}
-	g_variant_unref (variant);
-
-	variant = g_dbus_proxy_call_sync (user,
-					  "SetLanguage",
-					  g_variant_new ("(s)", locale),
-					  G_DBUS_CALL_FLAGS_NONE,
-					  -1,
-					  NULL,
-					  &error);
-	if (variant == NULL) {
-		g_warning ("Failed to set the language '%s': %s", locale, error->message);
-		g_error_free (error);
-		goto bail;
-	}
-
-        /* Update the other tabs */
-        formats_update_language (builder, locale);
-        system_update_language (builder, locale);
-
-	/* And done */
-
-bail:
-	if (variant != NULL)
-		g_variant_unref (variant);
-	if (user != NULL)
-		g_object_unref (user);
-	g_free (locale);
-}
-
-static void
-language_response (GtkDialog *dialog,
-                   gint       response_id,
-                   GtkWidget *treeview)
-{
-        gchar *lang;
-	GtkTreeModel *model;
-	GtkTreeSelection *selection;
-	GtkTreeIter iter;
-
-        gtk_widget_hide (GTK_WIDGET (dialog));
-
-        if (response_id != GTK_RESPONSE_OK) {
-		return;
-	}
-
-        lang = cc_language_chooser_get_language (GTK_WIDGET (dialog));
-
-	if (lang == NULL) {
-		return;
-	}
-
-	model = gtk_tree_view_get_model (GTK_TREE_VIEW (treeview));
-	selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview));
-
-	if (cc_common_language_get_iter_for_language (model, lang, &iter)) {
-		gtk_tree_selection_select_iter (selection, &iter);
-        }
-
-	gtk_widget_grab_focus (treeview);
-
-        g_free (lang);
-}
-
-static void
-add_language (GtkWidget *button, GtkWidget *treeview)
-{
-  	GtkWidget *toplevel;
-	GtkWidget *chooser;
-
-	toplevel = gtk_widget_get_toplevel (button);
-	chooser = g_object_get_data (G_OBJECT (button), "chooser");
-	if (chooser == NULL) {
-		chooser = cc_language_chooser_new (toplevel, FALSE);
-
-       		g_signal_connect (chooser, "response",
-                	          G_CALLBACK (language_response), treeview);
-	        g_signal_connect (chooser, "delete-event",
-        	                  G_CALLBACK (gtk_widget_hide_on_delete), NULL);
-
-		g_object_set_data_full (G_OBJECT (button), "chooser",
-					chooser, (GDestroyNotify)gtk_widget_destroy);
-	}
-	else {
-		cc_language_chooser_clear_filter (chooser);
-	}
-
-        gdk_window_set_cursor (gtk_widget_get_window (toplevel), NULL);
-        gtk_window_present (GTK_WINDOW (chooser));
-}
-
-void
-setup_language (GtkBuilder *builder)
-{
-	GtkWidget *treeview;
-	GHashTable *user_langs;
-	GError *error = NULL;
-	GtkWidget *widget;
-	GtkStyleContext *context;
-	GtkTreeSelection *selection;
-
-        /* Setup junction between toolbar and treeview */
-        widget = (GtkWidget *)gtk_builder_get_object (builder, "language-swindow");
-        context = gtk_widget_get_style_context (widget);
-        gtk_style_context_set_junction_sides (context, GTK_JUNCTION_BOTTOM);
-        widget = (GtkWidget *)gtk_builder_get_object (builder, "language-toolbar");
-        context = gtk_widget_get_style_context (widget);
-        gtk_style_context_set_junction_sides (context, GTK_JUNCTION_TOP);
-	
-	treeview = GTK_WIDGET (gtk_builder_get_object (builder, "display_language_treeview"));
-
-	/* Connect buttons */
-	widget = (GtkWidget *)gtk_builder_get_object (builder, "language_add");
-	g_signal_connect (widget, "clicked",
-			  G_CALLBACK (add_language), treeview);	
-
-	/* Setup accounts service */
-	proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
-					       G_DBUS_PROXY_FLAGS_NONE,
-					       NULL,
-					       "org.freedesktop.Accounts",
-					       "/org/freedesktop/Accounts",
-					       "org.freedesktop.Accounts",
-					       NULL,
-					       &error);
-
-	if (proxy == NULL) {
-		g_warning ("Failed to contact accounts service: %s", error->message);
-		g_error_free (error);
-	} else {
-		g_object_weak_ref (G_OBJECT (treeview), (GWeakNotify) g_object_unref, proxy);
-	}
-
-	/* Add user languages */
-	user_langs = cc_common_language_get_initial_languages ();
-	cc_common_language_setup_list (treeview, user_langs);
-
-        /* And select the current language */
-        cc_common_language_select_current_language (GTK_TREE_VIEW (treeview));
-
-        /* And now listen for changes */
-        selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview));
-        g_signal_connect (G_OBJECT (selection), "changed",
-                          G_CALLBACK (selection_changed), builder);
-
-	gtk_widget_grab_focus (treeview);
-}
diff --git a/panels/region/gnome-region-panel-lang.h b/panels/region/gnome-region-panel-lang.h
deleted file mode 100644
index 3522ac0..0000000
--- a/panels/region/gnome-region-panel-lang.h
+++ /dev/null
@@ -1,32 +0,0 @@
-/*
- * Copyright (C) 2010 Bastien Nocera
- *
- * Written by: Bastien Nocera <hadess@hadess.net>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifndef __GNOME_KEYBOARD_PROPERTY_LANG_H
-#define __GNOME_KEYBOARD_PROPERTY_LANG_H
-
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-void setup_language (GtkBuilder *builder);
-
-G_END_DECLS
-#endif /* __GNOME_KEYBOARD_PROPERTY_LANG_H */
diff --git a/panels/region/gnome-region-panel-system.c b/panels/region/gnome-region-panel-system.c
deleted file mode 100644
index 488782a..0000000
--- a/panels/region/gnome-region-panel-system.c
+++ /dev/null
@@ -1,588 +0,0 @@
-/*
- * Copyright (C) 2011 Rodrigo Moya
- *
- * Written by: Rodrigo Moya <rodrigo@gnome.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifdef HAVE_CONFIG_H
-#  include <config.h>
-#endif
-
-#include <string.h>
-
-#include <polkit/polkit.h>
-
-#include <glib/gi18n.h>
-
-#define GNOME_DESKTOP_USE_UNSTABLE_API
-#include <libgnome-desktop/gnome-xkb-info.h>
-
-#include "cc-common-language.h"
-#include "gdm-languages.h"
-#include "gnome-region-panel-system.h"
-
-#define WID(s) GTK_WIDGET(gtk_builder_get_object (dialog, s))
-
-static GSettings *locale_settings, *input_sources_settings;
-static GDBusProxy *localed_proxy;
-static GPermission *localed_permission;
-
-static void
-update_copy_button (GtkBuilder *dialog)
-{
-        GtkWidget *label;
-        GtkWidget *button;
-        const gchar *user_lang, *system_lang;
-        const gchar *user_region, *system_region;
-        const gchar *user_input_source, *system_input_source;
-        const gchar *user_input_variants, *system_input_variants;
-        gboolean layouts_differ;
-
-        label = WID ("user_display_language");
-        user_lang = g_object_get_data (G_OBJECT (label), "language");
-
-        label = WID ("system_display_language");
-        system_lang = g_object_get_data (G_OBJECT (label), "language");
-
-        label = WID ("user_format");
-        user_region = g_object_get_data (G_OBJECT (label), "region");
-
-        label = WID ("system_format");
-        system_region = g_object_get_data (G_OBJECT (label), "region");
-
-        label = WID ("user_input_source");
-        user_input_source = g_object_get_data (G_OBJECT (label), "input_source");
-        user_input_variants = g_object_get_data (G_OBJECT (label), "input_variants");
-
-        label = WID ("system_input_source");
-        system_input_source = g_object_get_data (G_OBJECT (label), "input_source");
-        system_input_variants = g_object_get_data (G_OBJECT (label), "input_variants");
-
-        button = WID ("copy_settings_button");
-
-        if (user_input_source && user_input_source[0]) {
-                layouts_differ = (g_strcmp0 (user_input_source, system_input_source) != 0);
-                if (layouts_differ == FALSE)
-                        layouts_differ = (g_strcmp0 (user_input_variants, system_input_variants) != 0);
-        } else {
-                /* Nothing to copy */
-                layouts_differ = FALSE;
-        }
-
-        if (g_strcmp0 (user_lang, system_lang) == 0 &&
-            g_strcmp0 (user_region, system_region) == 0 &&
-            !layouts_differ)
-                gtk_widget_set_sensitive (button, FALSE);
-        else
-                gtk_widget_set_sensitive (button, TRUE);
-}
-
-void
-locale_settings_changed (GSettings *settings,
-                         const gchar *key,
-                         GtkBuilder *dialog)
-{
-        GtkWidget *label;
-        gchar *region, *display_region;
-
-        region = cc_common_language_get_property ("FormatsLocale");
-        if (!region || !region[0]) {
-                label = WID ("user_display_language");
-                region = g_strdup ((gchar*)g_object_get_data (G_OBJECT (label), "language"));
-        }
-
-        display_region = gdm_get_region_from_name (region, NULL);
-        label = WID ("user_format");
-        gtk_label_set_text (GTK_LABEL (label), display_region);
-        g_object_set_data_full (G_OBJECT (label), "region", g_strdup (region), g_free);
-        g_free (region);
-        g_free (display_region);
-
-        update_copy_button (dialog);
-}
-
-void
-system_update_language (GtkBuilder *dialog, const gchar *language)
-{
-        gchar *display_language;
-        GtkWidget *label;
-
-        display_language = gdm_get_language_from_name (language, NULL);
-        label = WID ("user_display_language");
-        gtk_label_set_text (GTK_LABEL (label), display_language);
-        g_object_set_data_full (G_OBJECT (label), "language", g_strdup (language), g_free);
-        g_free (display_language);
-
-        /* need to update the region display in case the setting is '' */
-        locale_settings_changed (locale_settings, "region", dialog);
-
-        update_copy_button (dialog);
-}
-
-static void
-input_sources_changed (GSettings *settings,
-                       const gchar *key,
-                       GtkBuilder *dialog)
-{
-        GString *disp, *list, *variants;
-        GtkWidget *label;
-        GnomeXkbInfo *xkb_info;
-        GVariantIter iter;
-        GVariant *sources;
-        const gchar *type;
-        const gchar *id;
-
-        sources = g_settings_get_value (input_sources_settings, "sources");
-        xkb_info = gnome_xkb_info_new ();
-
-        label = WID ("user_input_source");
-        disp = g_string_new ("");
-        list = g_string_new ("");
-        variants = g_string_new ("");
-
-        g_variant_iter_init (&iter, sources);
-        while (g_variant_iter_next (&iter, "(&s&s)", &type, &id)) {
-                /* We can't copy non-XKB layouts to the system yet */
-                if (g_str_equal (type, "xkb")) {
-                        char **split;
-                        gchar *layout, *variant;
-                        const char *name;
-
-                        gnome_xkb_info_get_layout_info (xkb_info, id, &name, NULL, NULL, NULL);
-                        if (disp->str[0] != '\0')
-                                g_string_append (disp, ", ");
-                        g_string_append (disp, name);
-
-                        split = g_strsplit (id, "+", 2);
-
-                        if (split == NULL || split[0] == NULL)
-                                continue;
-
-                        layout = split[0];
-                        variant = split[1];
-
-                        if (list->str[0] != '\0') {
-                                g_string_append (list, ",");
-                                g_string_append (variants, ",");
-                        }
-                        g_string_append (list, layout);
-                        g_string_append (variants, variant ? variant : "");
-
-                        g_strfreev (split);
-                }
-        }
-        g_variant_unref (sources);
-        g_object_unref (xkb_info);
-
-        g_object_set_data_full (G_OBJECT (label), "input_source", g_string_free (list, FALSE), g_free);
-        g_object_set_data_full (G_OBJECT (label), "input_variants", g_string_free (variants, FALSE), g_free);
-
-        gtk_label_set_text (GTK_LABEL (label), disp->str);
-        g_string_free (disp, TRUE);
-
-        update_copy_button (dialog);
-}
-
-static void
-update_property (GDBusProxy *proxy,
-                 const char *property)
-{
-        GError *error = NULL;
-        GVariant *variant;
-
-        /* Work around systemd-localed not sending us back
-         * the property value when changing values */
-        variant = g_dbus_proxy_call_sync (proxy,
-                                          "org.freedesktop.DBus.Properties.Get",
-                                          g_variant_new ("(ss)", "org.freedesktop.locale1", property),
-                                          G_DBUS_CALL_FLAGS_NONE,
-                                          -1,
-                                          NULL,
-                                          &error);
-        if (variant == NULL) {
-                g_warning ("Failed to get property '%s': %s", property, error->message);
-                g_error_free (error);
-        } else {
-                GVariant *v;
-
-                g_variant_get (variant, "(v)", &v);
-                g_dbus_proxy_set_cached_property (proxy, property, v);
-                g_variant_unref (variant);
-        }
-}
-
-static gchar *
-strip_quotes (const gchar *str)
-{
-        if ((g_str_has_prefix (str, "\"") && g_str_has_suffix (str, "\""))
-          || (g_str_has_prefix (str, "'") && g_str_has_suffix (str, "'")))
-                return g_strndup (str + 1, strlen (str) - 2);
-        else
-                return g_strdup (str);
-}
-
-static void
-on_localed_properties_changed (GDBusProxy   *proxy,
-                               GVariant     *changed_properties,
-                               const gchar **invalidated_properties,
-                               GtkBuilder   *dialog)
-{
-        GVariant *v, *w;
-        GtkWidget *label;
-        GnomeXkbInfo *xkb_info;
-        char **layouts;
-        char **variants;
-        GString *disp;
-        guint i, n;
-
-        if (invalidated_properties != NULL) {
-                guint i;
-                for (i = 0; invalidated_properties[i] != NULL; i++) {
-                        if (g_str_equal (invalidated_properties[i], "Locale"))
-                                update_property (proxy, "Locale");
-                        else if (g_str_equal (invalidated_properties[i], "X11Layout"))
-                                update_property (proxy, "X11Layout");
-                        else if (g_str_equal (invalidated_properties[i], "X11Variant"))
-                                update_property (proxy, "X11Variant");
-                }
-        }
-
-        v = g_dbus_proxy_get_cached_property (proxy, "Locale");
-        if (v) {
-                const gchar **strv;
-                gsize len;
-                gint i;
-                gchar *lang, *language, *messages, *time;
-                gchar *name;
-                GtkWidget *label;
-
-                strv = g_variant_get_strv (v, &len);
-
-                lang = language = messages = time = NULL;
-                for (i = 0; strv[i]; i++) {
-                        if (g_str_has_prefix (strv[i], "LANG=")) {
-                                lang = strip_quotes (strv[i] + strlen ("LANG="));
-                        }
-                        else if (g_str_has_prefix (strv[i], "LANGUAGE=")) {
-                                gchar *tmp = strip_quotes (strv[i] + strlen ("LANGUAGE="));
-                                gchar **tokens = g_strsplit (tmp, ":", 2);
-                                language = g_strdup (tokens[0]);
-                                g_free (tmp);
-                                g_strfreev (tokens);
-                        }
-                        else if (g_str_has_prefix (strv[i], "LC_MESSAGES=")) {
-                                messages = strip_quotes (strv[i] + strlen ("LC_MESSAGES="));
-                        }
-                        else if (g_str_has_prefix (strv[i], "LC_TIME=")) {
-                                time = strip_quotes (strv[i] + strlen ("LC_TIME="));
-                        }
-                }
-                if (!language) {
-                        if (messages)
-                                language = g_strdup (messages);
-                        else
-                                language = g_strdup (lang);
-                }
-                if (!time) {
-                        time = g_strdup (lang);
-                }
-
-                if (language) {
-                        name = gdm_get_language_from_name (language, NULL);
-                        label = WID ("system_display_language");
-                        gtk_label_set_text (GTK_LABEL (label), name);
-                        g_free (name);
-                        g_object_set_data_full (G_OBJECT (label), "language", g_strdup (lang), g_free);
-                }
-
-                if (time) {
-                        name = gdm_get_region_from_name (time, NULL);
-                        label = WID ("system_format");
-                        gtk_label_set_text (GTK_LABEL (label), name);
-                        g_free (name);
-                        g_object_set_data_full (G_OBJECT (label), "region", g_strdup (time), g_free);
-                }
-                g_variant_unref (v);
-                g_free (lang);
-                g_free (language);
-                g_free (messages);
-                g_free (time);
-        }
-
-        label = WID ("system_input_source");
-        v = g_dbus_proxy_get_cached_property (proxy, "X11Layout");
-        if (v) {
-                layouts = g_strsplit (g_variant_get_string (v, NULL), ",", -1);
-                g_object_set_data_full (G_OBJECT (label), "input_source",
-                                        g_variant_dup_string (v, NULL), g_free);
-                g_variant_unref (v);
-        } else {
-                g_object_set_data_full (G_OBJECT (label), "input_source", NULL, g_free);
-                update_copy_button (dialog);
-                return;
-        }
-
-        variants = NULL;
-        g_object_set_data_full (G_OBJECT (label), "input_variants", NULL, g_free);
-
-        w = g_dbus_proxy_get_cached_property (proxy, "X11Variant");
-        if (w) {
-                const char *variants_str;
-
-                variants_str = g_variant_get_string (w, NULL);
-                g_debug ("Got variants '%s'", variants_str);
-                if (variants_str && *variants_str != '\0') {
-                        variants = g_strsplit (variants_str, ",", -1);
-                        g_object_set_data_full (G_OBJECT (label), "input_variants",
-                                                g_strdup (variants_str), g_free);
-                }
-                g_variant_unref (w);
-        }
-
-        if (variants && variants[0])
-                n = MIN (g_strv_length (layouts), g_strv_length (variants));
-        else
-                n = g_strv_length (layouts);
-
-        xkb_info = gnome_xkb_info_new ();
-        disp = g_string_new ("");
-        for (i = 0; i < n && layouts[i][0]; i++) {
-                const char *name;
-                char *id;
-
-                if (variants && variants[i] && variants[i][0])
-                        id = g_strdup_printf ("%s+%s", layouts[i], variants[i]);
-                else
-                        id = g_strdup (layouts[i]);
-
-                gnome_xkb_info_get_layout_info (xkb_info, id, &name, NULL, NULL, NULL);
-                if (disp->str[0] != '\0')
-                        disp = g_string_append (disp, ", ");
-                disp = g_string_append (disp, name ? name : id);
-
-                g_free (id);
-        }
-        gtk_label_set_text (GTK_LABEL (label), disp->str);
-        g_string_free (disp, TRUE);
-
-        g_strfreev (variants);
-        g_strfreev (layouts);
-        g_object_unref (xkb_info);
-
-        update_copy_button (dialog);
-}
-
-static void
-localed_proxy_ready (GObject      *source,
-                     GAsyncResult *res,
-                     GtkBuilder   *dialog)
-{
-        GError *error = NULL;
-
-        localed_proxy = g_dbus_proxy_new_finish (res, &error);
-
-        if (!localed_proxy) {
-                g_warning ("Failed to contact localed: %s\n", error->message);
-                g_error_free (error);
-                return;
-        }
-
-        g_object_weak_ref (G_OBJECT (dialog), (GWeakNotify) g_object_unref, localed_proxy);
-
-        g_signal_connect (localed_proxy, "g-properties-changed",
-                          G_CALLBACK (on_localed_properties_changed), dialog);
-
-        on_localed_properties_changed (localed_proxy, NULL, NULL, dialog);
-}
-
-static void
-copy_settings (GtkButton *button, GtkBuilder *dialog)
-{
-        const gchar *language;
-        const gchar *region;
-        const gchar *layout;
-        const gchar *variants;
-        GtkWidget *label;
-        GVariantBuilder *b;
-        gchar *s;
-        gchar *command;
-        gchar *lang;
-        GError *error = NULL;
-        gint i;
-
-        label = WID ("user_display_language");
-        language = g_object_get_data (G_OBJECT (label), "language");
-        label = WID ("user_format");
-        region = g_object_get_data (G_OBJECT (label), "region");
-
-        /* Get locale that corresponds to the language */
-        command = g_strconcat ("/usr/share/language-tools/language2locale ", language, NULL);
-        if (!g_spawn_command_line_sync (command, &lang, NULL, NULL, &error)) {
-                g_warning ("Couldn't get LANG locale: %s", error->message);
-                g_error_free (error);
-                g_free (command);
-                return;
-        }
-        g_free (command);
-        g_strchomp (lang);
-        if (strlen (lang) == 0) {
-                g_warning ("Couldn't get LANG locale -- Copying interrupted");
-                return;
-        }
-
-        b = g_variant_builder_new (G_VARIANT_TYPE ("as"));
-        s = g_strconcat ("LANG=", lang, NULL);
-        g_variant_builder_add (b, "s", s);
-        g_free (lang);
-        g_free (s);
-        s = g_strconcat ("LANGUAGE=", language, NULL);
-        g_variant_builder_add (b, "s", s);
-        g_free (s);
-        const gchar *format_categories[] = { "LC_NUMERIC", "LC_TIME",
-           "LC_MONETARY", "LC_PAPER", "LC_IDENTIFICATION", "LC_NAME",
-           "LC_ADDRESS", "LC_TELEPHONE", "LC_MEASUREMENT", NULL };
-        for (i = 0; format_categories[i] != NULL; i++) {
-                s = g_strconcat (format_categories[i], "=", region, NULL);
-                g_variant_builder_add (b, "s", s);
-                g_free (s);
-        }
-
-        g_dbus_proxy_call (localed_proxy,
-                           "SetLocale",
-                           g_variant_new ("(asb)", b, TRUE),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           -1, NULL, NULL, NULL);
-        g_variant_builder_unref (b);
-
-        label = WID ("user_input_source");
-        layout = g_object_get_data (G_OBJECT (label), "input_source");
-        variants = g_object_get_data (G_OBJECT (label), "input_variants");
-
-        if (layout == NULL || layout[0] == '\0') {
-                g_debug ("Not calling SetX11Keyboard, as there are no XKB input sources in the user's settings");
-                return;
-        }
-
-        g_dbus_proxy_call (localed_proxy,
-                           "SetX11Keyboard",
-                           g_variant_new ("(ssssbb)", layout, "", variants ? variants : "", "", TRUE, TRUE),
-                           G_DBUS_CALL_FLAGS_NONE,
-                           -1, NULL, NULL, NULL);
-}
-
-static void
-on_permission_changed (GPermission *permission,
-                       GParamSpec  *pspec,
-                       GtkBuilder  *dialog)
-{
-        GtkWidget *button;
-        GtkWidget *label;
-        gboolean can_acquire;
-        gboolean allowed;
-
-        if (permission) {
-                can_acquire = g_permission_get_can_acquire (permission);
-                allowed = g_permission_get_allowed (permission);
-        }
-        else {
-                can_acquire = FALSE;
-                allowed = FALSE;
-        }
-
-        button = WID ("copy_settings_button");
-        label = WID ("system-title");
-
-        if (!allowed && !can_acquire) {
-                gtk_label_set_text (GTK_LABEL (label),
-                                    _("The login screen, system accounts and new user accounts use the system-wide Region and Language settings."));
-                gtk_widget_hide (button);
-        }
-        else {
-                gtk_label_set_text (GTK_LABEL (label),
-                                    _("The login screen, system accounts and new user accounts use the system-wide Region and Language settings. You may change the system settings to match yours."));
-                gtk_widget_show (button);
-                if (allowed) {
-                        gtk_button_set_label (GTK_BUTTON (button), _("Copy Settings"));
-                }
-                else {
-                        gtk_button_set_label (GTK_BUTTON (button), _("Copy Settings..."));
-                }
-        }
-}
-
-void
-setup_system (GtkBuilder *dialog)
-{
-        gchar *language;
-        GDBusConnection *bus;
-        GtkWidget *button;
-
-        localed_permission = polkit_permission_new_sync ("org.freedesktop.locale1.set-locale", NULL, NULL, NULL);
-        if (localed_permission == NULL) {
-                GtkWidget *tab_widget, *notebook;
-                int num;
-
-                tab_widget = WID ("table3");
-                notebook = WID ("region_notebook");
-                num = gtk_notebook_page_num (GTK_NOTEBOOK (notebook), tab_widget);
-                gtk_notebook_remove_page (GTK_NOTEBOOK (notebook), num);
-                return;
-        }
-
-        g_object_weak_ref (G_OBJECT (dialog), (GWeakNotify) g_object_unref, localed_permission);
-        g_signal_connect (localed_permission, "notify",
-                          G_CALLBACK (on_permission_changed), dialog);
-        on_permission_changed (localed_permission, NULL, dialog);
-
-
-        button = WID ("copy_settings_button");
-        g_signal_connect (button, "clicked",
-                          G_CALLBACK (copy_settings), dialog);
-
-
-        locale_settings = g_settings_new ("org.gnome.system.locale");
-        g_signal_connect (locale_settings, "changed::region",
-                          G_CALLBACK (locale_settings_changed), dialog);
-        g_object_weak_ref (G_OBJECT (dialog), (GWeakNotify) g_object_unref, locale_settings);
-
-        input_sources_settings = g_settings_new ("org.gnome.desktop.input-sources");
-        g_signal_connect (input_sources_settings, "changed::sources",
-                          G_CALLBACK (input_sources_changed), dialog);
-        g_object_weak_ref (G_OBJECT (dialog), (GWeakNotify) g_object_unref, input_sources_settings);
-
-        /* Display user settings */
-        language = cc_common_language_get_property ("Language");
-        system_update_language (dialog, language);
-        g_free (language);
-
-        locale_settings_changed (locale_settings, "region", dialog);
-
-        input_sources_changed (input_sources_settings, "sources", dialog);
-
-        bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, NULL);
-        g_dbus_proxy_new (bus,
-                           G_DBUS_PROXY_FLAGS_NONE,
-                           NULL,
-                           "org.freedesktop.locale1",
-                           "/org/freedesktop/locale1",
-                           "org.freedesktop.locale1",
-                           NULL,
-                           (GAsyncReadyCallback) localed_proxy_ready,
-                           dialog);
-        g_object_unref (bus);
-}
diff --git a/panels/region/gnome-region-panel-system.h b/panels/region/gnome-region-panel-system.h
deleted file mode 100644
index b76dec2..0000000
--- a/panels/region/gnome-region-panel-system.h
+++ /dev/null
@@ -1,34 +0,0 @@
-/*
- * Copyright (C) 2011 Rodrigo Moya
- *
- * Written by: Rodrigo Moya <rodrigo@gnome.org>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2, or (at your option)
- * any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
- * 02111-1307, USA.
- */
-
-#ifndef __GNOME_REGION_PANEL_SYSTEM_H
-#define __GNOME_REGION_PANEL_SYSTEM_H
-
-#include <gtk/gtk.h>
-
-void setup_system           (GtkBuilder *builder);
-void system_update_language (GtkBuilder  *builder,
-                             const gchar *language);
-void locale_settings_changed (GSettings   *settings,
-                              const gchar *key,
-                              GtkBuilder  *dialog);
-
-#endif
diff --git a/panels/region/gnome-region-panel.ui b/panels/region/gnome-region-panel.ui
deleted file mode 100644
index f62acc5..0000000
--- a/panels/region/gnome-region-panel.ui
+++ /dev/null
@@ -1,1432 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkAdjustment" id="adjustment1">
-    <property name="lower">100</property>
-    <property name="upper">2000</property>
-    <property name="value">500</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment10">
-    <property name="lower">1</property>
-    <property name="upper">100000</property>
-    <property name="value">1</property>
-    <property name="step_increment">1</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment2">
-    <property name="lower">10</property>
-    <property name="upper">110</property>
-    <property name="value">30</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment3">
-    <property name="lower">100</property>
-    <property name="upper">2500</property>
-    <property name="value">1000</property>
-    <property name="step_increment">200</property>
-    <property name="page_increment">200</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment4">
-    <property name="upper">500</property>
-    <property name="value">0.5</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment5">
-    <property name="upper">900</property>
-    <property name="value">0.5</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment6">
-    <property name="upper">3000</property>
-    <property name="value">1800</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment7">
-    <property name="lower">10</property>
-    <property name="upper">1000</property>
-    <property name="value">300</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment8">
-    <property name="lower">10</property>
-    <property name="upper">2000</property>
-    <property name="value">300</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment9">
-    <property name="lower">1</property>
-    <property name="upper">100000</property>
-    <property name="value">1</property>
-    <property name="step_increment">1</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkListStore" id="display_language_liststore"/>
-  <object class="GtkDialog" id="region_dialog">
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes">Region and Language</property>
-    <property name="default_width">600</property>
-    <property name="default_height">430</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="dialog-vbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action_area1">
-            <property name="can_focus">False</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="region_vbox">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-            <property name="border_width">5</property>
-            <property name="spacing">12</property>
-            <child>
-              <object class="GtkNotebook" id="region_notebook">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="border_width">10</property>
-                <child>
-                  <object class="GtkVBox" id="vbox2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="border_width">12</property>
-                    <property name="spacing">12</property>
-                    <child>
-                      <object class="GtkLabel" id="label4">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Select a display language (change will be applied next time you log in)</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkBox" id="hbox1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="orientation">vertical</property>
-                        <child>
-                          <object class="GtkScrolledWindow" id="language-swindow">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="hscrollbar_policy">never</property>
-                            <property name="shadow_type">in</property>
-                            <child>
-                              <object class="GtkTreeView" id="display_language_treeview">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="headers_visible">False</property>
-                                <child internal-child="selection">
-                                  <object class="GtkTreeSelection" id="language-treeview-selection"/>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkToolbar" id="language-toolbar">
-                            <property name="visible">False</property>
-                            <property name="can_focus">False</property>
-                            <property name="toolbar_style">icons</property>
-                            <property name="show_arrow">False</property>
-                            <property name="icon_size">1</property>
-                            <style>
-                              <class name="inline-toolbar"/>
-                            </style>
-                            <style>
-                              <class name="inline-toolbar"/>
-                            </style>
-                            <child>
-                              <object class="GtkToolButton" id="language_add">
-                                <property name="use_action_appearance">False</property>
-                                <property name="visible">True</property>
-                                <property name="label" translatable="yes">Add Language</property>
-                                <property name="can_focus">False</property>
-                                <property name="use_underline">True</property>
-                                <property name="icon_name">list-add-symbolic</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="homogeneous">True</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkVBox" id="vbox3">
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkLabel" id="label23">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="use_underline">True</property>
-                                <property name="label" translatable="yes">Add Language</property>
-                              </object>
-                              <packing>
-                                <property name="expand">True</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLinkButton" id="linkbutton1">
-                                <property name="label" translatable="yes">Install languages...</property>
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="receives_default">True</property>
-                                <property name="has_tooltip">True</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                </child>
-                <child type="tab">
-                  <object class="GtkLabel" id="label1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="label" translatable="yes">Language</property>
-                  </object>
-                  <packing>
-                    <property name="tab_fill">False</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkGrid" id="table1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="margin_left">12</property>
-                    <property name="margin_right">12</property>
-                    <property name="margin_top">12</property>
-                    <property name="margin_bottom">12</property>
-                    <property name="row_spacing">6</property>
-                    <property name="column_spacing">12</property>
-                    <child>
-                      <object class="GtkLabel" id="label5">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="halign">start</property>
-                        <property name="label" translatable="yes">Select a region (change will be applied the next time you log in)</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">0</property>
-                        <property name="top_attach">0</property>
-                        <property name="width">2</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkBox" id="region-box">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="orientation">vertical</property>
-                        <child>
-                          <object class="GtkScrolledWindow" id="region-swindow">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="vexpand">True</property>
-                            <property name="hscrollbar_policy">never</property>
-                            <property name="shadow_type">in</property>
-                            <child>
-                              <object class="GtkTreeView" id="region_selector">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="headers_visible">False</property>
-                                <child internal-child="selection">
-                                  <object class="GtkTreeSelection" id="region-treeview-selection"/>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkToolbar" id="region-toolbar">
-                            <property name="toolbar_style">icons</property>
-                            <property name="show_arrow">False</property>
-                            <property name="icon_size">1</property>
-                            <property name="visible">True</property>
-                            <style>
-                              <class name="inline-toolbar"/>
-                            </style>
-                            <child>
-                              <object class="GtkToolButton" id="region_add">
-                                <property name="use_action_appearance">False</property>
-                                <property name="label" translatable="yes">Add Region</property>
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="use_underline">True</property>
-                                <property name="icon_name">list-add-symbolic</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="homogeneous">True</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkToolButton" id="region_remove">
-                                <property name="use_action_appearance">False</property>
-                                <property name="visible">True</property>
-                                <property name="label" translatable="yes">Remove Region</property>
-                                <property name="sensitive">False</property>
-                                <property name="can_focus">False</property>
-                                <property name="use_underline">True</property>
-                                <property name="icon_name">list-remove-symbolic</property>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="homogeneous">True</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">0</property>
-                        <property name="top_attach">1</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkFrame" id="frame1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label_xalign">0</property>
-                        <property name="shadow_type">none</property>
-                        <child>
-                          <object class="GtkAlignment" id="alignment2">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="left_padding">12</property>
-                            <child>
-                              <object class="GtkTable" id="table2">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="n_rows">9</property>
-                                <property name="n_columns">2</property>
-                                <child>
-                                  <object class="GtkLabel" id="label7">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                    <property name="label" translatable="yes">Dates</property>
-                                  </object>
-                                  <packing>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="full_date_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="full_day_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">1</property>
-                                    <property name="bottom_attach">2</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="short_day_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">2</property>
-                                    <property name="bottom_attach">3</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="shortest_day_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">3</property>
-                                    <property name="bottom_attach">4</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="label8">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                    <property name="label" translatable="yes">Times</property>
-                                  </object>
-                                  <packing>
-                                    <property name="top_attach">4</property>
-                                    <property name="bottom_attach">5</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="full_time_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">4</property>
-                                    <property name="bottom_attach">5</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="short_time_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">5</property>
-                                    <property name="bottom_attach">6</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="label9">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                    <property name="label" translatable="yes">Numbers</property>
-                                  </object>
-                                  <packing>
-                                    <property name="top_attach">6</property>
-                                    <property name="bottom_attach">7</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="numbers_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">6</property>
-                                    <property name="bottom_attach">7</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="label10">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                    <property name="label" translatable="yes">Currency</property>
-                                  </object>
-                                  <packing>
-                                    <property name="top_attach">7</property>
-                                    <property name="bottom_attach">8</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="currency_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">7</property>
-                                    <property name="bottom_attach">8</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="label11">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                    <property name="label" translatable="yes">Measurement</property>
-                                  </object>
-                                  <packing>
-                                    <property name="top_attach">8</property>
-                                    <property name="bottom_attach">9</property>
-                                    <property name="x_options">GTK_FILL</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkLabel" id="measurement_format">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="xalign">0</property>
-                                  </object>
-                                  <packing>
-                                    <property name="left_attach">1</property>
-                                    <property name="right_attach">2</property>
-                                    <property name="top_attach">8</property>
-                                    <property name="bottom_attach">9</property>
-                                    <property name="y_options">GTK_FILL</property>
-                                    <property name="x_padding">3</property>
-                                    <property name="y_padding">3</property>
-                                  </packing>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                        </child>
-                        <child type="label">
-                          <object class="GtkLabel" id="label6">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">Examples</property>
-                            <attributes>
-                              <attribute name="weight" value="bold"/>
-                            </attributes>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">1</property>
-                        <property name="width">1</property>
-                        <property name="height">1</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-                <child type="tab">
-                  <object class="GtkLabel" id="label3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="label" translatable="yes">Formats</property>
-                  </object>
-                  <packing>
-                    <property name="position">1</property>
-                    <property name="tab_fill">False</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkVBox" id="vbox5">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="border_width">12</property>
-                    <property name="spacing">12</property>
-                    <child>
-                      <object class="GtkLabel" id="label24">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="label" translatable="yes">Select keyboards or other input sources</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkHBox" id="hbox3">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="spacing">12</property>
-                        <child>
-                          <object class="GtkVBox" id="vbox6">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkScrolledWindow" id="input_sources_swindow">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="shadow_type">in</property>
-                                <child>
-                                  <object class="GtkTreeView" id="active_input_sources">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">True</property>
-                                    <property name="headers_visible">False</property>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">True</property>
-                                <property name="fill">True</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkToolbar" id="input-toolbar">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="toolbar_style">icons</property>
-                                <property name="show_arrow">False</property>
-                                <property name="icon_size">1</property>
-                                <style>
-                                  <class name="inline-toolbar"/>
-                                </style>
-                                <child>
-                                  <object class="GtkToolItem" id="i_s_ar_item">
-                                    <property name="visible">True</property>
-                                    <child>
-                                      <object class="GtkBox" id="i_s_ar_box">
-                                        <property name="visible">True</property>
-                                        <child>
-                                           <object class="GtkButton" id="input_source_add">
-                                             <property name="visible">True</property>
-                                             <child internal-child="accessible">
-                                               <object class="AtkObject" id="i_s_a_a11y">
-                                                 <property name="accessible-name" translatable="yes">Add Input Source</property>
-                                               </object>
-                                             </child>
-                                             <child>
-                                                <object class="GtkImage" id="i_s_a_image">
-
-                                                  <property name="visible">True</property>
-                                                  <property name="icon-name">list-add-symbolic</property>
-                                                  <property name="icon-size">1</property>
-                                                </object>
-                                             </child>
-                                           </object>
-                                        </child>
-                                        <child>
-                                           <object class="GtkButton" id="input_source_remove">
-                                             <property name="visible">True</property>
-                                             <child internal-child="accessible">
-                                               <object class="AtkObject" id="i_s_r_a11y">
-                                                 <property name="accessible-name" translatable="yes">Remove Input Source</property>
-                                               </object>
-                                             </child>
-                                             <child>
-                                                <object class="GtkImage" id="i_s_r_image">
-                                                  <property name="visible">True</property>
-                                                  <property name="icon-name">list-remove-symbolic</property>
-                                                  <property name="icon-size">1</property>
-                                                </object>
-                                             </child>
-                                           </object>
-                                        </child>
-                                      </object>
-                                    </child>
-                                  </object>
-                                </child>
-
-                                <child>
-                                  <object class="GtkSeparatorToolItem" id="sep1">
-                                    <property name="visible">True</property>
-                                    <property name="draw">False</property>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">True</property>
-                                  </packing>
-                                </child>
-
-                                <child>
-                                  <object class="GtkToolItem" id="i_s_ud_item">
-                                    <property name="visible">True</property>
-                                    <child>
-                                      <object class="GtkBox" id="i_s_ud_box">
-                                        <property name="visible">True</property>
-                                        <child>
-                                           <object class="GtkButton" id="input_source_move_up">
-                                             <property name="visible">True</property>
-                                             <child internal-child="accessible">
-                                               <object class="AtkObject" id="i_s_u_a11y">
-                                                 <property name="accessible-name" translatable="yes">Move Input Source Up</property>
-                                               </object>
-                                             </child>
-                                             <child>
-                                                <object class="GtkImage" id="i_s_u_image">
-
-                                                  <property name="visible">True</property>
-                                                  <property name="icon-name">go-up-symbolic</property>
-                                                  <property name="icon-size">1</property>
-                                                </object>
-                                             </child>
-                                           </object>
-                                        </child>
-                                        <child>
-                                           <object class="GtkButton" id="input_source_move_down">
-                                             <property name="visible">True</property>
-                                             <child internal-child="accessible">
-                                               <object class="AtkObject" id="i_s_d_a11y">
-                                                 <property name="accessible-name" translatable="yes">Move Input Source Down</property>
-                                               </object>
-                                             </child>
-                                             <child>
-                                                <object class="GtkImage" id="i_s_d_image">
-                                                  <property name="visible">True</property>
-                                                  <property name="icon-name">go-down-symbolic</property>
-                                                  <property name="icon-size">1</property>
-                                                </object>
-                                             </child>
-                                           </object>
-                                        </child>
-                                      </object>
-                                    </child>
-                                  </object>
-                                </child>
-
-                                <child>
-                                  <object class="GtkSeparatorToolItem" id="sep2">
-                                    <property name="visible">True</property>
-                                    <property name="draw">False</property>
-                                    <property name="hexpand">True</property>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">True</property>
-                                  </packing>
-                                </child>
-
-                                <child>
-                                  <object class="GtkToolItem" id="i_s_sp_item">
-                                    <property name="visible">True</property>
-                                    <child>
-                                      <object class="GtkBox" id="i_s_sp_box">
-                                        <property name="visible">True</property>
-                                        <child>
-                                           <object class="GtkButton" id="input_source_settings">
-                                             <property name="visible">True</property>
-                                             <child internal-child="accessible">
-                                               <object class="AtkObject" id="i_s_s_a11y">
-                                                 <property name="accessible-name" translatable="yes">Input Source Settings</property>
-                                               </object>
-                                             </child>
-                                             <child>
-                                                <object class="GtkImage" id="i_s_s_image">
-
-                                                  <property name="visible">True</property>
-                                                  <property name="icon_name">preferences-system-symbolic</property>
-                                                  <property name="icon_size">1</property>
-                                                  <property name="pixel_size">16</property>
-                                                </object>
-                                             </child>
-                                           </object>
-                                        </child>
-                                        <child>
-                                           <object class="GtkButton" id="input_source_show">
-                                             <property name="visible">True</property>
-                                             <child internal-child="accessible">
-                                               <object class="AtkObject" id="i_s_p_a11y">
-                                                 <property name="accessible-name" translatable="yes">Show Keyboard Layout</property>
-                                               </object>
-                                             </child>
-                                             <child>
-                                                <object class="GtkImage" id="i_s_p_image">
-
-                                                  <property name="visible">True</property>
-                                                  <property name="icon_name">input-keyboard-symbolic</property>
-                                                  <property name="icon-size">1</property>
-                                                </object>
-                                             </child>
-                                           </object>
-                                        </child>
-                                      </object>
-                                    </child>
-                                  </object>
-                                </child>
-
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">True</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkVBox" id="vbox124266413adc">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkFrame" id="frame4">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="label_xalign">0</property>
-                                <property name="shadow_type">none</property>
-                                <child>
-                                  <object class="GtkAlignment" id="alignment3">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="left_padding">12</property>
-                                    <child>
-                                      <object class="GtkGrid" id="shortcuts-grid">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="margin_top">6</property>
-                                        <property name="row_spacing">6</property>
-                                        <property name="column_spacing">6</property>
-                                        <child>
-                                          <object class="GtkLabel" id="prev-source-label">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="xalign">0</property>
-                                            <property name="label" translatable="yes">Switch to previous source</property>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">0</property>
-                                            <property name="top_attach">0</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                        <child>
-                                          <object class="GtkLabel" id="prev-source-shortcut-label">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="halign">end</property>
-                                            <property name="hexpand">True</property>
-                                            <property name="label" translatable="yes">Ctrl+Alt+Space</property>
-                                            <style><class name="dim-label-ucc"/></style>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">1</property>
-                                            <property name="top_attach">0</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                        <child>
-                                          <object class="GtkLabel" id="next-source-label">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="xalign">0</property>
-                                            <property name="label" translatable="yes">Switch to next source</property>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">0</property>
-                                            <property name="top_attach">1</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                        <child>
-                                          <object class="GtkLabel" id="next-source-shortcut-label">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="halign">end</property>
-                                            <property name="hexpand">True</property>
-                                            <property name="label" translatable="yes">Ctrl+Alt+Shift+Space</property>
-                                            <style><class name="dim-label-ucc"/></style>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">1</property>
-                                            <property name="top_attach">1</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                        <child>
-                                          <object class="GtkLinkButton" id="jump-to-shortcuts">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">True</property>
-                                            <property name="label" translatable="yes">Shortcut Settings</property>
-                                            <property name="halign">end</property>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">1</property>
-                                            <property name="top_attach">2</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                      </object>
-                                    </child>
-                                  </object>
-                                </child>
-                                <child type="label">
-                                  <object class="GtkLabel" id="shortcuts-frame-label">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="label" translatable="yes">Shortcuts</property>
-                                    <property name="use_markup">True</property>
-                                    <attributes>
-                                      <attribute name="weight" value="bold"/>
-                                    </attributes>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">False</property>
-                                <property name="position">0</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkFrame" id="framea751fbb5f03a">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="label_xalign">0</property>
-                                <property name="shadow_type">none</property>
-                                <child>
-                                  <object class="GtkAlignment" id="alignment2a898e7d1ebf">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="left_padding">12</property>
-                                    <child>
-                                      <object class="GtkGrid" id="options-grid">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="margin_top">6</property>
-                                        <property name="row_spacing">6</property>
-                                        <property name="column_spacing">6</property>
-                                        <child>
-                                          <object class="GtkRadioButton" id="per-window-radio-false">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">True</property>
-                                            <property name="xalign">0</property>
-                                            <property name="label" translatable="yes">Use the same source for all windows</property>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">0</property>
-                                            <property name="top_attach">0</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                        <child>
-                                          <object class="GtkRadioButton" id="per-window-radio-true">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">True</property>
-                                            <property name="xalign">0</property>
-                                            <property name="label" translatable="yes">Allow different sources for each window</property>
-                                            <property name="group">per-window-radio-false</property>
-                                          </object>
-                                          <packing>
-                                            <property name="left_attach">0</property>
-                                            <property name="top_attach">1</property>
-                                            <property name="width">1</property>
-                                            <property name="height">1</property>
-                                          </packing>
-                                        </child>
-                                      </object>
-                                    </child>
-                                  </object>
-                                </child>
-                                <child type="label">
-                                  <object class="GtkLabel" id="options-frame-label">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <property name="label" translatable="yes">Options</property>
-                                    <property name="use_markup">True</property>
-                                    <attributes>
-                                      <attribute name="weight" value="bold"/>
-                                    </attributes>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                                <property name="fill">False</property>
-                                <property name="position">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="position">3</property>
-                  </packing>
-                </child>
-                <child type="tab">
-                  <object class="GtkLabel" id="label13">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="label" translatable="yes">Input Sources</property>
-                  </object>
-                  <packing>
-                    <property name="position">3</property>
-                    <property name="tab_fill">False</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkTable" id="table3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="n_rows">3</property>
-                    <property name="n_columns">2</property>
-                    <property name="column_spacing">12</property>
-                    <property name="row_spacing">12</property>
-                    <child>
-                      <object class="GtkLabel" id="system-title">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="xalign">0</property>
-                        <property name="xpad">6</property>
-                        <property name="ypad">6</property>
-                        <property name="label" translatable="yes">The login screen, system accounts and new user accounts use the system-wide Region and Language settings. You may change the system settings to match yours.</property>
-                        <property name="wrap">True</property>
-                        <property name="width_chars">60</property>
-                      </object>
-                      <packing>
-                        <property name="right_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_SHRINK</property>
-                        <property name="x_padding">3</property>
-                        <property name="y_padding">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkFrame" id="frame2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label_xalign">0</property>
-                        <property name="shadow_type">none</property>
-                        <child>
-                          <object class="GtkTable" id="table4">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="margin_left">12</property>
-                            <property name="margin_top">12</property>
-                            <property name="n_rows">3</property>
-                            <property name="n_columns">2</property>
-                            <property name="column_spacing">3</property>
-                            <property name="row_spacing">3</property>
-                            <child>
-                              <object class="GtkLabel" id="label16">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes" comments="'display' means 'output' here, as in 'translated messages that are displayed to the user'">Display language:</property>
-                              </object>
-                              <packing>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="user_display_language">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="right_attach">2</property>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="label17">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="yalign">0</property>
-                                <property name="label" translatable="yes">Input source:</property>
-                              </object>
-                              <packing>
-                                <property name="top_attach">1</property>
-                                <property name="bottom_attach">2</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="user_input_source">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="yalign">0</property>
-                                <property name="wrap">True</property>
-                                <property name="width-chars">18</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="right_attach">2</property>
-                                <property name="top_attach">1</property>
-                                <property name="bottom_attach">2</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="label18">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Format:</property>
-                              </object>
-                              <packing>
-                                <property name="top_attach">2</property>
-                                <property name="bottom_attach">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="user_format">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="right_attach">2</property>
-                                <property name="top_attach">2</property>
-                                <property name="bottom_attach">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                          </object>
-                        </child>
-                        <child type="label">
-                          <object class="GtkLabel" id="label14">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">Your settings</property>
-                            <attributes>
-                              <attribute name="weight" value="bold"/>
-                            </attributes>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="y_options">GTK_FILL</property>
-                        <property name="x_padding">3</property>
-                        <property name="y_padding">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkFrame" id="frame3">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="label_xalign">0</property>
-                        <property name="shadow_type">none</property>
-                        <child>
-                          <object class="GtkTable" id="table5">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="margin_left">12</property>
-                            <property name="margin_top">12</property>
-                            <property name="n_rows">3</property>
-                            <property name="n_columns">2</property>
-                            <property name="column_spacing">3</property>
-                            <property name="row_spacing">3</property>
-                            <child>
-                              <object class="GtkLabel" id="label19">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Display language:</property>
-                              </object>
-                              <packing>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="system_display_language">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="right_attach">2</property>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="label20">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="yalign">0</property>
-                                <property name="label" translatable="yes">Input source:</property>
-                              </object>
-                              <packing>
-                                <property name="top_attach">1</property>
-                                <property name="bottom_attach">2</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="system_input_source">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="yalign">0</property>
-                                <property name="wrap">True</property>
-                                <property name="width-chars">18</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="right_attach">2</property>
-                                <property name="top_attach">1</property>
-                                <property name="bottom_attach">2</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="label21">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                                <property name="label" translatable="yes">Format:</property>
-                              </object>
-                              <packing>
-                                <property name="top_attach">2</property>
-                                <property name="bottom_attach">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkLabel" id="system_format">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="xalign">0</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="right_attach">2</property>
-                                <property name="top_attach">2</property>
-                                <property name="bottom_attach">3</property>
-                                <property name="y_options">GTK_FILL</property>
-                                <property name="x_padding">3</property>
-                                <property name="y_padding">3</property>
-                              </packing>
-                            </child>
-                          </object>
-                        </child>
-                        <child type="label">
-                          <object class="GtkLabel" id="label15">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">System settings</property>
-                            <attributes>
-                              <attribute name="weight" value="bold"/>
-                            </attributes>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="y_options">GTK_FILL</property>
-                        <property name="x_padding">3</property>
-                        <property name="y_padding">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="copy_settings_button">
-                        <property name="label" translatable="yes">Copy Settings...</property>
-                        <property name="use_action_appearance">False</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_SHRINK</property>
-                        <property name="y_options">GTK_SHRINK</property>
-                        <property name="x_padding">3</property>
-                        <property name="y_padding">3</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <placeholder/>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="position">4</property>
-                  </packing>
-                </child>
-                <child type="tab">
-                  <object class="GtkLabel" id="label12">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="label" translatable="yes">System</property>
-                  </object>
-                  <packing>
-                    <property name="position">4</property>
-                    <property name="tab_fill">False</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">False</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="system-input-source-sizegroup">
-    <property name="mode">vertical</property>
-    <widgets>
-      <widget name="user_input_source"/>
-      <widget name="system_input_source"/>
-    </widgets>
-  </object>
-</interface>
diff --git a/panels/region/gtkentryaccel.c b/panels/region/gtkentryaccel.c
deleted file mode 100644
index 710ee06..0000000
--- a/panels/region/gtkentryaccel.c
+++ /dev/null
@@ -1,653 +0,0 @@
-#include "gtkentryaccel.h"
-#include <glib/gi18n.h>
-
-#define GTK_ENTRY_ACCEL_MODIFIER_MASK (GDK_MODIFIER_MASK & \
-                                       ~GDK_LOCK_MASK & \
-                                       ~GDK_MOD2_MASK & \
-                                       ~GDK_MOD3_MASK & \
-                                       ~GDK_MOD4_MASK & \
-                                       ~GDK_MOD5_MASK & \
-                                       ~GDK_HYPER_MASK)
-
-#define GTK_TYPE_ENTRY_ACCEL_POST_ACTION (gtk_entry_accel_post_action_get_type ())
-#define GTK_ENTRY_ACCEL_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), GTK_TYPE_ENTRY_ACCEL, GtkEntryAccelPrivate))
-
-struct _GtkEntryAccelPrivate
-{
-  gchar *accel;
-
-  guint key;
-  guint code;
-  GdkModifierType mask;
-
-  GdkDevice *keyboard;
-  GdkDevice *pointer;
-
-  gboolean left_shift : 1;
-  gboolean right_shift : 1;
-  gboolean left_control : 1;
-  gboolean right_control : 1;
-  gboolean left_alt : 1;
-  gboolean right_alt : 1;
-  gboolean left_super : 1;
-  gboolean right_super : 1;
-};
-
-G_DEFINE_TYPE (GtkEntryAccel, gtk_entry_accel, GTK_TYPE_ENTRY);
-
-enum
-{
-  PROP_0,
-  PROP_ACCEL,
-  N_PROPERTIES
-};
-
-static GParamSpec *properties[N_PROPERTIES] = { NULL };
-
-enum
-{
-  SIGNAL_KEY_PRESSED,
-  N_SIGNALS
-};
-
-static guint signals[N_SIGNALS] = { 0 };
-
-static GType
-gtk_entry_accel_post_action_get_type (void)
-{
-  static GType type = 0;
-
-  if (G_UNLIKELY (type == 0))
-    {
-      static const GEnumValue values[] = {
-        { GTK_ENTRY_ACCEL_UPDATE, "GTK_ENTRY_ACCEL_UPDATE", "update" },
-        { GTK_ENTRY_ACCEL_CANCEL, "GTK_ENTRY_ACCEL_CANCEL", "cancel" },
-        { GTK_ENTRY_ACCEL_IGNORE, "GTK_ENTRY_ACCEL_IGNORE", "ignore" },
-        { GTK_ENTRY_ACCEL_PASS_THROUGH, "GTK_ENTRY_ACCEL_PASS_THROUGH", "pass-through" },
-        { 0, NULL, NULL }
-      };
-
-      type = g_enum_register_static (g_intern_static_string ("GtkEntryAccelPostAction"), values);
-    }
-
-  return type;
-}
-
-static void
-gtk_entry_accel_reset_modifier_states (GtkEntryAccel *entry)
-{
-  g_return_if_fail (GTK_IS_ENTRY_ACCEL (entry));
-
-  entry->priv->left_shift = FALSE;
-  entry->priv->right_shift = FALSE;
-  entry->priv->left_control = FALSE;
-  entry->priv->right_control = FALSE;
-  entry->priv->left_alt = FALSE;
-  entry->priv->right_alt = FALSE;
-  entry->priv->left_super = FALSE;
-  entry->priv->right_super = FALSE;
-}
-
-static gboolean
-gtk_entry_accel_get_modifier_state (GtkEntryAccel *entry,
-                                    guint          key)
-{
-  g_return_val_if_fail (GTK_IS_ENTRY_ACCEL (entry), FALSE);
-
-  switch (key)
-    {
-    case GDK_KEY_Shift_L:
-      return entry->priv->left_shift;
-    case GDK_KEY_Shift_R:
-      return entry->priv->right_shift;
-    case GDK_KEY_Control_L:
-      return entry->priv->left_control;
-    case GDK_KEY_Control_R:
-      return entry->priv->right_control;
-    case GDK_KEY_Meta_L:
-    case GDK_KEY_Alt_L:
-      return entry->priv->left_alt;
-    case GDK_KEY_Meta_R:
-    case GDK_KEY_Alt_R:
-      return entry->priv->right_alt;
-    case GDK_KEY_Super_L:
-      return entry->priv->left_super;
-    case GDK_KEY_Super_R:
-      return entry->priv->right_super;
-    }
-
-  return FALSE;
-}
-
-static void
-gtk_entry_accel_set_modifier_state (GtkEntryAccel *entry,
-                                    guint          key,
-                                    gboolean       state)
-{
-  g_return_if_fail (GTK_IS_ENTRY_ACCEL (entry));
-
-  switch (key)
-    {
-    case GDK_KEY_Shift_L:
-      entry->priv->left_shift = state;
-      break;
-    case GDK_KEY_Shift_R:
-      entry->priv->right_shift = state;
-      break;
-    case GDK_KEY_Control_L:
-      entry->priv->left_control = state;
-      break;
-    case GDK_KEY_Control_R:
-      entry->priv->right_control = state;
-      break;
-    case GDK_KEY_Meta_L:
-    case GDK_KEY_Alt_L:
-      entry->priv->left_alt = state;
-      break;
-    case GDK_KEY_Meta_R:
-    case GDK_KEY_Alt_R:
-      entry->priv->right_alt = state;
-      break;
-    case GDK_KEY_Super_L:
-      entry->priv->left_super = state;
-      break;
-    case GDK_KEY_Super_R:
-      entry->priv->right_super = state;
-      break;
-    }
-}
-
-static void
-gtk_entry_accel_update_text (GtkEntryAccel *entry)
-{
-  if (entry->priv->keyboard == NULL || entry->priv->pointer == NULL)
-    {
-      if (entry->priv->key != 0 || entry->priv->code != 0 || entry->priv->mask != 0)
-        {
-          gchar *label = gtk_accelerator_get_label_with_keycode (NULL,
-                                                                 entry->priv->key,
-                                                                 entry->priv->code,
-                                                                 entry->priv->mask);
-
-          gtk_entry_set_text (GTK_ENTRY (entry), label);
-
-          g_free (label);
-        }
-      else
-        gtk_entry_set_text (GTK_ENTRY (entry), "");
-    }
-  else
-    gtk_entry_set_text (GTK_ENTRY (entry), _("New accelerator…"));
-}
-
-static void
-gtk_entry_accel_set_key (GtkEntryAccel   *entry,
-                         guint            key,
-                         guint            code,
-                         GdkModifierType  mask)
-{
-  if (key != entry->priv->key || code != entry->priv->code || mask != entry->priv->mask)
-    {
-      entry->priv->key = key;
-      entry->priv->code = code;
-      entry->priv->mask = mask;
-
-      g_free (entry->priv->accel);
-
-      if (key != 0 || code != 0 || mask != 0)
-        entry->priv->accel = gtk_accelerator_name_with_keycode (NULL, key, code, mask);
-      else
-        entry->priv->accel = NULL;
-
-      g_object_notify_by_pspec (G_OBJECT (entry), properties[PROP_ACCEL]);
-    }
-
-  gtk_entry_accel_update_text (entry);
-}
-
-static void
-gtk_entry_accel_ungrab_input (GtkEntryAccel *entry,
-                              GdkEvent      *event)
-{
-  guint32 time = gdk_event_get_time (event);
-
-  if (entry->priv->keyboard != NULL && entry->priv->pointer != NULL)
-    gtk_grab_remove (GTK_WIDGET (entry));
-
-  if (entry->priv->keyboard != NULL)
-    {
-      gdk_device_ungrab (entry->priv->keyboard, time);
-      g_clear_object (&entry->priv->keyboard);
-    }
-
-  if (entry->priv->pointer != NULL)
-    {
-      gdk_device_ungrab (entry->priv->pointer, time);
-      g_clear_object (&entry->priv->pointer);
-    }
-
-  gtk_entry_accel_reset_modifier_states (entry);
-  gtk_entry_accel_update_text (entry);
-}
-
-static void
-gtk_entry_accel_grab_input (GtkEntryAccel *entry,
-                            GdkEvent      *event)
-{
-  GdkWindow *window = NULL;
-  GdkDevice *device = NULL;
-  GdkDevice *keyboard = NULL;
-  GdkDevice *pointer = NULL;
-  guint32 time;
-
-  if (entry->priv->keyboard != NULL && entry->priv->pointer != NULL)
-    return;
-
-  gtk_entry_accel_ungrab_input (entry, event);
-
-  if (event != NULL)
-    device = gdk_event_get_device (event);
-
-  if (device == NULL)
-    device = gtk_get_current_event_device ();
-
-  if (device == NULL)
-    return;
-
-  if (gdk_device_get_source (device) == GDK_SOURCE_KEYBOARD)
-    {
-      keyboard = device;
-      pointer = gdk_device_get_associated_device (device);
-    }
-  else
-    {
-      pointer = device;
-      keyboard = gdk_device_get_associated_device (device);
-    }
-
-  if (gdk_device_get_source (keyboard) != GDK_SOURCE_KEYBOARD)
-    return;
-
-  window = gtk_widget_get_window (GTK_WIDGET (entry));
-  time = gdk_event_get_time (event);
-
-  if (gdk_device_grab (keyboard,
-                       window,
-                       GDK_OWNERSHIP_WINDOW,
-                       FALSE,
-                       GDK_KEY_PRESS_MASK | GDK_KEY_RELEASE_MASK,
-                       NULL,
-                       time) != GDK_GRAB_SUCCESS)
-    return;
-
-  if (gdk_device_grab (pointer,
-                       window,
-                       GDK_OWNERSHIP_WINDOW,
-                       FALSE,
-                       GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK,
-                       NULL,
-                       time) != GDK_GRAB_SUCCESS)
-    {
-      gdk_device_ungrab (keyboard, time);
-
-      return;
-    }
-
-  gtk_grab_add (GTK_WIDGET (entry));
-
-  entry->priv->keyboard = g_object_ref (keyboard);
-  entry->priv->pointer = g_object_ref (pointer);
-}
-
-static void
-gtk_entry_accel_dispose (GObject *object)
-{
-  GtkEntryAccel *entry = GTK_ENTRY_ACCEL (object);
-
-  gtk_entry_accel_ungrab_input (entry, NULL);
-
-  G_OBJECT_CLASS (gtk_entry_accel_parent_class)->dispose (object);
-}
-
-static void
-gtk_entry_accel_finalize (GObject *object)
-{
-  GtkEntryAccel *entry = GTK_ENTRY_ACCEL (object);
-
-  g_free (entry->priv->accel);
-
-  G_OBJECT_CLASS (gtk_entry_accel_parent_class)->finalize (object);
-}
-
-static void
-gtk_entry_accel_get_property (GObject    *object,
-                              guint       property_id,
-                              GValue     *value,
-                              GParamSpec *pspec)
-{
-  GtkEntryAccel *entry = GTK_ENTRY_ACCEL (object);
-  const gchar *accel;
-
-  switch (property_id)
-    {
-    case PROP_ACCEL:
-      accel = gtk_entry_accel_get_accel (entry);
-      g_value_set_string (value, accel != NULL ? accel : "");
-      break;
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-      break;
-    }
-}
-
-static void
-gtk_entry_accel_set_property (GObject      *object,
-                              guint         property_id,
-                              const GValue *value,
-                              GParamSpec   *pspec)
-{
-  GtkEntryAccel *entry = GTK_ENTRY_ACCEL (object);
-
-  switch (property_id)
-    {
-    case PROP_ACCEL:
-      gtk_entry_accel_set_accel (entry, g_value_get_string (value));
-      break;
-
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-      break;
-    }
-}
-
-static gboolean
-gtk_entry_accel_button_press_event (GtkWidget      *widget,
-                                    GdkEventButton *event)
-{
-  if (event->button == 1)
-    {
-      GtkEntryAccel *entry = GTK_ENTRY_ACCEL (widget);
-
-      if (entry->priv->keyboard != NULL && entry->priv->pointer != NULL)
-        gtk_entry_accel_ungrab_input (entry, (GdkEvent *) event);
-      else
-        gtk_entry_accel_grab_input (entry, (GdkEvent *) event);
-
-      gtk_entry_accel_update_text (entry);
-    }
-
-  return TRUE;
-}
-
-static gboolean
-gtk_entry_accel_post_action_accumulator (GSignalInvocationHint *ihint,
-                                         GValue                *return_accu,
-                                         const GValue          *handler_return,
-                                         gpointer               data)
-{
-  GtkEntryAccelPostAction action = g_value_get_enum (return_accu);
-  GtkEntryAccelPostAction current_action = g_value_get_enum (handler_return);
-
-  if (action == GTK_ENTRY_ACCEL_UPDATE)
-    action = current_action;
-
-  g_value_set_enum (return_accu, action);
-
-  return action == GTK_ENTRY_ACCEL_UPDATE;
-}
-
-static GtkEntryAccelPostAction
-gtk_entry_accel_real_key_pressed (GtkEntryAccel   *entry,
-                                  guint           *key,
-                                  guint           *code,
-                                  GdkModifierType *mask)
-{
-  return GTK_ENTRY_ACCEL_UPDATE;
-}
-
-static GtkEntryAccelPostAction
-gtk_entry_accel_key_pressed (GtkEntryAccel   *entry,
-                             guint           *key,
-                             guint           *code,
-                             GdkModifierType *mask)
-{
-  GtkEntryAccelPostAction action;
-
-  g_signal_emit (entry,
-                 signals[SIGNAL_KEY_PRESSED],
-                 0,
-                 key,
-                 code,
-                 mask,
-                 &action);
-
-  return action;
-}
-
-static gboolean
-gtk_entry_accel_key_press_event (GtkWidget   *widget,
-                                 GdkEventKey *event)
-{
-  GtkEntryAccel *entry = GTK_ENTRY_ACCEL (widget);
-  guint key = event->keyval;
-  guint mask = event->state & GTK_ENTRY_ACCEL_MODIFIER_MASK;
-  gboolean grabbed = entry->priv->keyboard != NULL && entry->priv->pointer != NULL;
-
-  gtk_entry_accel_set_modifier_state (entry, key, TRUE);
-
-  return ((grabbed ? mask : (mask & ~GDK_SHIFT_MASK)) != 0 ||
-          (key != GDK_KEY_Tab &&
-           key != GDK_KEY_KP_Tab &&
-           key != GDK_KEY_ISO_Left_Tab &&
-           key != GDK_KEY_3270_BackTab) ||
-          GTK_WIDGET_CLASS (gtk_entry_accel_parent_class)->key_press_event (widget, event));
-}
-
-static guint
-gtk_entry_accel_get_mask_for_key (guint key)
-{
-  switch (key)
-    {
-    case GDK_KEY_Shift_L:
-    case GDK_KEY_Shift_R:
-      return GDK_SHIFT_MASK;
-    case GDK_KEY_Control_L:
-    case GDK_KEY_Control_R:
-      return GDK_CONTROL_MASK;
-    case GDK_KEY_Caps_Lock:
-    case GDK_KEY_Shift_Lock:
-      return GDK_LOCK_MASK;
-    case GDK_KEY_Meta_L:
-    case GDK_KEY_Meta_R:
-      return GDK_META_MASK;
-    case GDK_KEY_Alt_L:
-    case GDK_KEY_Alt_R:
-      return GDK_MOD1_MASK;
-    case GDK_KEY_Super_L:
-    case GDK_KEY_Super_R:
-      return GDK_SUPER_MASK;
-    case GDK_KEY_Hyper_L:
-    case GDK_KEY_Hyper_R:
-      return GDK_HYPER_MASK;
-    }
-
-  return 0;
-}
-
-static guint
-gtk_entry_accel_get_mirrored_key (guint key)
-{
-  switch (key)
-    {
-    case GDK_KEY_Shift_L:
-      return GDK_KEY_Shift_R;
-    case GDK_KEY_Shift_R:
-      return GDK_KEY_Shift_L;
-    case GDK_KEY_Control_L:
-      return GDK_KEY_Control_R;
-    case GDK_KEY_Control_R:
-      return GDK_KEY_Control_L;
-    case GDK_KEY_Meta_L:
-      return GDK_KEY_Meta_R;
-    case GDK_KEY_Meta_R:
-      return GDK_KEY_Meta_L;
-    case GDK_KEY_Alt_L:
-      return GDK_KEY_Alt_R;
-    case GDK_KEY_Alt_R:
-      return GDK_KEY_Alt_L;
-    case GDK_KEY_Super_L:
-      return GDK_KEY_Super_R;
-    case GDK_KEY_Super_R:
-      return GDK_KEY_Super_L;
-    case GDK_KEY_Hyper_L:
-      return GDK_KEY_Hyper_R;
-    }
-
-  return 0;
-}
-
-static gboolean
-gtk_entry_accel_key_release_event (GtkWidget   *widget,
-                                   GdkEventKey *event)
-{
-  GtkEntryAccel *entry = GTK_ENTRY_ACCEL (widget);
-  guint key = event->keyval;
-  guint code = event->hardware_keycode;
-  guint mask = event->state & GTK_ENTRY_ACCEL_MODIFIER_MASK;
-
-  if (entry->priv->keyboard != NULL && entry->priv->pointer != NULL)
-    {
-      switch (key)
-        {
-        case GDK_KEY_Meta_L:
-          key = GDK_KEY_Alt_L;
-          break;
-
-        case GDK_KEY_Meta_R:
-          key = GDK_KEY_Alt_R;
-          break;
-        }
-
-      if (event->is_modifier && !gtk_entry_accel_get_modifier_state (entry, gtk_entry_accel_get_mirrored_key (key)))
-        mask &= ~gtk_entry_accel_get_mask_for_key (key);
-
-      gtk_entry_accel_ungrab_input (entry, (GdkEvent *) event);
-
-      switch (gtk_entry_accel_key_pressed (entry, &key, &code, &mask))
-        {
-        case GTK_ENTRY_ACCEL_UPDATE:
-          gtk_entry_accel_set_key (entry, key, code, mask);
-        case GTK_ENTRY_ACCEL_CANCEL:
-          gtk_entry_accel_ungrab_input (entry, (GdkEvent *) event);
-        case GTK_ENTRY_ACCEL_IGNORE:
-          return TRUE;
-        }
-
-      event->keyval = key;
-      event->hardware_keycode = code;
-      event->state = mask;
-
-      gtk_entry_accel_ungrab_input (entry, (GdkEvent *) event);
-
-      return GTK_WIDGET_CLASS (gtk_entry_accel_parent_class)->key_release_event (widget, event);
-    }
-
-  if (mask == 0 &&
-      (key == GDK_KEY_Return ||
-       key == GDK_KEY_KP_Enter ||
-       key == GDK_KEY_ISO_Enter ||
-       key == GDK_KEY_3270_Enter))
-    {
-      gtk_entry_accel_grab_input (entry, (GdkEvent *) event);
-      gtk_entry_accel_update_text (entry);
-
-      return TRUE;
-    }
-
-  return ((mask & ~GDK_SHIFT_MASK) != 0 ||
-          (key != GDK_KEY_Tab &&
-           key != GDK_KEY_KP_Tab &&
-           key != GDK_KEY_ISO_Left_Tab &&
-           key != GDK_KEY_3270_BackTab) ||
-          GTK_WIDGET_CLASS (gtk_entry_accel_parent_class)->key_release_event (widget, event));
-}
-
-static void
-gtk_entry_accel_class_init (GtkEntryAccelClass *klass)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
-
-  object_class->dispose = gtk_entry_accel_dispose;
-  object_class->finalize = gtk_entry_accel_finalize;
-  object_class->get_property = gtk_entry_accel_get_property;
-  object_class->set_property = gtk_entry_accel_set_property;
-  widget_class->button_press_event = gtk_entry_accel_button_press_event;
-  widget_class->key_press_event = gtk_entry_accel_key_press_event;
-  widget_class->key_release_event = gtk_entry_accel_key_release_event;
-  klass->key_pressed = gtk_entry_accel_real_key_pressed;
-
-  properties[PROP_ACCEL] = g_param_spec_string ("accel",
-                                                "Accelerator",
-                                                "Current accelerator",
-                                                NULL,
-                                                G_PARAM_READWRITE);
-
-  g_object_class_install_property (object_class,
-                                   PROP_ACCEL,
-                                   properties[PROP_ACCEL]);
-
-  signals[SIGNAL_KEY_PRESSED] = g_signal_new ("key-pressed",
-                                              G_OBJECT_CLASS_TYPE (klass),
-                                              G_SIGNAL_RUN_LAST,
-                                              G_STRUCT_OFFSET (GtkEntryAccelClass, key_pressed),
-                                              gtk_entry_accel_post_action_accumulator,
-                                              NULL,
-                                              NULL,
-                                              GTK_TYPE_ENTRY_ACCEL_POST_ACTION,
-                                              3,
-                                              G_TYPE_POINTER,
-                                              G_TYPE_POINTER,
-                                              G_TYPE_POINTER);
-
-  g_type_class_add_private (klass, sizeof (GtkEntryAccelPrivate));
-}
-
-static void
-gtk_entry_accel_init (GtkEntryAccel *self)
-{
-  self->priv = GTK_ENTRY_ACCEL_GET_PRIVATE (self);
-}
-
-GtkWidget *
-gtk_entry_accel_new (void)
-{
-  return g_object_new (GTK_TYPE_ENTRY_ACCEL, NULL);
-}
-
-const gchar *
-gtk_entry_accel_get_accel (GtkEntryAccel *entry)
-{
-  g_return_val_if_fail (GTK_IS_ENTRY_ACCEL (entry), NULL);
-
-  return entry->priv->accel;
-}
-
-void
-gtk_entry_accel_set_accel (GtkEntryAccel *entry,
-                           const gchar   *accel)
-{
-  guint key = 0;
-  guint *codes = NULL;
-  GdkModifierType mask = 0;
-
-  g_return_if_fail (GTK_IS_ENTRY_ACCEL (entry));
-
-  if (accel != NULL)
-    gtk_accelerator_parse_with_keycode (accel, &key, &codes, &mask);
-
-  gtk_entry_accel_set_key (entry, key, codes != NULL ? codes[0] : 0, mask);
-
-  g_free (codes);
-}
diff --git a/panels/region/gtkentryaccel.h b/panels/region/gtkentryaccel.h
deleted file mode 100644
index 023f1ff..0000000
--- a/panels/region/gtkentryaccel.h
+++ /dev/null
@@ -1,54 +0,0 @@
-#ifndef __GTK_ENTRY_ACCEL_H__
-#define __GTK_ENTRY_ACCEL_H__
-
-#include <gtk/gtk.h>
-
-#define GTK_TYPE_ENTRY_ACCEL            (gtk_entry_accel_get_type ())
-#define GTK_ENTRY_ACCEL(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GTK_TYPE_ENTRY_ACCEL, GtkEntryAccel))
-#define GTK_IS_ENTRY_ACCEL(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GTK_TYPE_ENTRY_ACCEL))
-#define GTK_ENTRY_ACCEL_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GTK_TYPE_ENTRY_ACCEL, GtkEntryAccelClass))
-#define GTK_IS_ENTRY_ACCEL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), GTK_TYPE_ENTRY_ACCEL))
-#define GTK_ENTRY_ACCEL_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), GTK_TYPE_ENTRY_ACCEL, GtkEntryAccelClass))
-
-typedef struct _GtkEntryAccel           GtkEntryAccel;
-typedef struct _GtkEntryAccelClass      GtkEntryAccelClass;
-typedef struct _GtkEntryAccelPrivate    GtkEntryAccelPrivate;
-typedef enum   _GtkEntryAccelPostAction GtkEntryAccelPostAction;
-
-struct _GtkEntryAccel
-{
-  GtkEntry parent_instance;
-
-  /*< private >*/
-  GtkEntryAccelPrivate *priv;
-};
-
-struct _GtkEntryAccelClass
-{
-  GtkEntryClass parent_class;
-
-  /*< public >*/
-  GtkEntryAccelPostAction (* key_pressed) (GtkEntryAccel   *entry,
-                                           guint           *key,
-                                           guint           *code,
-                                           GdkModifierType *mask);
-};
-
-enum _GtkEntryAccelPostAction
-{
-  GTK_ENTRY_ACCEL_UPDATE,
-  GTK_ENTRY_ACCEL_CANCEL,
-  GTK_ENTRY_ACCEL_IGNORE,
-  GTK_ENTRY_ACCEL_PASS_THROUGH
-};
-
-GType         gtk_entry_accel_get_type  (void);
-
-GtkWidget *   gtk_entry_accel_new       (void);
-
-const gchar * gtk_entry_accel_get_accel (GtkEntryAccel *entry);
-
-void          gtk_entry_accel_set_accel (GtkEntryAccel *entry,
-                                         const gchar   *accel);
-
-#endif /* __GTK_ENTRY_ACCEL_H__ */
diff --git a/panels/region/keyboard-shortcuts.c b/panels/region/keyboard-shortcuts.c
deleted file mode 100644
index 1036e30..0000000
--- a/panels/region/keyboard-shortcuts.c
+++ /dev/null
@@ -1,861 +0,0 @@
-/*
- * Copyright (C) 2010 Intel, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Authors: Thomas Wood <thomas.wood@intel.com>
- *          Rodrigo Moya <rodrigo@gnome.org>
- */
-
-#include <config.h>
-
-#include <glib/gi18n.h>
-
-#include "keyboard-shortcuts.h"
-#include "wm-common.h"
-
-#define BINDINGS_SCHEMA "org.gnome.settings-daemon.plugins.media-keys"
-#define CUSTOM_KEYS_BASENAME "/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings"
-#define CUSTOM_SHORTCUTS_ID "custom"
-
-typedef struct {
-  /* The untranslated name, combine with ->package to translate */
-  char *name;
-  /* The group of keybindings (system or application) */
-  char *group;
-  /* The gettext package to use to translate the section title */
-  char *package;
-  /* Name of the window manager the keys would apply to */
-  char *wm_name;
-  /* The GSettings schema for the whole file, if any */
-  char *schema;
-  /* an array of KeyListEntry */
-  GArray *entries;
-} KeyList;
-
-typedef struct
-{
-  CcRegionKeyboardItemType type;
-  char *schema; /* GSettings schema name, if any */
-  char *description; /* description for GSettings types */
-  char *gettext_package;
-  char *name; /* GSettings schema path, or GSettings key name depending on type */
-} KeyListEntry;
-
-static GSettings *binding_settings = NULL;
-static GHashTable *kb_system_sections = NULL;
-static GHashTable *kb_apps_sections = NULL;
-static GHashTable *kb_user_sections = NULL;
-
-static void
-free_key_array (GPtrArray *keys)
-{
-  if (keys != NULL)
-    {
-      gint i;
-
-      for (i = 0; i < keys->len; i++)
-        {
-          CcRegionKeyboardItem *item;
-
-          item = g_ptr_array_index (keys, i);
-
-          g_object_unref (item);
-        }
-
-      g_ptr_array_free (keys, TRUE);
-    }
-}
-
-static GHashTable *
-get_hash_for_group (BindingGroupType group)
-{
-  GHashTable *hash;
-
-  switch (group)
-    {
-    case BINDING_GROUP_SYSTEM:
-      hash = kb_system_sections;
-      break;
-    case BINDING_GROUP_APPS:
-      hash = kb_apps_sections;
-      break;
-    case BINDING_GROUP_USER:
-      hash = kb_user_sections;
-      break;
-    default:
-      hash = NULL;
-    }
-  return hash;
-}
-
-static gboolean
-have_key_for_group (int group, const gchar *name)
-{
-  GHashTableIter iter;
-  GPtrArray *keys;
-  gint i;
-
-  g_hash_table_iter_init (&iter, get_hash_for_group (group));
-  while (g_hash_table_iter_next (&iter, NULL, (gpointer *)&keys))
-    {
-      for (i = 0; i < keys->len; i++)
-        {
-          CcRegionKeyboardItem *item = g_ptr_array_index (keys, i);
-
-	  if (item->type == CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS &&
-	      g_strcmp0 (name, item->key) == 0)
-	    {
-	          return TRUE;
-	    }
-
-	  return FALSE;
-        }
-    }
-
-  return FALSE;
-}
-
-static void
-append_section (const gchar        *id,
-                BindingGroupType    group,
-                const KeyListEntry *keys_list)
-{
-  GPtrArray *keys_array;
-  gint i;
-  GHashTable *hash;
-  gboolean is_new;
-
-  hash = get_hash_for_group (group);
-  if (!hash)
-    return;
-
-  /* Add all CcRegionKeyboardItems for this section */
-  is_new = FALSE;
-  keys_array = g_hash_table_lookup (hash, id);
-  if (keys_array == NULL)
-    {
-      keys_array = g_ptr_array_new ();
-      is_new = TRUE;
-    }
-
-  for (i = 0; keys_list != NULL && keys_list[i].name != NULL; i++)
-    {
-      CcRegionKeyboardItem *item;
-      gboolean ret;
-
-      if (have_key_for_group (group, keys_list[i].name))
-        continue;
-
-      item = cc_region_keyboard_item_new (keys_list[i].type);
-      switch (keys_list[i].type)
-        {
-	case CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH:
-          ret = cc_region_keyboard_item_load_from_gsettings_path (item, keys_list[i].name, FALSE);
-          break;
-	case CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS:
-	  ret = cc_region_keyboard_item_load_from_gsettings (item,
-	                                                     keys_list[i].description,
-	                                                     keys_list[i].schema,
-	                                                     keys_list[i].name);
-	  break;
-	default:
-	  g_assert_not_reached ();
-	}
-
-      if (ret == FALSE)
-        {
-          /* We don't actually want to popup a dialog - just skip this one */
-          g_object_unref (item);
-          continue;
-        }
-
-      item->group = group;
-
-      g_ptr_array_add (keys_array, item);
-    }
-
-  /* Add the keys to the hash table */
-  if (is_new)
-    g_hash_table_insert (hash, g_strdup (id), keys_array);
-}
-
-static void
-parse_start_tag (GMarkupParseContext *ctx,
-                 const gchar         *element_name,
-                 const gchar        **attr_names,
-                 const gchar        **attr_values,
-                 gpointer             user_data,
-                 GError             **error)
-{
-  KeyList *keylist = (KeyList *) user_data;
-  KeyListEntry key;
-  const char *name, *schema, *description, *package;
-
-  name = NULL;
-  schema = NULL;
-  package = NULL;
-
-  /* The top-level element, names the section in the tree */
-  if (g_str_equal (element_name, "KeyListEntries"))
-    {
-      const char *wm_name = NULL;
-      const char *group = NULL;
-
-      while (*attr_names && *attr_values)
-        {
-          if (g_str_equal (*attr_names, "name"))
-            {
-              if (**attr_values)
-                name = *attr_values;
-            } else if (g_str_equal (*attr_names, "group")) {
-              if (**attr_values)
-                group = *attr_values;
-            } else if (g_str_equal (*attr_names, "wm_name")) {
-              if (**attr_values)
-                wm_name = *attr_values;
-	    } else if (g_str_equal (*attr_names, "schema")) {
-	      if (**attr_values)
-	        schema = *attr_values;
-            } else if (g_str_equal (*attr_names, "package")) {
-              if (**attr_values)
-                package = *attr_values;
-            }
-          ++attr_names;
-          ++attr_values;
-        }
-
-      if (name)
-        {
-          if (keylist->name)
-            g_warning ("Duplicate section name");
-          g_free (keylist->name);
-          keylist->name = g_strdup (name);
-        }
-      if (wm_name)
-        {
-          if (keylist->wm_name)
-            g_warning ("Duplicate window manager name");
-          g_free (keylist->wm_name);
-          keylist->wm_name = g_strdup (wm_name);
-        }
-      if (package)
-        {
-          if (keylist->package)
-            g_warning ("Duplicate gettext package name");
-          g_free (keylist->package);
-          keylist->package = g_strdup (package);
-	  bind_textdomain_codeset (keylist->package, "UTF-8");
-        }
-      if (group)
-        {
-          if (keylist->group)
-            g_warning ("Duplicate group");
-          g_free (keylist->group);
-          keylist->group = g_strdup (group);
-        }
-      if (schema)
-        {
-          if (keylist->schema)
-            g_warning ("Duplicate schema");
-          g_free (keylist->schema);
-          keylist->schema = g_strdup (schema);
-	}
-      return;
-    }
-
-  if (!g_str_equal (element_name, "KeyListEntry")
-      || attr_names == NULL
-      || attr_values == NULL)
-    return;
-
-  schema = NULL;
-  description = NULL;
-
-  while (*attr_names && *attr_values)
-    {
-      if (g_str_equal (*attr_names, "name"))
-        {
-          /* skip if empty */
-          if (**attr_values)
-            name = *attr_values;
-	} else if (g_str_equal (*attr_names, "schema")) {
-	  if (**attr_values) {
-	   schema = *attr_values;
-	  }
-	} else if (g_str_equal (*attr_names, "description")) {
-          if (**attr_values) {
-            if (keylist->package)
-	      {
-	        description = dgettext (keylist->package, *attr_values);
-	      }
-	    else
-	      {
-	        description = _(*attr_values);
-	      }
-	  }
-        }
-
-      ++attr_names;
-      ++attr_values;
-    }
-
-  if (name == NULL)
-    return;
-
-  if (schema == NULL &&
-      keylist->schema == NULL) {
-    g_debug ("Ignored GConf keyboard shortcut '%s'", name);
-    return;
-  }
-
-  key.name = g_strdup (name);
-  key.type = CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS;
-  key.description = g_strdup (description);
-  key.gettext_package = g_strdup (keylist->package);
-  key.schema = schema ? g_strdup (schema) : g_strdup (keylist->schema);
-  g_array_append_val (keylist->entries, key);
-}
-
-static gboolean
-strv_contains (char **strv,
-               char  *str)
-{
-  char **p = strv;
-  for (p = strv; *p; p++)
-    if (strcmp (*p, str) == 0)
-      return TRUE;
-
-  return FALSE;
-}
-
-static void
-append_sections_from_file (const gchar *path, const char *datadir, gchar **wm_keybindings)
-{
-  GError *err = NULL;
-  char *buf;
-  gsize buf_len;
-  KeyList *keylist;
-  KeyListEntry key, *keys;
-  int group;
-  guint i;
-  GMarkupParseContext *ctx;
-  GMarkupParser parser = { parse_start_tag, NULL, NULL, NULL, NULL };
-
-  /* Parse file */
-  if (!g_file_get_contents (path, &buf, &buf_len, &err))
-    return;
-
-  keylist = g_new0 (KeyList, 1);
-  keylist->entries = g_array_new (FALSE, TRUE, sizeof (KeyListEntry));
-  ctx = g_markup_parse_context_new (&parser, 0, keylist, NULL);
-
-  if (!g_markup_parse_context_parse (ctx, buf, buf_len, &err))
-    {
-      g_warning ("Failed to parse '%s': '%s'", path, err->message);
-      g_error_free (err);
-      g_free (keylist->name);
-      g_free (keylist->package);
-      g_free (keylist->wm_name);
-      for (i = 0; i < keylist->entries->len; i++)
-        g_free (((KeyListEntry *) &(keylist->entries->data[i]))->name);
-      g_array_free (keylist->entries, TRUE);
-      g_free (keylist);
-      keylist = NULL;
-    }
-  g_markup_parse_context_free (ctx);
-  g_free (buf);
-
-  if (keylist == NULL)
-    return;
-
-  /* If there's no keys to add, or the settings apply to a window manager
-   * that's not the one we're running */
-  if (keylist->entries->len == 0
-      || (keylist->wm_name != NULL && !strv_contains (wm_keybindings, keylist->wm_name))
-      || keylist->name == NULL)
-    {
-      g_free (keylist->name);
-      g_free (keylist->package);
-      g_free (keylist->wm_name);
-      g_array_free (keylist->entries, TRUE);
-      g_free (keylist);
-      return;
-    }
-
-  /* Empty KeyListEntry to end the array */
-  key.name = NULL;
-  g_array_append_val (keylist->entries, key);
-
-  keys = (KeyListEntry *) g_array_free (keylist->entries, FALSE);
-  if (keylist->package)
-    {
-      char *localedir;
-
-      localedir = g_build_filename (datadir, "locale", NULL);
-      bindtextdomain (keylist->package, localedir);
-      g_free (localedir);
-    }
-  if (keylist->group && strcmp (keylist->group, "system") == 0)
-    group = BINDING_GROUP_SYSTEM;
-  else
-    group = BINDING_GROUP_APPS;
-
-  append_section (keylist->name, group, keys);
-
-  g_free (keylist->name);
-  g_free (keylist->package);
-  g_free (keylist->wm_name);
-  g_free (keylist->schema);
-  g_free (keylist->group);
-
-  for (i = 0; keys[i].name != NULL; i++) {
-    KeyListEntry *entry = &keys[i];
-    g_free (entry->schema);
-    g_free (entry->description);
-    g_free (entry->gettext_package);
-    g_free (entry->name);
-  }
-
-  g_free (keylist);
-}
-
-static void
-append_sections_from_gsettings (void)
-{
-  char **custom_paths;
-  GArray *entries;
-  KeyListEntry key;
-  int i;
-
-  /* load custom shortcuts from GSettings */
-  entries = g_array_new (FALSE, TRUE, sizeof (KeyListEntry));
-
-  custom_paths = g_settings_get_strv (binding_settings, "custom-keybindings");
-  for (i = 0; custom_paths[i]; i++)
-    {
-      key.name = g_strdup (custom_paths[i]);
-      if (!have_key_for_group (BINDING_GROUP_USER, key.name))
-        {
-          key.type = CC_REGION_KEYBOARD_ITEM_TYPE_GSETTINGS_PATH;
-          g_array_append_val (entries, key);
-        }
-      else
-        g_free (key.name);
-    }
-  g_strfreev (custom_paths);
-
-  if (entries->len > 0)
-    {
-      KeyListEntry *keys;
-      int i;
-
-      /* Empty KeyListEntry to end the array */
-      key.name = NULL;
-      g_array_append_val (entries, key);
-
-      keys = (KeyListEntry *) entries->data;
-      append_section (CUSTOM_SHORTCUTS_ID, BINDING_GROUP_USER, keys);
-      for (i = 0; i < entries->len; ++i)
-        {
-          g_free (keys[i].name);
-        }
-    }
-  else
-    {
-      append_section (CUSTOM_SHORTCUTS_ID, BINDING_GROUP_USER, NULL);
-    }
-
-  g_array_free (entries, TRUE);
-}
-
-static void
-reload_sections (void)
-{
-  gchar **wm_keybindings;
-  GDir *dir;
-  const gchar * const * data_dirs;
-  guint i;
-  GHashTable *loaded_files;
-  const char *section_to_set;
-
-  /* Clear previous hash tables */
-  if (kb_system_sections != NULL)
-    g_hash_table_destroy (kb_system_sections);
-  kb_system_sections = g_hash_table_new_full (g_str_hash,
-                                              g_str_equal,
-                                              g_free,
-                                              (GDestroyNotify) free_key_array);
-
-  if (kb_apps_sections != NULL)
-    g_hash_table_destroy (kb_apps_sections);
-  kb_apps_sections = g_hash_table_new_full (g_str_hash,
-                                            g_str_equal,
-                                            g_free,
-                                            (GDestroyNotify) free_key_array);
-
-  if (kb_user_sections != NULL)
-    g_hash_table_destroy (kb_user_sections);
-  kb_user_sections = g_hash_table_new_full (g_str_hash,
-                                            g_str_equal,
-                                            g_free,
-                                            (GDestroyNotify) free_key_array);
-
-  /* Load WM keybindings */
-  wm_keybindings = wm_common_get_current_keybindings ();
-
-  loaded_files = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
-
-  data_dirs = g_get_system_data_dirs ();
-  for (i = 0; data_dirs[i] != NULL; i++)
-    {
-      char *dir_path;
-      const gchar *name;
-
-      dir_path = g_build_filename (data_dirs[i], "unity-control-center", "keybindings", NULL);
-
-      dir = g_dir_open (dir_path, 0, NULL);
-      if (!dir)
-        {
-          g_free (dir_path);
-          continue;
-        }
-
-      for (name = g_dir_read_name (dir) ; name ; name = g_dir_read_name (dir))
-        {
-          gchar *path;
-
-	  if (g_str_has_suffix (name, ".xml") == FALSE)
-	    continue;
-
-          if (g_hash_table_lookup (loaded_files, name) != NULL)
-	    {
-	      g_debug ("Not loading %s, it was already loaded from another directory", name);
-              continue;
-	    }
-
-	  g_hash_table_insert (loaded_files, g_strdup (name), GINT_TO_POINTER (1));
-	  path = g_build_filename (dir_path, name, NULL);
-	  append_sections_from_file (path, data_dirs[i], wm_keybindings);
-	  g_free (path);
-	}
-      g_free (dir_path);
-      g_dir_close (dir);
-    }
-
-  g_hash_table_destroy (loaded_files);
-  g_strfreev (wm_keybindings);
-
-  /* Load custom keybindings */
-  append_sections_from_gsettings ();
-}
-
-static const guint forbidden_keyvals[] = {
-  /* Navigation keys */
-  GDK_KEY_Home,
-  GDK_KEY_Left,
-  GDK_KEY_Up,
-  GDK_KEY_Right,
-  GDK_KEY_Down,
-  GDK_KEY_Page_Up,
-  GDK_KEY_Page_Down,
-  GDK_KEY_End,
-
-  /* Return */
-  GDK_KEY_KP_Enter,
-  GDK_KEY_Return,
-
-  GDK_KEY_Mode_switch
-};
-
-static char*
-binding_name (guint                   keyval,
-              guint                   keycode,
-              GdkModifierType         mask,
-              gboolean                translate)
-{
-  if (keyval != 0 || keycode != 0)
-    return translate ?
-        gtk_accelerator_get_label_with_keycode (NULL, keyval, keycode, mask) :
-        gtk_accelerator_name_with_keycode (NULL, keyval, keycode, mask);
-  else
-    return g_strdup (translate ? _("Disabled") : "");
-}
-
-static gboolean
-keyval_is_forbidden (guint keyval)
-{
-  guint i;
-
-  for (i = 0; i < G_N_ELEMENTS(forbidden_keyvals); i++) {
-    if (keyval == forbidden_keyvals[i])
-      return TRUE;
-  }
-
-  return FALSE;
-}
-
-typedef struct {
-  CcRegionKeyboardItem *orig_item;
-  CcRegionKeyboardItem *conflict_item;
-  guint new_keyval;
-  GdkModifierType new_mask;
-  guint new_keycode;
-} CcUniquenessData;
-
-static gboolean
-compare_keys_for_uniqueness (CcRegionKeyboardItem *element,
-                             CcUniquenessData     *data)
-{
-  CcRegionKeyboardItem *orig_item;
-
-  orig_item = data->orig_item;
-
-  /* no conflict for : blanks, different modifiers, or ourselves */
-  if (element == NULL || data->new_mask != element->mask ||
-      cc_region_keyboard_item_equal (orig_item, element))
-    return FALSE;
-
-  if (data->new_keyval != 0) {
-      if (data->new_keyval != element->keyval)
-          return FALSE;
-  } else if (element->keyval != 0 || data->new_keycode != element->keycode)
-    return FALSE;
-
-  data->conflict_item = element;
-
-  return TRUE;
-}
-
-static gboolean
-cb_check_for_uniqueness (gpointer          key,
-                         GPtrArray        *keys_array,
-                         CcUniquenessData *data)
-{
-  guint i;
-
-  for (i = 0; i < keys_array->len; i++)
-    {
-      CcRegionKeyboardItem *item;
-
-      item = keys_array->pdata[i];
-      if (compare_keys_for_uniqueness (item, data))
-        return TRUE;
-    }
-  return FALSE;
-}
-
-gboolean
-keyboard_shortcuts_accel_edited (CcRegionKeyboardItem *item,
-                                 guint                 keyval,
-                                 guint                 keycode,
-                                 GdkModifierType       mask,
-                                 GtkWidget            *toplevel)
-{
-  CcUniquenessData data;
-
-  /* sanity check */
-  if (item == NULL)
-    return FALSE;
-
-  /* CapsLock isn't supported as a keybinding modifier, so keep it from confusing us */
-  mask &= ~GDK_LOCK_MASK;
-
-  data.orig_item = item;
-  data.new_keyval = keyval;
-  data.new_mask = mask;
-  data.new_keycode = keycode;
-  data.conflict_item = NULL;
-
-  if (keyval != 0 || keycode != 0) /* any number of shortcuts can be disabled */
-    {
-      BindingGroupType i;
-
-      for (i = BINDING_GROUP_SYSTEM; i <= BINDING_GROUP_USER && data.conflict_item == NULL; i++)
-        {
-          GHashTable *table;
-
-          table = get_hash_for_group (i);
-          if (!table)
-            continue;
-          g_hash_table_find (table, (GHRFunc) cb_check_for_uniqueness, &data);
-        }
-    }
-
-  /* Check for unmodified keys */
-  if ((mask == 0 || mask == GDK_SHIFT_MASK) && keycode != 0)
-    {
-      if ((keyval >= GDK_KEY_a && keyval <= GDK_KEY_z)
-           || (keyval >= GDK_KEY_A && keyval <= GDK_KEY_Z)
-           || (keyval >= GDK_KEY_0 && keyval <= GDK_KEY_9)
-           || (keyval >= GDK_KEY_kana_fullstop && keyval <= GDK_KEY_semivoicedsound)
-           || (keyval >= GDK_KEY_Arabic_comma && keyval <= GDK_KEY_Arabic_sukun)
-           || (keyval >= GDK_KEY_Serbian_dje && keyval <= GDK_KEY_Cyrillic_HARDSIGN)
-           || (keyval >= GDK_KEY_Greek_ALPHAaccent && keyval <= GDK_KEY_Greek_omega)
-           || (keyval >= GDK_KEY_hebrew_doublelowline && keyval <= GDK_KEY_hebrew_taf)
-           || (keyval >= GDK_KEY_Thai_kokai && keyval <= GDK_KEY_Thai_lekkao)
-           || (keyval >= GDK_KEY_Hangul && keyval <= GDK_KEY_Hangul_Special)
-           || (keyval >= GDK_KEY_Hangul_Kiyeog && keyval <= GDK_KEY_Hangul_J_YeorinHieuh)
-           || (keyval == GDK_KEY_Tab && mask == 0)
-           || (keyval == GDK_KEY_space && mask == 0)
-           || keyval_is_forbidden (keyval)) {
-        GtkWidget *dialog;
-        char *name;
-
-        name = binding_name (keyval, keycode, mask, TRUE);
-
-        dialog =
-          gtk_message_dialog_new (GTK_WINDOW (toplevel),
-                                  GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL,
-                                  GTK_MESSAGE_WARNING,
-                                  GTK_BUTTONS_CANCEL,
-                                  _("The shortcut \"%s\" cannot be used because it will become impossible to type using this key.\n"
-                                  "Please try with a key such as Control, Alt or Shift at the same time."),
-                                  name);
-
-        g_free (name);
-        gtk_dialog_run (GTK_DIALOG (dialog));
-        gtk_widget_destroy (dialog);
-
-        return FALSE;
-      }
-    }
-
-  /* flag to see if the new accelerator was in use by something */
-  if (data.conflict_item != NULL)
-    {
-      GtkWidget *dialog;
-      char *name;
-      int response;
-
-      name = binding_name (keyval, keycode, mask, TRUE);
-
-      dialog =
-        gtk_message_dialog_new (GTK_WINDOW (toplevel),
-                                GTK_DIALOG_DESTROY_WITH_PARENT | GTK_DIALOG_MODAL,
-                                GTK_MESSAGE_WARNING,
-                                GTK_BUTTONS_CANCEL,
-                                _("The shortcut \"%s\" is already used for\n\"%s\""),
-                                name, data.conflict_item->description);
-      g_free (name);
-
-      gtk_message_dialog_format_secondary_text (GTK_MESSAGE_DIALOG (dialog),
-          _("If you reassign the shortcut to \"%s\", the \"%s\" shortcut "
-            "will be disabled."),
-          item->description,
-          data.conflict_item->description);
-
-      gtk_dialog_add_button (GTK_DIALOG (dialog),
-                             _("_Reassign"),
-                             GTK_RESPONSE_ACCEPT);
-
-      gtk_dialog_set_default_response (GTK_DIALOG (dialog),
-                                       GTK_RESPONSE_ACCEPT);
-
-      response = gtk_dialog_run (GTK_DIALOG (dialog));
-      gtk_widget_destroy (dialog);
-
-      if (response == GTK_RESPONSE_ACCEPT)
-        g_object_set (G_OBJECT (data.conflict_item), "binding", "", NULL);
-      else
-        return FALSE;
-    }
-
-  return TRUE;
-}
-
-static void
-on_window_manager_change (const char *wm_name,
-                          gpointer    user_data)
-{
-  reload_sections ();
-}
-
-void
-keyboard_shortcuts_init (void)
-{
-  wm_common_register_window_manager_change ((GFunc) on_window_manager_change, NULL);
-  binding_settings = g_settings_new (BINDINGS_SCHEMA);
-  reload_sections ();
-}
-
-void
-keyboard_shortcuts_dispose (void)
-{
-  if (kb_system_sections != NULL)
-    {
-      g_hash_table_destroy (kb_system_sections);
-      kb_system_sections = NULL;
-    }
-  if (kb_apps_sections != NULL)
-    {
-      g_hash_table_destroy (kb_apps_sections);
-      kb_apps_sections = NULL;
-    }
-  if (kb_user_sections != NULL)
-    {
-      g_hash_table_destroy (kb_user_sections);
-      kb_user_sections = NULL;
-    }
-
-  g_clear_object (&binding_settings);
-}
-
-static CcRegionKeyboardItem *
-get_item_in_group (BindingGroupType  group,
-                   const gchar      *schema,
-                   const gchar      *key)
-{
-  GHashTable *hash_table = get_hash_for_group (group);
-  GHashTableIter iter;
-  gpointer value;
-
-  g_hash_table_iter_init (&iter, hash_table);
-  while (g_hash_table_iter_next (&iter, NULL, &value))
-    {
-      GPtrArray *array = value;
-      guint i;
-
-      for (i = 0; i < array->len; i++)
-        {
-          CcRegionKeyboardItem *item = array->pdata[i];
-
-          if (g_strcmp0 (item->schema, schema) == 0 &&
-              g_strcmp0 (item->key, key) == 0)
-            return item;
-        }
-    }
-
-  return NULL;
-}
-
-CcRegionKeyboardItem *
-keyboard_shortcuts_get_item (const gchar *schema,
-                             const gchar *key)
-{
-  CcRegionKeyboardItem *item = get_item_in_group (BINDING_GROUP_SYSTEM, schema, key);
-
-  if (item != NULL)
-    return item;
-
-  item = get_item_in_group (BINDING_GROUP_APPS, schema, key);
-
-  if (item != NULL)
-    return item;
-
-  item = get_item_in_group (BINDING_GROUP_USER, schema, key);
-
-  return item;
-}
diff --git a/panels/region/keyboard-shortcuts.h b/panels/region/keyboard-shortcuts.h
deleted file mode 100644
index 2f479a8..0000000
--- a/panels/region/keyboard-shortcuts.h
+++ /dev/null
@@ -1,37 +0,0 @@
-/*
- * Copyright (C) 2010 Intel, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Authors: Thomas Wood <thomas.wood@intel.com>
- *          Rodrigo Moya <rodrigo@gnome.org>
- */
-
-#include <gtk/gtk.h>
-
-#include "cc-region-keyboard-item.h"
-
-void                   keyboard_shortcuts_init         (void);
-
-void                   keyboard_shortcuts_dispose      (void);
-
-CcRegionKeyboardItem * keyboard_shortcuts_get_item     (const gchar          *schema,
-                                                        const gchar          *key);
-
-gboolean               keyboard_shortcuts_accel_edited (CcRegionKeyboardItem *item,
-                                                        guint                 keyval,
-                                                        guint                 keycode,
-                                                        GdkModifierType       mask,
-                                                        GtkWidget            *toplevel);
diff --git a/panels/region/region-module.c b/panels/region/region-module.c
deleted file mode 100644
index da1bad2..0000000
--- a/panels/region/region-module.c
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- * Copyright (C) 2010 Intel, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Sergey Udaltsov <svu@gnome.org>
- *
- */
-
-#include <config.h>
-
-#include "cc-region-panel.h"
-
-#include <glib/gi18n-lib.h>
-
-void
-g_io_module_load (GIOModule * module)
-{
-	bindtextdomain (GETTEXT_PACKAGE, GNOMELOCALEDIR);
-	bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
-
-	/* register the panel */
-	cc_region_panel_register (module);
-}
-
-void
-g_io_module_unload (GIOModule * module)
-{
-}
diff --git a/panels/region/unity-region-panel.desktop.in.in b/panels/region/unity-region-panel.desktop.in.in
deleted file mode 100644
index 204d97f..0000000
--- a/panels/region/unity-region-panel.desktop.in.in
+++ /dev/null
@@ -1,13 +0,0 @@
-[Desktop Entry]
-_Name=Text Entry
-_Comment=Change your keyboard or input method settings
-Exec=unity-control-center region
-Icon=preferences-desktop-keyboard-shortcuts
-Terminal=false
-Type=Application
-StartupNotify=true
-Categories=GNOME;GTK;Settings;DesktopSettings;X-Unity-Settings-Panel;X-GNOME-PersonalSettings
-OnlyShowIn=Unity;
-X-Unity-Settings-Panel=region
-# Translators: those are keywords for the region control-center panel
-_Keywords=Language;Layout;Keyboard;Input Method;Text Entry;
diff --git a/panels/region/unity-region-panel.ui b/panels/region/unity-region-panel.ui
deleted file mode 100644
index 2b61b23..0000000
--- a/panels/region/unity-region-panel.ui
+++ /dev/null
@@ -1,649 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkAdjustment" id="adjustment1">
-    <property name="lower">100</property>
-    <property name="upper">2000</property>
-    <property name="value">500</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment10">
-    <property name="lower">1</property>
-    <property name="upper">100000</property>
-    <property name="value">1</property>
-    <property name="step_increment">1</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment2">
-    <property name="lower">10</property>
-    <property name="upper">110</property>
-    <property name="value">30</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment3">
-    <property name="lower">100</property>
-    <property name="upper">2500</property>
-    <property name="value">1000</property>
-    <property name="step_increment">200</property>
-    <property name="page_increment">200</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment4">
-    <property name="upper">500</property>
-    <property name="value">0.5</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment5">
-    <property name="upper">900</property>
-    <property name="value">0.5</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment6">
-    <property name="upper">3000</property>
-    <property name="value">1800</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment7">
-    <property name="lower">10</property>
-    <property name="upper">1000</property>
-    <property name="value">300</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment8">
-    <property name="lower">10</property>
-    <property name="upper">2000</property>
-    <property name="value">300</property>
-    <property name="step_increment">10</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkAdjustment" id="adjustment9">
-    <property name="lower">1</property>
-    <property name="upper">100000</property>
-    <property name="value">1</property>
-    <property name="step_increment">1</property>
-    <property name="page_increment">10</property>
-  </object>
-  <object class="GtkListStore" id="display_language_liststore"/>
-  <object class="GtkDialog" id="region_dialog">
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes">Region and Language</property>
-    <property name="default_width">600</property>
-    <property name="default_height">430</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="dialog-vbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action_area1">
-            <property name="can_focus">False</property>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkVBox" id="region_vbox">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="events">GDK_POINTER_MOTION_MASK | GDK_POINTER_MOTION_HINT_MASK | GDK_BUTTON_PRESS_MASK | GDK_BUTTON_RELEASE_MASK</property>
-            <property name="border_width">5</property>
-            <property name="spacing">12</property>
-            <child>
-              <object class="GtkVBox" id="vbox5">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="border_width">12</property>
-                <property name="spacing">12</property>
-                <child>
-                  <object class="GtkHBox" id="hbox3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="spacing">12</property>
-                    <child>
-                      <object class="GtkVBox" id="vbox6">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="margin_right">5</property>
-                        <child>
-                          <object class="GtkLabel" id="label2">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="margin_bottom">5</property>
-                            <property name="xalign">0</property>
-                            <property name="label" translatable="yes">Input sources to use:</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkScrolledWindow" id="input_sources_swindow">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="shadow_type">in</property>
-                            <child>
-                              <object class="GtkTreeView" id="active_input_sources">
-                                <property name="visible">True</property>
-                                <property name="can_focus">True</property>
-                                <property name="headers_visible">False</property>
-                                <child internal-child="selection">
-                                  <object class="GtkTreeSelection" id="treeview-selection3"/>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkToolbar" id="input-toolbar">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="toolbar_style">icons</property>
-                            <property name="show_arrow">False</property>
-                            <property name="icon_size">1</property>
-                            <style>
-                              <class name="inline-toolbar"/>
-                            </style>
-                            <child>
-                              <object class="GtkToolItem" id="i_s_ar_item">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <child>
-                                  <object class="GtkBox" id="i_s_ar_box">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <child>
-                                      <object class="GtkButton" id="input_source_add">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="receives_default">False</property>
-                                        <child>
-                                          <object class="GtkImage" id="i_s_a_image">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="icon_name">list-add-symbolic</property>
-                                            <property name="icon-size">1</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="position">0</property>
-                                      </packing>
-                                    </child>
-                                    <child>
-                                      <object class="GtkButton" id="input_source_remove">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="receives_default">False</property>
-                                        <child>
-                                          <object class="GtkImage" id="i_s_r_image">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="icon_name">list-remove-symbolic</property>
-                                            <property name="icon-size">1</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="position">1</property>
-                                      </packing>
-                                    </child>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkSeparatorToolItem" id="sep1">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="draw">False</property>
-                              </object>
-                              <packing>
-                                <property name="expand">True</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkToolItem" id="i_s_ud_item">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <child>
-                                  <object class="GtkBox" id="i_s_ud_box">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <child>
-                                      <object class="GtkButton" id="input_source_move_up">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="receives_default">False</property>
-                                        <child>
-                                          <object class="GtkImage" id="i_s_u_image">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="icon_name">go-up-symbolic</property>
-                                            <property name="icon-size">1</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="position">0</property>
-                                      </packing>
-                                    </child>
-                                    <child>
-                                      <object class="GtkButton" id="input_source_move_down">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="receives_default">False</property>
-                                        <child>
-                                          <object class="GtkImage" id="i_s_d_image">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="icon_name">go-down-symbolic</property>
-                                            <property name="icon-size">1</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="position">1</property>
-                                      </packing>
-                                    </child>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkSeparatorToolItem" id="sep2">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="hexpand">True</property>
-                                <property name="draw">False</property>
-                              </object>
-                              <packing>
-                                <property name="expand">True</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkToolItem" id="i_s_sp_item">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <child>
-                                  <object class="GtkBox" id="i_s_sp_box">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <child>
-                                      <object class="GtkButton" id="input_source_settings">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="receives_default">False</property>
-                                        <child>
-                                          <object class="GtkImage" id="i_s_s_image">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="pixel_size">16</property>
-                                            <property name="icon_name">preferences-system-symbolic</property>
-                                            <property name="icon-size">1</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="position">0</property>
-                                      </packing>
-                                    </child>
-                                    <child>
-                                      <object class="GtkButton" id="input_source_show">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="receives_default">False</property>
-                                        <child>
-                                          <object class="GtkImage" id="i_s_p_image">
-                                            <property name="visible">True</property>
-                                            <property name="can_focus">False</property>
-                                            <property name="icon_name">input-keyboard-symbolic</property>
-                                            <property name="icon-size">1</property>
-                                          </object>
-                                        </child>
-                                      </object>
-                                      <packing>
-                                        <property name="expand">False</property>
-                                        <property name="fill">True</property>
-                                        <property name="position">1</property>
-                                      </packing>
-                                    </child>
-                                  </object>
-                                </child>
-                              </object>
-                              <packing>
-                                <property name="expand">False</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">2</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkBox" id="box2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="orientation">vertical</property>
-                        <child>
-                          <object class="GtkLabel" id="label22">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="margin_bottom">5</property>
-                            <property name="xalign">0</property>
-                            <property name="label" translatable="yes">Switch to next source using:</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">0</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkEntryAccel" id="next-source-entry">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="margin_bottom">5</property>
-                            <property name="invisible_char">•</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkLabel" id="label24">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="margin_bottom">5</property>
-                            <property name="xalign">0</property>
-                            <property name="label" translatable="yes">Switch to previous source using:</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">2</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkEntryAccel" id="prev-source-entry">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="margin_bottom">15</property>
-                            <property name="invisible_char">•</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">3</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkRadioButton" id="same-source-radio">
-                            <property name="label" translatable="yes">Use the same source for all windows</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="receives_default">False</property>
-                            <property name="xalign">0</property>
-                            <property name="active">True</property>
-                            <property name="draw_indicator">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">4</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkRadioButton" id="different-source-radio">
-                            <property name="label" translatable="yes">Allow different sources for each window</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="receives_default">False</property>
-                            <property name="xalign">0</property>
-                            <property name="active">True</property>
-                            <property name="draw_indicator">True</property>
-                            <property name="group">same-source-radio</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">5</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkRadioButton" id="default-source-radio">
-                            <property name="label" translatable="yes">New windows use the default source</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="receives_default">False</property>
-                            <property name="margin_left">25</property>
-                            <property name="xalign">0</property>
-                            <property name="active">True</property>
-                            <property name="draw_indicator">True</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">6</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkRadioButton" id="current-source-radio">
-                            <property name="label" translatable="yes">New windows use the current source</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="receives_default">False</property>
-                            <property name="margin_left">25</property>
-                            <property name="margin_bottom">15</property>
-                            <property name="xalign">0</property>
-                            <property name="active">True</property>
-                            <property name="draw_indicator">True</property>
-                            <property name="group">default-source-radio</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">7</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkGrid" id="grid1">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <child>
-                              <object class="GtkLabel" id="label25">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="halign">end</property>
-                                <property name="margin_right">10</property>
-                                <property name="margin_bottom">10</property>
-                                <property name="hexpand">True</property>
-                                <property name="label" translatable="yes">Show input candidates:</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">0</property>
-                                <property name="top_attach">0</property>
-                                <property name="width">1</property>
-                                <property name="height">1</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkComboBoxText" id="orientation-combo">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="margin_bottom">10</property>
-                                <property name="entry_text_column">0</property>
-                                <property name="id_column">1</property>
-                                <items>
-                                  <item translatable="yes">Horizontally</item>
-                                  <item translatable="yes">Vertically</item>
-                                </items>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="top_attach">0</property>
-                                <property name="width">1</property>
-                                <property name="height">1</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkFontButton" id="custom-font-button">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="receives_default">True</property>
-                                <property name="font">Sans 12</property>
-                                <property name="preview_text"/>
-                                <property name="show_preview_entry">False</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">1</property>
-                                <property name="top_attach">1</property>
-                                <property name="width">1</property>
-                                <property name="height">1</property>
-                              </packing>
-                            </child>
-                            <child>
-                              <object class="GtkCheckButton" id="custom-font-check">
-                                <property name="label" translatable="yes">Using custom font:</property>
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <property name="receives_default">False</property>
-                                <property name="halign">end</property>
-                                <property name="margin_right">10</property>
-                                <property name="hexpand">True</property>
-                                <property name="xalign">0</property>
-                                <property name="draw_indicator">True</property>
-                              </object>
-                              <packing>
-                                <property name="left_attach">0</property>
-                                <property name="top_attach">1</property>
-                                <property name="width">1</property>
-                                <property name="height">1</property>
-                              </packing>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="fill">True</property>
-                            <property name="position">8</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox" id="box1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="valign">end</property>
-                    <child>
-                      <object class="GtkCheckButton" id="show-indicator-check">
-                        <property name="label" translatable="yes">Show current input source in the menu bar</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="receives_default">False</property>
-                        <property name="hexpand">True</property>
-                        <property name="xalign">0</property>
-                        <property name="draw_indicator">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLinkButton" id="jump-to-shortcuts">
-                        <property name="label" translatable="yes">Keyboard Settings...</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="has_tooltip">True</property>
-                        <property name="halign">end</property>
-                        <property name="relief">none</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="position">3</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-  </object>
-</interface>
diff --git a/panels/region/wm-common.c b/panels/region/wm-common.c
deleted file mode 100644
index 203dec9..0000000
--- a/panels/region/wm-common.c
+++ /dev/null
@@ -1,184 +0,0 @@
-#include <X11/Xatom.h>
-#include <gdk/gdkx.h>
-#include <gdk/gdk.h>
-#include <string.h>
-#include <glib.h>
-#include <glib-object.h>
-#include "wm-common.h"
-
-typedef struct _WMCallbackData
-{
-  GFunc func;
-  gpointer data;
-} WMCallbackData;
-
-/* Our WM Window */
-static Window wm_window = None;
-
-static char *
-wm_common_get_window_manager_property (Atom atom)
-{
-  Atom utf8_string, type;
-  int result;
-  char *retval;
-  int format;
-  gulong nitems;
-  gulong bytes_after;
-  gchar *val;
-
-  if (wm_window == None)
-    return NULL;
-
-  utf8_string = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "UTF8_STRING", False);
-
-  gdk_error_trap_push ();
-
-  val = NULL;
-  result = XGetWindowProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),
-		  	       wm_window,
-			       atom,
-			       0, G_MAXLONG,
-			       False, utf8_string,
-			       &type, &format, &nitems,
-			       &bytes_after, (guchar **) &val);
-
-  if (gdk_error_trap_pop () || result != Success ||
-      type != utf8_string || format != 8 || nitems == 0 ||
-      !g_utf8_validate (val, nitems, NULL))
-    {
-      retval = NULL;
-    }
-  else
-    {
-      retval = g_strndup (val, nitems);
-    }
-
-  if (val)
-    XFree (val);
-
-  return retval;
-}
-
-char*
-wm_common_get_current_window_manager (void)
-{
-  Atom atom = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "_NET_WM_NAME", False);
-  char *result;
-
-  result = wm_common_get_window_manager_property (atom);
-  if (result)
-    return result;
-  else
-    return g_strdup (WM_COMMON_UNKNOWN);
-}
-
-char**
-wm_common_get_current_keybindings (void)
-{
-  Atom keybindings_atom = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "_GNOME_WM_KEYBINDINGS", False);
-  char *keybindings = wm_common_get_window_manager_property (keybindings_atom);
-  char **results;
-
-  if (keybindings)
-    {
-      char **p;
-      results = g_strsplit(keybindings, ",", -1);
-      for (p = results; *p; p++)
-	g_strstrip (*p);
-      g_free (keybindings);
-    }
-  else
-    {
-      Atom wm_atom = XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "_NET_WM_NAME", False);
-      char *wm_name = wm_common_get_window_manager_property (wm_atom);
-      char *to_copy[] = { NULL, NULL };
-
-      to_copy[0] = wm_name ? wm_name : WM_COMMON_UNKNOWN;
-
-      results = g_strdupv (to_copy);
-      g_free (wm_name);
-    }
-
-  return results;
-}
-
-static void
-update_wm_window (void)
-{
-  Window *xwindow;
-  Atom type;
-  gint format;
-  gulong nitems;
-  gulong bytes_after;
-
-  XGetWindowProperty (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), GDK_ROOT_WINDOW (),
-		      XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "_NET_SUPPORTING_WM_CHECK", False),
-		      0, G_MAXLONG, False, XA_WINDOW, &type, &format,
-		      &nitems, &bytes_after, (guchar **) &xwindow);
-
-  if (type != XA_WINDOW)
-    {
-      wm_window = None;
-     return;
-    }
-
-  gdk_error_trap_push ();
-  XSelectInput (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), *xwindow, StructureNotifyMask | PropertyChangeMask);
-  XSync (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), False);
-
-  if (gdk_error_trap_pop ())
-    {
-       XFree (xwindow);
-       wm_window = None;
-       return;
-    }
-
-    wm_window = *xwindow;
-    XFree (xwindow);
-}
-
-static GdkFilterReturn
-wm_window_event_filter (GdkXEvent *xev,
-			GdkEvent  *event,
-			gpointer   data)
-{
-  WMCallbackData *ncb_data = (WMCallbackData*) data;
-  XEvent *xevent = (XEvent *)xev;
-
-  if ((xevent->type == DestroyNotify &&
-       wm_window != None && xevent->xany.window == wm_window) ||
-      (xevent->type == PropertyNotify &&
-       xevent->xany.window == GDK_ROOT_WINDOW () &&
-       xevent->xproperty.atom == (XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()),  "_NET_SUPPORTING_WM_CHECK", False))) ||
-      (xevent->type == PropertyNotify &&
-       wm_window != None && xevent->xany.window == wm_window &&
-       xevent->xproperty.atom == (XInternAtom (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), "_NET_WM_NAME", False))))
-    {
-      update_wm_window ();
-      (* ncb_data->func) ((gpointer)wm_common_get_current_window_manager(),
-		   	  ncb_data->data);
-    }
-
-  return GDK_FILTER_CONTINUE;
-}
-
-void
-wm_common_register_window_manager_change (GFunc    func,
-					  gpointer data)
-{
-  WMCallbackData *ncb_data;
-
-  ncb_data = g_new0 (WMCallbackData, 1);
-
-  ncb_data->func = func;
-  ncb_data->data = data;
-
-  gdk_window_add_filter (NULL, wm_window_event_filter, ncb_data);
-
-  update_wm_window ();
-
-  XSelectInput (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), GDK_ROOT_WINDOW (), PropertyChangeMask);
-  XSync (GDK_DISPLAY_XDISPLAY (gdk_display_get_default ()), False);
-}
-
-
diff --git a/panels/region/wm-common.h b/panels/region/wm-common.h
deleted file mode 100644
index 4da0d28..0000000
--- a/panels/region/wm-common.h
+++ /dev/null
@@ -1,17 +0,0 @@
-#ifndef WM_COMMON_H
-#define WM_COMMON_H
-
-#define WM_COMMON_METACITY "Metacity"
-#define WM_COMMON_SAWFISH  "Sawfish"
-#define WM_COMMON_UNKNOWN  "Unknown"
-
-gchar *wm_common_get_current_window_manager (void);
-/* Returns a strv of keybinding names for the window manager;
- * using _GNOME_WM_KEYBINDINGS if available, _NET_WM_NAME otherwise. */
-char **wm_common_get_current_keybindings (void);
-
-void   wm_common_register_window_manager_change (GFunc    func,
-						 gpointer data);
-
-#endif /* WM_COMMON_H */
-
diff --git a/po/POTFILES.in b/po/POTFILES.in
index c99f8ff..fba1759 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -28,13 +28,6 @@ panels/mouse/gnome-mouse-properties.c
 [type: gettext/glade]panels/mouse/gnome-mouse-properties.ui
 panels/mouse/gnome-mouse-test.c
 [type: gettext/glade]panels/mouse/gnome-mouse-test.ui
-panels/region/unity-region-panel.desktop.in.in
-[type: gettext/glade]panels/region/unity-region-panel.ui
-panels/region/gnome-region-panel-formats.c
-[type: gettext/glade]panels/region/gnome-region-panel-input-chooser.ui
-panels/region/gnome-region-panel-system.c
-[type: gettext/glade]panels/region/gnome-region-panel.ui
-panels/region/gtkentryaccel.c
 panels/screen/unity-screen-panel.desktop.in.in
 [type: gettext/glade]panels/screen/screen.ui
 panels/sound/cc-sound-panel.c
@@ -77,6 +70,4 @@ shell/unity-control-center.desktop.in.in
 shell/unitycc.directory.in
 [type: gettext/glade]shell/shell.ui
 panels/display/cc-rr-labeler.c
-panels/region/keyboard-shortcuts.c
-[type: gettext/glade]panels/region/gnome-region-panel.ui
 
diff --git a/po/POTFILES.skip b/po/POTFILES.skip
index 1411b20..238d3d4 100644
--- a/po/POTFILES.skip
+++ b/po/POTFILES.skip
@@ -5,7 +5,6 @@ panels/display/gnome-display-panel.desktop.in
 panels/info/gnome-info-panel.desktop.in
 panels/mouse/gnome-mouse-panel.desktop.in
 panels/online-accounts/gnome-online-accounts-panel.desktop.in
-panels/region/gnome-region-panel.desktop.in
 panels/screen/gnome-screen-panel.desktop.in
 panels/sound/data/gnome-sound-panel.desktop.in
 panels/sound/data/sounds/gnome-sounds-default.xml.in
-- 
1.9.2

