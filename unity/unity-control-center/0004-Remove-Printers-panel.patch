From c3a8a34df2da8111eaf91f30ce20330bd5e8bdce Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Sat, 5 Apr 2014 19:23:24 -0400
Subject: [PATCH 04/19] Remove Printers panel

---
 configure.ac                                       |   41 -
 man/unity-control-center.xml                       |   11 -
 panels/Makefile.am                                 |    4 -
 panels/printers/Makefile.am                        |   61 -
 panels/printers/cc-printers-panel.c                | 3015 ---------------
 panels/printers/cc-printers-panel.h                |   72 -
 panels/printers/jobs-dialog.ui                     |  183 -
 panels/printers/new-printer-dialog.ui              |  230 --
 panels/printers/options-dialog.ui                  |  182 -
 panels/printers/pp-cups.c                          |  125 -
 panels/printers/pp-cups.h                          |   71 -
 panels/printers/pp-host.c                          |  459 ---
 panels/printers/pp-host.h                          |   82 -
 panels/printers/pp-ipp-option-widget.c             |  605 ---
 panels/printers/pp-ipp-option-widget.h             |   70 -
 panels/printers/pp-jobs-dialog.c                   |  541 ---
 panels/printers/pp-jobs-dialog.h                   |   41 -
 panels/printers/pp-maintenance-command.c           |  329 --
 panels/printers/pp-maintenance-command.h           |   69 -
 panels/printers/pp-new-printer-dialog.c            | 1522 --------
 panels/printers/pp-new-printer-dialog.h            |   64 -
 panels/printers/pp-new-printer.c                   | 1442 -------
 panels/printers/pp-new-printer.h                   |   66 -
 panels/printers/pp-options-dialog.c                |  986 -----
 panels/printers/pp-options-dialog.h                |   41 -
 panels/printers/pp-ppd-option-widget.c             |  626 ----
 panels/printers/pp-ppd-option-widget.h             |   63 -
 panels/printers/pp-ppd-selection-dialog.c          |  444 ---
 panels/printers/pp-ppd-selection-dialog.h          |   44 -
 panels/printers/pp-utils.c                         | 3960 --------------------
 panels/printers/pp-utils.h                         |  298 --
 panels/printers/ppd-selection-dialog.ui            |  206 -
 panels/printers/printers-module.c                  |   39 -
 panels/printers/printers.ui                        |  619 ---
 panels/printers/unity-printers-panel.desktop.in.in |   14 -
 po/POTFILES.in                                     |   13 -
 po/POTFILES.skip                                   |    1 -
 37 files changed, 16639 deletions(-)
 delete mode 100644 panels/printers/Makefile.am
 delete mode 100644 panels/printers/cc-printers-panel.c
 delete mode 100644 panels/printers/cc-printers-panel.h
 delete mode 100644 panels/printers/jobs-dialog.ui
 delete mode 100644 panels/printers/new-printer-dialog.ui
 delete mode 100644 panels/printers/options-dialog.ui
 delete mode 100644 panels/printers/pp-cups.c
 delete mode 100644 panels/printers/pp-cups.h
 delete mode 100644 panels/printers/pp-host.c
 delete mode 100644 panels/printers/pp-host.h
 delete mode 100644 panels/printers/pp-ipp-option-widget.c
 delete mode 100644 panels/printers/pp-ipp-option-widget.h
 delete mode 100644 panels/printers/pp-jobs-dialog.c
 delete mode 100644 panels/printers/pp-jobs-dialog.h
 delete mode 100644 panels/printers/pp-maintenance-command.c
 delete mode 100644 panels/printers/pp-maintenance-command.h
 delete mode 100644 panels/printers/pp-new-printer-dialog.c
 delete mode 100644 panels/printers/pp-new-printer-dialog.h
 delete mode 100644 panels/printers/pp-new-printer.c
 delete mode 100644 panels/printers/pp-new-printer.h
 delete mode 100644 panels/printers/pp-options-dialog.c
 delete mode 100644 panels/printers/pp-options-dialog.h
 delete mode 100644 panels/printers/pp-ppd-option-widget.c
 delete mode 100644 panels/printers/pp-ppd-option-widget.h
 delete mode 100644 panels/printers/pp-ppd-selection-dialog.c
 delete mode 100644 panels/printers/pp-ppd-selection-dialog.h
 delete mode 100644 panels/printers/pp-utils.c
 delete mode 100644 panels/printers/pp-utils.h
 delete mode 100644 panels/printers/ppd-selection-dialog.ui
 delete mode 100644 panels/printers/printers-module.c
 delete mode 100644 panels/printers/printers.ui
 delete mode 100644 panels/printers/unity-printers-panel.desktop.in.in

diff --git a/configure.ac b/configure.ac
index b473482..7cb2608 100644
--- a/configure.ac
+++ b/configure.ac
@@ -168,40 +168,6 @@ if test "x$have_networkmanager" = xno ; then
 fi
 AM_CONDITIONAL(BUILD_NETWORK, [test x$have_networkmanager = xyes])
 
-# Check for CUPS 1.4 or newer
-AC_ARG_ENABLE([cups],
-              AS_HELP_STRING([--disable-cups], [disable CUPS support (default: enabled)]),,
-              [enable_cups=yes])
-
-if test x"$enable_cups" != x"no" ; then
-  AC_PROG_SED
-
-  AC_PATH_PROG(CUPS_CONFIG, cups-config)
-
-  if test x$CUPS_CONFIG = x; then
-    AC_MSG_ERROR([cups-config not found but CUPS support requested])
-  fi
-
-  CUPS_API_VERSION=`$CUPS_CONFIG --api-version`
-  CUPS_API_MAJOR=`echo $ECHO_N $CUPS_API_VERSION | cut -d . -f 1`
-  CUPS_API_MINOR=`echo $ECHO_N $CUPS_API_VERSION | cut -d . -f 2`
-
-  AC_CHECK_HEADERS([cups/cups.h cups/http.h cups/ipp.h cups/ppd.h],,
-                   AC_MSG_ERROR([CUPS headers not found but CUPS support requested]))
-
-  if ! test $CUPS_API_MAJOR -gt 1 -o \
-            $CUPS_API_MAJOR -eq 1 -a $CUPS_API_MINOR -ge 4 ; then
-    AC_MSG_ERROR([CUPS 1.4 or newer not found, but CUPS support requested])
-  fi
-
-  CUPS_CFLAGS=`$CUPS_CONFIG --cflags | $SED -e 's/-O\w*//g' -e 's/-m\w*//g'`
-  CUPS_LIBS=`$CUPS_CONFIG --libs`
-  AC_SUBST(CUPS_CFLAGS)
-  AC_SUBST(CUPS_LIBS)
-fi
-
-AM_CONDITIONAL(BUILD_PRINTERS, [test x"$enable_cups" = x"yes"])
-
 # Optional dependency for the user accounts panel
 AC_ARG_WITH([cheese],
             AS_HELP_STRING([--with-cheese], [enable cheese webcam support]),,
@@ -420,8 +386,6 @@ panels/power/unity-power-panel.desktop.in
 panels/power/icons/Makefile
 panels/power/icons/24x24/Makefile
 panels/power/icons/48x48/Makefile
-panels/printers/Makefile
-panels/printers/unity-printers-panel.desktop.in
 panels/network/Makefile
 panels/network/unity-network-panel.desktop.in
 panels/universal-access/Makefile
@@ -441,11 +405,6 @@ if test "x$have_networkmanager" = "xyes"; then
 else
 	AC_MSG_NOTICE([   Network panel disabled])
 fi
-if test "x$enable_cups" = "xyes"; then
-	AC_MSG_NOTICE([** CUPS (Printers panel)])
-else
-	AC_MSG_NOTICE([   Printers panel disabled])
-fi
 if test "x$have_cheese" = "xyes"; then
 	AC_MSG_NOTICE([** Cheese (Users panel webcam support)])
 else
diff --git a/man/unity-control-center.xml b/man/unity-control-center.xml
index 9a1c126..529b442 100644
--- a/man/unity-control-center.xml
+++ b/man/unity-control-center.xml
@@ -157,17 +157,6 @@
                         </varlistentry>
 
                         <varlistentry>
-                                <term><option>printers</option></term>
-
-                                <listitem><para>The printers panel shows
-                                all known printers and their status. It is
-                                possible to inspect queued print jobs and
-                                add new printers.</para>
-                                <para>Some operations in this panel require
-                                privileges.</para></listitem>
-                        </varlistentry>
-
-                        <varlistentry>
                                 <term><option>region</option></term>
 
                                 <listitem><para>The region panel
diff --git a/panels/Makefile.am b/panels/Makefile.am
index 98c68d8..ae47cad 100644
--- a/panels/Makefile.am
+++ b/panels/Makefile.am
@@ -13,10 +13,6 @@ SUBDIRS= \
 	universal-access \
 	user-accounts
 
-if BUILD_PRINTERS
-SUBDIRS += printers
-endif
-
 if BUILD_NETWORK
 SUBDIRS += network
 endif
diff --git a/panels/printers/Makefile.am b/panels/printers/Makefile.am
deleted file mode 100644
index 280e3c1..0000000
--- a/panels/printers/Makefile.am
+++ /dev/null
@@ -1,61 +0,0 @@
-cappletname = printers
-
-uidir = $(pkgdatadir)/ui/printers
-dist_ui_DATA = \
-	new-printer-dialog.ui	\
-	ppd-selection-dialog.ui	\
-	options-dialog.ui	\
-	jobs-dialog.ui		\
-	printers.ui
-
-INCLUDES = 						\
-	$(PANEL_CFLAGS)					\
-	$(PRINTERS_PANEL_CFLAGS)			\
-	-I$(top_srcdir)/shell/				\
-	-DGNOMELOCALEDIR="\"$(datadir)/locale\""	\
-	-DGNOMECC_DATA_DIR="\"$(pkgdatadir)\""		\
-	-DDATADIR="\"$(uidir)\""			\
-	$(NULL)
-
-ccpanelsdir = $(PANELS_DIR)
-ccpanels_LTLIBRARIES = libprinters.la
-
-libprinters_la_SOURCES =		\
-	printers-module.c		\
-	pp-new-printer.c		\
-	pp-new-printer.h		\
-	pp-maintenance-command.c	\
-	pp-maintenance-command.h	\
-	pp-host.c			\
-	pp-host.h			\
-	pp-cups.c			\
-	pp-cups.h			\
-	pp-utils.c			\
-	pp-utils.h			\
-	pp-ppd-option-widget.c		\
-	pp-ppd-option-widget.h		\
-	pp-ipp-option-widget.c		\
-	pp-ipp-option-widget.h		\
-	pp-new-printer-dialog.c		\
-	pp-new-printer-dialog.h		\
-	pp-ppd-selection-dialog.c	\
-	pp-ppd-selection-dialog.h	\
-	pp-options-dialog.c		\
-	pp-options-dialog.h		\
-	pp-jobs-dialog.c		\
-	pp-jobs-dialog.h		\
-	cc-printers-panel.c		\
-	cc-printers-panel.h
-
-libprinters_la_LIBADD = $(PRINTERS_PANEL_LIBS) $(PANEL_LIBS) $(CUPS_LIBS)
-libprinters_la_LDFLAGS = $(PANEL_LDFLAGS)
-
-@INTLTOOL_DESKTOP_RULE@
-
-#desktopdir = $(datadir)/applications
-#desktop_in_files = unity-printers-panel.desktop.in
-#desktop_DATA = $(desktop_in_files:.desktop.in=.desktop)
-
-CLEANFILES = $(desktop_in_files) $(desktop_DATA)
-
--include $(top_srcdir)/git.mk
diff --git a/panels/printers/cc-printers-panel.c b/panels/printers/cc-printers-panel.c
deleted file mode 100644
index 4dba39a..0000000
--- a/panels/printers/cc-printers-panel.c
+++ /dev/null
@@ -1,3015 +0,0 @@
-/*
- * Copyright (C) 2010 Red Hat, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#include <config.h>
-
-#include "cc-printers-panel.h"
-
-#include <string.h>
-#include <glib/gi18n-lib.h>
-#include <glib/gstdio.h>
-#include <polkit/polkit.h>
-#include <gdesktop-enums.h>
-
-#include <cups/cups.h>
-
-#include <math.h>
-
-#include "cc-editable-entry.h"
-#include "pp-new-printer-dialog.h"
-#include "pp-ppd-selection-dialog.h"
-#include "pp-options-dialog.h"
-#include "pp-jobs-dialog.h"
-#include "pp-utils.h"
-#include "pp-maintenance-command.h"
-
-CC_PANEL_REGISTER (CcPrintersPanel, cc_printers_panel)
-
-#define PRINTERS_PANEL_PRIVATE(o) \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), CC_TYPE_PRINTERS_PANEL, CcPrintersPanelPrivate))
-
-#define SUPPLY_BAR_HEIGHT 20
-
-#define EMPTY_TEXT "\xe2\x80\x94"
-
-#define RENEW_INTERVAL        500
-#define SUBSCRIPTION_DURATION 600
-
-#define CUPS_DBUS_NAME      "org.cups.cupsd.Notifier"
-#define CUPS_DBUS_PATH      "/org/cups/cupsd/Notifier"
-#define CUPS_DBUS_INTERFACE "org.cups.cupsd.Notifier"
-
-#define CUPS_STATUS_CHECK_INTERVAL 5
-
-#if (CUPS_VERSION_MAJOR > 1) || (CUPS_VERSION_MINOR > 5)
-#define HAVE_CUPS_1_6 1
-#endif
-
-#ifndef HAVE_CUPS_1_6
-#define ippGetState(ipp) ipp->state
-#define ippGetStatusCode(ipp) ipp->request.status.status_code
-#define ippGetString(attr, element, language) attr->values[element].string.text
-#endif
-
-struct _CcPrintersPanelPrivate
-{
-  GtkBuilder *builder;
-
-  cups_dest_t *dests;
-  gchar **dest_model_names;
-  gchar **ppd_file_names;
-  int num_dests;
-  int current_dest;
-
-  int num_jobs;
-
-  GdkRGBA background_color;
-
-  GPermission *permission;
-
-  GSettings *lockdown_settings;
-
-  PpNewPrinterDialog   *pp_new_printer_dialog;
-  PpPPDSelectionDialog *pp_ppd_selection_dialog;
-  PpOptionsDialog      *pp_options_dialog;
-  PpJobsDialog         *pp_jobs_dialog;
-
-  GDBusProxy      *cups_proxy;
-  GDBusConnection *cups_bus_connection;
-  gint             subscription_id;
-  guint            subscription_renewal_id;
-  guint            cups_status_check_id;
-  guint            dbus_subscription_id;
-
-  GtkWidget    *popup_menu;
-  GList        *driver_change_list;
-  GCancellable *get_ppd_name_cancellable;
-  gboolean      getting_ppd_names;
-  PPDList      *all_ppds_list;
-  GHashTable   *preferred_drivers;
-  GCancellable *get_all_ppds_cancellable;
-
-  gchar    *new_printer_name;
-  gchar    *new_printer_location;
-  gchar    *new_printer_make_and_model;
-  gboolean  new_printer_on_network;
-  gboolean  select_new_printer;
-
-  gpointer dummy;
-};
-
-typedef struct
-{
-  gchar        *printer_name;
-  GCancellable *cancellable;
-} SetPPDItem;
-
-static void update_jobs_count (CcPrintersPanel *self);
-static void actualize_printers_list (CcPrintersPanel *self);
-static void update_sensitivity (gpointer user_data);
-static void printer_disable_cb (GObject *gobject, GParamSpec *pspec, gpointer user_data);
-static void printer_set_default_cb (GtkToggleButton *button, gpointer user_data);
-static void detach_from_cups_notifier (gpointer data);
-static void free_dests (CcPrintersPanel *self);
-
-static void
-cc_printers_panel_get_property (GObject    *object,
-                               guint       property_id,
-                               GValue     *value,
-                               GParamSpec *pspec)
-{
-  switch (property_id)
-    {
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-    }
-}
-
-static void
-cc_printers_panel_set_property (GObject      *object,
-                               guint         property_id,
-                               const GValue *value,
-                               GParamSpec   *pspec)
-{
-  switch (property_id)
-    {
-    default:
-      G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
-    }
-}
-
-static void
-cc_printers_panel_dispose (GObject *object)
-{
-  CcPrintersPanelPrivate *priv = CC_PRINTERS_PANEL (object)->priv;
-
-  if (priv->pp_new_printer_dialog)
-    g_clear_object (&priv->pp_new_printer_dialog);
-
-  free_dests (CC_PRINTERS_PANEL (object));
-
-  g_clear_pointer (&priv->new_printer_name, g_free);
-  g_clear_pointer (&priv->new_printer_location, g_free);
-  g_clear_pointer (&priv->new_printer_make_and_model, g_free);
-
-  if (priv->builder)
-    {
-      g_object_unref (priv->builder);
-      priv->builder = NULL;
-    }
-
-  if (priv->lockdown_settings)
-    {
-      g_object_unref (priv->lockdown_settings);
-      priv->lockdown_settings = NULL;
-    }
-
-  if (priv->permission)
-    {
-      g_object_unref (priv->permission);
-      priv->permission = NULL;
-    }
-
-  detach_from_cups_notifier (CC_PRINTERS_PANEL (object));
-
-  if (priv->cups_status_check_id > 0)
-    {
-      g_source_remove (priv->cups_status_check_id);
-      priv->cups_status_check_id = 0;
-    }
-
-  if (priv->all_ppds_list)
-    {
-      ppd_list_free (priv->all_ppds_list);
-      priv->all_ppds_list = NULL;
-    }
-
-  if (priv->preferred_drivers)
-    {
-      g_hash_table_unref (priv->preferred_drivers);
-      priv->preferred_drivers = NULL;
-    }
-
-  if (priv->get_all_ppds_cancellable)
-    {
-      g_cancellable_cancel (priv->get_all_ppds_cancellable);
-      g_object_unref (priv->get_all_ppds_cancellable);
-      priv->get_all_ppds_cancellable = NULL;
-    }
-
-  if (priv->driver_change_list)
-    {
-      GList *iter;
-
-      for (iter = priv->driver_change_list; iter; iter = iter->next)
-        {
-          SetPPDItem *item = (SetPPDItem *) iter->data;
-
-          g_cancellable_cancel (item->cancellable);
-          g_object_unref (item->cancellable);
-          g_free (item->printer_name);
-          g_free (item);
-        }
-
-      g_list_free (priv->driver_change_list);
-      priv->driver_change_list = NULL;
-    }
-
-  G_OBJECT_CLASS (cc_printers_panel_parent_class)->dispose (object);
-}
-
-static void
-cc_printers_panel_finalize (GObject *object)
-{
-  G_OBJECT_CLASS (cc_printers_panel_parent_class)->finalize (object);
-}
-
-static GPermission *
-cc_printers_panel_get_permission (CcPanel *panel)
-{
-  CcPrintersPanelPrivate *priv = CC_PRINTERS_PANEL (panel)->priv;
-
-  return priv->permission;
-}
-
-static const char *
-cc_printers_panel_get_help_uri (CcPanel *panel)
-{
-  if (!g_strcmp0(g_getenv("XDG_CURRENT_DESKTOP"), "Unity"))
-    return "help:ubuntu-help/printing";
-  else
-    return "help:gnome-help/printing";
-}
-
-static void
-cc_printers_panel_class_init (CcPrintersPanelClass *klass)
-{
-  GObjectClass *object_class = G_OBJECT_CLASS (klass);
-  CcPanelClass *panel_class = CC_PANEL_CLASS (klass);
-
-  g_type_class_add_private (klass, sizeof (CcPrintersPanelPrivate));
-
-  object_class->get_property = cc_printers_panel_get_property;
-  object_class->set_property = cc_printers_panel_set_property;
-  object_class->dispose = cc_printers_panel_dispose;
-  object_class->finalize = cc_printers_panel_finalize;
-
-  panel_class->get_permission = cc_printers_panel_get_permission;
-  panel_class->get_help_uri = cc_printers_panel_get_help_uri;
-}
-
-static void
-on_cups_notification (GDBusConnection *connection,
-                      const char      *sender_name,
-                      const char      *object_path,
-                      const char      *interface_name,
-                      const char      *signal_name,
-                      GVariant        *parameters,
-                      gpointer         user_data)
-{
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  CcPrintersPanelPrivate *priv;
-  gboolean                printer_is_accepting_jobs;
-  gchar                  *printer_name = NULL;
-  gchar                  *text = NULL;
-  gchar                  *printer_uri = NULL;
-  gchar                  *printer_state_reasons = NULL;
-  gchar                  *job_state_reasons = NULL;
-  gchar                  *job_name = NULL;
-  guint                   job_id;
-  gint                    printer_state;
-  gint                    job_state;
-  gint                    job_impressions_completed;
-  static const char * const requested_attrs[] = {
-    "job-printer-uri",
-    "job-originating-user-name"};
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (g_strcmp0 (signal_name, "PrinterAdded") != 0 &&
-      g_strcmp0 (signal_name, "PrinterDeleted") != 0 &&
-      g_strcmp0 (signal_name, "PrinterStateChanged") != 0 &&
-      g_strcmp0 (signal_name, "PrinterStopped") != 0 &&
-      g_strcmp0 (signal_name, "JobCreated") != 0 &&
-      g_strcmp0 (signal_name, "JobCompleted") != 0)
-    return;
-
-  if (g_variant_n_children (parameters) == 1)
-    g_variant_get (parameters, "(&s)", &text);
-  else if (g_variant_n_children (parameters) == 6)
-    {
-      g_variant_get (parameters, "(&s&s&su&sb)",
-                     &text,
-                     &printer_uri,
-                     &printer_name,
-                     &printer_state,
-                     &printer_state_reasons,
-                     &printer_is_accepting_jobs);
-    }
-  else if (g_variant_n_children (parameters) == 11)
-    {
-      g_variant_get (parameters, "(&s&s&su&sbuu&s&su)",
-                     &text,
-                     &printer_uri,
-                     &printer_name,
-                     &printer_state,
-                     &printer_state_reasons,
-                     &printer_is_accepting_jobs,
-                     &job_id,
-                     &job_state,
-                     &job_state_reasons,
-                     &job_name,
-                     &job_impressions_completed);
-    }
-
-  if (g_strcmp0 (signal_name, "PrinterAdded") == 0 ||
-      g_strcmp0 (signal_name, "PrinterDeleted") == 0 ||
-      g_strcmp0 (signal_name, "PrinterStateChanged") == 0 ||
-      g_strcmp0 (signal_name, "PrinterStopped") == 0)
-    actualize_printers_list (self);
-  else if (g_strcmp0 (signal_name, "JobCreated") == 0 ||
-           g_strcmp0 (signal_name, "JobCompleted") == 0)
-    {
-      http_t *http;
-      gchar  *job_uri;
-      ipp_t  *request, *response;
-
-      job_uri = g_strdup_printf ("ipp://localhost/jobs/%d", job_id);
-      if ((http = httpConnectEncrypt (cupsServer (), ippPort (),
-                                     cupsEncryption ())) != NULL)
-        {
-          request = ippNewRequest (IPP_GET_JOB_ATTRIBUTES);
-          ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                       "job-uri", NULL, job_uri);
-          ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-                        "requesting-user-name", NULL, cupsUser ());
-          ippAddStrings (request, IPP_TAG_OPERATION, IPP_TAG_KEYWORD,
-                         "requested-attributes", G_N_ELEMENTS (requested_attrs), NULL, requested_attrs);
-          response = cupsDoRequest (http, request, "/");
-
-          if (response)
-            {
-              if (ippGetStatusCode (response) <= IPP_OK_CONFLICT)
-                {
-                  ipp_attribute_t *attr_username = NULL;
-                  ipp_attribute_t *attr_printer_uri = NULL;
-
-                  attr_username = ippFindAttribute(response, "job-originating-user-name", IPP_TAG_NAME);
-                  attr_printer_uri = ippFindAttribute(response, "job-printer-uri", IPP_TAG_URI);
-                  if (attr_username && attr_printer_uri &&
-                      g_strcmp0 (ippGetString (attr_username, 0, NULL), cupsUser ()) == 0 &&
-                      g_strrstr (ippGetString (attr_printer_uri, 0, NULL), "/") != 0 &&
-                      priv->current_dest >= 0 &&
-                      priv->current_dest < priv->num_dests &&
-                      priv->dests != NULL &&
-                      g_strcmp0 (g_strrstr (ippGetString (attr_printer_uri, 0, NULL), "/") + 1,
-                                 priv->dests[priv->current_dest].name) == 0)
-                    update_jobs_count (self);
-                }
-              ippDelete(response);
-            }
-          httpClose (http);
-        }
-      g_free (job_uri);
-    }
-}
-
-static gboolean
-renew_subscription (gpointer data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) data;
-  static const char * const events[] = {
-          "printer-added",
-          "printer-deleted",
-          "printer-stopped",
-          "printer-state-changed",
-          "job-created",
-          "job-completed"};
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  priv->subscription_id = renew_cups_subscription (priv->subscription_id,
-                                                   events,
-                                                   G_N_ELEMENTS (events),
-                                                   SUBSCRIPTION_DURATION);
-
-  if (priv->subscription_id > 0)
-    return TRUE;
-  else
-    return FALSE;
-}
-
-static void
-attach_to_cups_notifier (gpointer data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) data;
-  GError                 *error = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (renew_subscription (self))
-    {
-      priv->subscription_renewal_id =
-        g_timeout_add_seconds (RENEW_INTERVAL, renew_subscription, self);
-
-      priv->cups_proxy = g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
-                                                        0,
-                                                        NULL,
-                                                        CUPS_DBUS_NAME,
-                                                        CUPS_DBUS_PATH,
-                                                        CUPS_DBUS_INTERFACE,
-                                                        NULL,
-                                                        &error);
-
-      if (!priv->cups_proxy)
-        {
-          g_warning ("%s", error->message);
-          g_error_free (error);
-          return;
-        }
-
-      priv->cups_bus_connection = g_dbus_proxy_get_connection (priv->cups_proxy);
-
-      priv->dbus_subscription_id =
-        g_dbus_connection_signal_subscribe (priv->cups_bus_connection,
-                                            NULL,
-                                            CUPS_DBUS_INTERFACE,
-                                            NULL,
-                                            CUPS_DBUS_PATH,
-                                            NULL,
-                                            0,
-                                            on_cups_notification,
-                                            self,
-                                            NULL);
-    }
-}
-
-static void
-detach_from_cups_notifier (gpointer data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) data;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->dbus_subscription_id != 0) {
-    g_dbus_connection_signal_unsubscribe (priv->cups_bus_connection,
-                                          priv->dbus_subscription_id);
-    priv->dbus_subscription_id = 0;
-  }
-
-  cancel_cups_subscription (priv->subscription_id);
-  priv->subscription_id = 0;
-
-  if (priv->subscription_renewal_id != 0) {
-    g_source_remove (priv->subscription_renewal_id);
-    priv->subscription_renewal_id = 0;
-  }
-
-  if (priv->cups_proxy != NULL) {
-    g_object_unref (priv->cups_proxy);
-    priv->cups_proxy = NULL;
-  }
-}
-
-static void
-free_dests (CcPrintersPanel *self)
-{
-  CcPrintersPanelPrivate *priv;
-  gint                    i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->num_dests > 0)
-    {
-      for (i = 0; i < priv->num_dests; i++)
-        {
-          g_free (priv->dest_model_names[i]);
-          if (priv->ppd_file_names[i]) {
-            g_unlink (priv->ppd_file_names[i]);
-            g_free (priv->ppd_file_names[i]);
-          }
-        }
-      g_free (priv->dest_model_names);
-      g_free (priv->ppd_file_names);
-      cupsFreeDests (priv->num_dests, priv->dests);
-    }
-  priv->dests = NULL;
-  priv->num_dests = 0;
-  priv->current_dest = -1;
-  priv->dest_model_names = NULL;
-  priv->ppd_file_names = NULL;
-}
-
-enum
-{
-  NOTEBOOK_INFO_PAGE = 0,
-  NOTEBOOK_NO_PRINTERS_PAGE,
-  NOTEBOOK_NO_CUPS_PAGE,
-  NOTEBOOK_N_PAGES
-};
-
-enum
-{
-  PRINTER_ID_COLUMN,
-  PRINTER_NAME_COLUMN,
-  PRINTER_PAUSED_COLUMN,
-  PRINTER_DEFAULT_ICON_COLUMN,
-  PRINTER_ICON_COLUMN,
-  PRINTER_N_COLUMNS
-};
-
-static void
-printer_selection_changed_cb (GtkTreeSelection *selection,
-                              gpointer          user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkTreeModel           *model;
-  cups_ptype_t            type = 0;
-  GtkTreeIter             iter;
-  GtkWidget              *widget;
-  GtkWidget              *model_button;
-  GtkWidget              *model_label;
-  GValue                  value = G_VALUE_INIT;
-  gchar                  *printer_make_and_model = NULL;
-  gchar                  *printer_model = NULL;
-  gchar                  *reason = NULL;
-  gchar                 **printer_reasons = NULL;
-  gchar                  *marker_types = NULL;
-  gchar                  *printer_name = NULL;
-  gchar                  *printer_icon = NULL;
-  gchar                  *printer_type = NULL;
-  gchar                  *supply_type = NULL;
-  gchar                  *printer_uri = NULL;
-  gchar                  *location = NULL;
-  gchar                  *status = NULL;
-  gchar                  *device_uri = NULL;
-  gchar                  *printer_hostname = NULL;
-  int                     printer_state = 3;
-  int                     id = -1;
-  int                     i, j;
-  static const char * const reasons[] =
-    {
-      "toner-low",
-      "toner-empty",
-      "developer-low",
-      "developer-empty",
-      "marker-supply-low",
-      "marker-supply-empty",
-      "cover-open",
-      "door-open",
-      "media-low",
-      "media-empty",
-      "offline",
-      "paused",
-      "marker-waste-almost-full",
-      "marker-waste-full",
-      "opc-near-eol",
-      "opc-life-over"
-    };
-  static const char * statuses[] =
-    {
-      /* Translators: The printer is low on toner */
-      N_("Low on toner"),
-      /* Translators: The printer has no toner left */
-      N_("Out of toner"),
-      /* Translators: "Developer" is a chemical for photo development,
-       * http://en.wikipedia.org/wiki/Photographic_developer */
-      N_("Low on developer"),
-      /* Translators: "Developer" is a chemical for photo development,
-       * http://en.wikipedia.org/wiki/Photographic_developer */
-      N_("Out of developer"),
-      /* Translators: "marker" is one color bin of the printer */
-      N_("Low on a marker supply"),
-      /* Translators: "marker" is one color bin of the printer */
-      N_("Out of a marker supply"),
-      /* Translators: One or more covers on the printer are open */
-      N_("Open cover"),
-      /* Translators: One or more doors on the printer are open */
-      N_("Open door"),
-      /* Translators: At least one input tray is low on media */
-      N_("Low on paper"),
-      /* Translators: At least one input tray is empty */
-      N_("Out of paper"),
-      /* Translators: The printer is offline */
-      NC_("printer state", "Offline"),
-      /* Translators: Someone has paused the Printer */
-      NC_("printer state", "Paused"),
-      /* Translators: The printer marker supply waste receptacle is almost full */
-      N_("Waste receptacle almost full"),
-      /* Translators: The printer marker supply waste receptacle is full */
-      N_("Waste receptacle full"),
-      /* Translators: Optical photo conductors are used in laser printers */
-      N_("The optical photo conductor is near end of life"),
-      /* Translators: Optical photo conductors are used in laser printers */
-      N_("The optical photo conductor is no longer functioning")
-    };
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      gtk_tree_model_get (model, &iter,
-			  PRINTER_ID_COLUMN, &id,
-			  PRINTER_NAME_COLUMN, &printer_name,
-			  PRINTER_ICON_COLUMN, &printer_icon,
-			  -1);
-    }
-  else
-    id = -1;
-
-  priv->current_dest = id;
-
-  update_jobs_count (self);
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "notebook");
-      if (gtk_notebook_get_current_page (GTK_NOTEBOOK (widget)) >= NOTEBOOK_NO_PRINTERS_PAGE)
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), NOTEBOOK_INFO_PAGE);
-
-      for (i = 0; i < priv->dests[id].num_options; i++)
-        {
-          if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-location") == 0)
-            location = g_strdup (priv->dests[priv->current_dest].options[i].value);
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-state") == 0)
-            printer_state = atoi (priv->dests[priv->current_dest].options[i].value);
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-state-reasons") == 0)
-            reason = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "marker-types") == 0)
-            marker_types = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-make-and-model") == 0)
-            printer_make_and_model = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-uri-supported") == 0)
-            printer_uri = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-type") == 0)
-            printer_type = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "device-uri") == 0)
-            device_uri = priv->dests[priv->current_dest].options[i].value;
-        }
-
-      if (priv->ppd_file_names[priv->current_dest] == NULL)
-        priv->ppd_file_names[priv->current_dest] =
-          g_strdup (cupsGetPPD (priv->dests[priv->current_dest].name));
-
-      if (priv->dest_model_names[priv->current_dest] == NULL)
-        priv->dest_model_names[priv->current_dest] =
-          get_ppd_attribute (priv->ppd_file_names[priv->current_dest],
-                             "ModelName");
-
-      printer_model = g_strdup (priv->dest_model_names[priv->current_dest]);
-
-      if (printer_model == NULL && printer_make_and_model)
-        {
-          gchar *breakpoint = NULL, *tmp = NULL, *tmp2 = NULL;
-          gchar  backup;
-          size_t length = 0;
-          gchar *forbiden[] = {
-              "foomatic",
-              ",",
-              "hpijs",
-              "hpcups",
-              "(recommended)",
-              "postscript (recommended)",
-              NULL };
-
-          tmp = g_ascii_strdown (printer_make_and_model, -1);
-
-          for (i = 0; i < g_strv_length (forbiden); i++)
-            {
-              tmp2 = g_strrstr (tmp, forbiden[i]);
-              if (breakpoint == NULL || 
-                  (tmp2 != NULL && tmp2 < breakpoint))
-                breakpoint = tmp2;
-            }
-
-          if (breakpoint)
-            {
-              backup = *breakpoint;
-              *breakpoint = '\0';
-              length = strlen (tmp);
-              *breakpoint = backup;
-              g_free (tmp);
-
-              if (length > 0)
-                printer_model = g_strndup (printer_make_and_model, length);
-            }
-          else
-            printer_model = g_strdup (printer_make_and_model);
-        }
-
-      if (priv->new_printer_name &&
-          g_strcmp0 (priv->new_printer_name, printer_name) == 0)
-        {
-          /* Translators: Printer's state (printer is being configured right now) */
-          status = g_strdup ( C_("printer state", "Configuring"));
-        }
-
-      /* Find the first of the most severe reasons
-       * and show it in the status field
-       */
-      if (!status &&
-          reason &&
-          !g_str_equal (reason, "none"))
-        {
-          int errors = 0, warnings = 0, reports = 0;
-          int error_index = -1, warning_index = -1, report_index = -1;
-
-          printer_reasons = g_strsplit (reason, ",", -1);
-          for (i = 0; i < g_strv_length (printer_reasons); i++)
-            {
-              for (j = 0; j < G_N_ELEMENTS (reasons); j++)
-                if (strncmp (printer_reasons[i],
-                             reasons[j],
-                             strlen (reasons[j])) == 0)
-                    {
-                      if (g_str_has_suffix (printer_reasons[i], "-report"))
-                        {
-                          if (reports == 0)
-                            report_index = j;
-                          reports++;
-                        }
-                      else if (g_str_has_suffix (printer_reasons[i], "-warning"))
-                        {
-                          if (warnings == 0)
-                            warning_index = j;
-                          warnings++;
-                        }
-                      else
-                        {
-                          if (errors == 0)
-                            error_index = j;
-                          errors++;
-                        }
-                    }
-            }
-          g_strfreev (printer_reasons);
-
-          if (error_index >= 0)
-            status = g_strdup (_(statuses[error_index]));
-          else if (warning_index >= 0)
-            status = g_strdup (_(statuses[warning_index]));
-          else if (report_index >= 0)
-            status = g_strdup (_(statuses[report_index]));
-        }
-
-      if (status == NULL)
-        {
-          switch (printer_state)
-            {
-              case 3:
-                /* Translators: Printer's state (can start new job without waiting) */
-                status = g_strdup ( C_("printer state", "Ready"));
-                break;
-              case 4:
-                /* Translators: Printer's state (jobs are processing) */
-                status = g_strdup ( C_("printer state", "Processing"));
-                break;
-              case 5:
-                /* Translators: Printer's state (no jobs can be processed) */
-                status = g_strdup ( C_("printer state", "Stopped"));
-                break;
-            }
-        }
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-icon");
-      g_value_init (&value, G_TYPE_INT);
-      g_object_get_property ((GObject *) widget, "icon-size", &value);
-
-      if (printer_icon)
-        {
-          gtk_image_set_from_icon_name ((GtkImage *) widget, printer_icon, g_value_get_int (&value));
-          g_free (printer_icon);
-        }
-      else
-        gtk_image_set_from_icon_name ((GtkImage *) widget, "printer", g_value_get_int (&value));
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-name-label");
-
-      if (printer_name)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), printer_name);
-          g_free (printer_name);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-status-label");
-
-      if (status)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), status);
-          g_free (status);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-location-label");
-
-      if (location)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), location);
-          g_free (location);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-
-      model_button = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-model-button");
-
-      model_label = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-model-label");
-
-      if (printer_model)
-        {
-          gtk_button_set_label (GTK_BUTTON (model_button), printer_model);
-          gtk_label_set_text (GTK_LABEL (model_label), printer_model);
-          g_free (printer_model);
-        }
-      else
-        {
-          gtk_button_set_label (GTK_BUTTON (model_button), EMPTY_TEXT);
-          gtk_label_set_text (GTK_LABEL (model_label), EMPTY_TEXT);
-        }
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-ip-address-label");
-
-      if (printer_type)
-        type = atoi (printer_type);
-
-      printer_hostname = printer_get_hostname (type, device_uri, printer_uri);
-
-      if (printer_hostname)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), printer_hostname);
-          g_free (printer_hostname);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-disable-switch");
-
-      g_signal_handlers_block_by_func (G_OBJECT (widget), printer_disable_cb, self);
-      gtk_switch_set_active (GTK_SWITCH (widget), printer_state != 5);
-      g_signal_handlers_unblock_by_func (G_OBJECT (widget), printer_disable_cb, self);
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-default-check-button");
-
-      g_signal_handlers_block_by_func (G_OBJECT (widget), printer_set_default_cb, self);
-      gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (widget), priv->dests[id].is_default);
-      g_signal_handlers_unblock_by_func (G_OBJECT (widget), printer_set_default_cb, self);
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "supply-drawing-area");
-      gtk_widget_set_size_request (widget, -1, SUPPLY_BAR_HEIGHT);
-      gtk_widget_queue_draw (widget);
-
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "supply-label");
-
-      if (marker_types && g_strrstr (marker_types, "toner") != NULL)
-        /* Translators: Toner supply */
-        supply_type = g_strdup ( _("Toner Level"));
-      else if (marker_types && g_strrstr (marker_types, "ink") != NULL)
-        /* Translators: Ink supply */
-        supply_type = g_strdup ( _("Ink Level"));
-      else
-        /* Translators: By supply we mean ink, toner, staples, water, ... */
-        supply_type = g_strdup ( _("Supply Level"));
-
-      if (supply_type)
-        {
-          gtk_label_set_text (GTK_LABEL (widget), supply_type);
-          g_free (supply_type);
-        }
-      else
-        gtk_label_set_text (GTK_LABEL (widget), EMPTY_TEXT);
-    }
-  else
-    {
-      if (id == -1)
-        {
-          if (priv->new_printer_name &&
-              g_strcmp0 (priv->new_printer_name, printer_name) == 0)
-            {
-              /* Translators: Printer's state (printer is being installed right now) */
-              status = g_strdup ( C_("printer state", "Installing"));
-              location = g_strdup (priv->new_printer_location);
-              printer_model = g_strdup (priv->new_printer_make_and_model);
-
-              widget = (GtkWidget*)
-                gtk_builder_get_object (priv->builder, "notebook");
-              if (gtk_notebook_get_current_page (GTK_NOTEBOOK (widget)) >= NOTEBOOK_NO_PRINTERS_PAGE)
-                gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), NOTEBOOK_INFO_PAGE);
-            }
-        }
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-icon");
-      g_value_init (&value, G_TYPE_INT);
-      g_object_get_property ((GObject *) widget, "icon-size", &value);
-
-      if (printer_icon)
-        {
-          gtk_image_set_from_icon_name ((GtkImage *) widget, printer_icon, g_value_get_int (&value));
-          g_free (printer_icon);
-        }
-      else
-        gtk_image_set_from_icon_name ((GtkImage *) widget, "printer", g_value_get_int (&value));
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-name-label");
-      if (printer_name)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), printer_name);
-          g_free (printer_name);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-status-label");
-      if (status)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), status);
-          g_free (status);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-location-label");
-
-      if (location)
-        {
-          cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), location);
-          g_free (location);
-        }
-      else
-        cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-
-      model_button = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-model-button");
-
-      model_label = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-model-label");
-
-      if (printer_model)
-        {
-          gtk_button_set_label (GTK_BUTTON (model_button), printer_model);
-          gtk_label_set_text (GTK_LABEL (model_label), printer_model);
-          g_free (printer_model);
-        }
-      else
-        {
-          gtk_button_set_label (GTK_BUTTON (model_button), EMPTY_TEXT);
-          gtk_label_set_text (GTK_LABEL (model_label), EMPTY_TEXT);
-        }
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-ip-address-label");
-      cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-jobs-label");
-      cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-disable-switch");
-
-      g_signal_handlers_block_by_func (G_OBJECT (widget), printer_disable_cb, self);
-      gtk_switch_set_active (GTK_SWITCH (widget), FALSE);
-      g_signal_handlers_unblock_by_func (G_OBJECT (widget), printer_disable_cb, self);
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-default-check-button");
-
-      g_signal_handlers_block_by_func (G_OBJECT (widget), printer_set_default_cb, self);
-      gtk_toggle_button_set_active (GTK_TOGGLE_BUTTON (widget), FALSE);
-      g_signal_handlers_unblock_by_func (G_OBJECT (widget), printer_set_default_cb, self);
-    }
-
-  update_sensitivity (self);
-}
-
-static void
-actualize_printers_list (CcPrintersPanel *self)
-{
-  CcPrintersPanelPrivate *priv;
-  GtkTreeSelection       *selection;
-  GtkListStore           *store;
-  cups_ptype_t            printer_type = 0;
-  GtkTreeModel           *model;
-  GtkTreeIter             selected_iter;
-  GtkTreeView            *treeview;
-  GtkTreeIter             iter;
-  cups_job_t             *jobs = NULL;
-  GtkWidget              *widget;
-  gboolean                paused = FALSE;
-  gboolean                selected_iter_set = FALSE;
-  gboolean                valid = FALSE;
-  http_t                 *http;
-  gchar                  *current_printer_name = NULL;
-  gchar                  *printer_icon_name = NULL;
-  gchar                  *default_icon_name = NULL;
-  gchar                  *device_uri = NULL;
-  gint                    new_printer_position = 0;
-  int                     current_dest = -1;
-  int                     i, j;
-  int                     num_jobs = 0;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  treeview = (GtkTreeView*)
-    gtk_builder_get_object (priv->builder, "printers-treeview");
-
-  if ((selection = gtk_tree_view_get_selection (treeview)) != NULL &&
-      gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      gtk_tree_model_get (model, &iter,
-			  PRINTER_NAME_COLUMN, &current_printer_name,
-			  -1);
-    }
-
-  if (priv->new_printer_name &&
-      priv->select_new_printer)
-    {
-      g_free (current_printer_name);
-      current_printer_name = g_strdup (priv->new_printer_name);
-      priv->select_new_printer = FALSE;
-    }
-
-  free_dests (self);
-  priv->num_dests = cupsGetDests (&priv->dests);
-  priv->dest_model_names = g_new0 (gchar *, priv->num_dests);
-  priv->ppd_file_names = g_new0 (gchar *, priv->num_dests);
-
-  store = gtk_list_store_new (PRINTER_N_COLUMNS,
-                              G_TYPE_INT,
-                              G_TYPE_STRING,
-                              G_TYPE_BOOLEAN,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING);
-
-  if (priv->num_dests == 0 && !priv->new_printer_name)
-    {
-      widget = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "notebook");
-
-      http = httpConnectEncrypt (cupsServer (), ippPort (), cupsEncryption ());
-      if (http)
-        {
-          httpClose (http);
-          gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), NOTEBOOK_NO_PRINTERS_PAGE);
-        }
-      else
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), NOTEBOOK_NO_CUPS_PAGE);
-
-      gtk_list_store_append (store, &iter);
-      gtk_list_store_set (store, &iter,
-                          PRINTER_ID_COLUMN, 0,
-      /* Translators: There are no printers available (none is configured or CUPS is not running) */
-                          PRINTER_NAME_COLUMN, _("No printers available"),
-                          PRINTER_PAUSED_COLUMN, TRUE,
-                          PRINTER_DEFAULT_ICON_COLUMN, NULL,
-                          PRINTER_ICON_COLUMN, NULL,
-                          -1);
-      gtk_widget_set_sensitive (GTK_WIDGET (treeview), FALSE);
-    }
-  else
-    gtk_widget_set_sensitive (GTK_WIDGET (treeview), TRUE);
-
-  for (i = 0; i < priv->num_dests; i++)
-    {
-      gchar *instance;
-
-      if (priv->new_printer_name && new_printer_position >= 0)
-        {
-          gint comparison_result = g_ascii_strcasecmp (priv->dests[i].name, priv->new_printer_name);
-
-          if (comparison_result < 0)
-            new_printer_position = i + 1;
-          else if (comparison_result == 0)
-            new_printer_position = -1;
-        }
-
-      gtk_list_store_append (store, &iter);
-
-      if (priv->dests[i].instance)
-        {
-          instance = g_strdup_printf ("%s / %s", priv->dests[i].name, priv->dests[i].instance);
-        }
-      else
-        {
-          instance = g_strdup (priv->dests[i].name);
-        }
-
-      for (j = 0; j < priv->dests[i].num_options; j++)
-        {
-          if (g_strcmp0 (priv->dests[i].options[j].name, "printer-state") == 0)
-            paused = (g_strcmp0 (priv->dests[i].options[j].value, "5") == 0);
-          else if (g_strcmp0 (priv->dests[i].options[j].name, "device-uri") == 0)
-            device_uri = priv->dests[i].options[j].value;
-          else if (g_strcmp0 (priv->dests[i].options[j].name, "printer-type") == 0)
-            printer_type = atoi (priv->dests[i].options[j].value);
-        }
-
-      if (priv->dests[i].is_default)
-        default_icon_name = g_strdup ("emblem-default-symbolic");
-      else
-        default_icon_name = NULL;
-
-      if (printer_is_local (printer_type, device_uri))
-        printer_icon_name = g_strdup ("printer");
-      else
-        printer_icon_name = g_strdup ("printer-network");
-
-      gtk_list_store_set (store, &iter,
-                          PRINTER_ID_COLUMN, i,
-                          PRINTER_NAME_COLUMN, instance,
-                          PRINTER_PAUSED_COLUMN, paused,
-                          PRINTER_DEFAULT_ICON_COLUMN, default_icon_name,
-                          PRINTER_ICON_COLUMN, printer_icon_name,
-                          -1);
-
-      if (g_strcmp0 (current_printer_name, instance) == 0)
-        {
-          current_dest = i;
-          selected_iter = iter;
-          selected_iter_set = TRUE;
-        }
-
-      g_free (instance);
-      g_free (printer_icon_name);
-      g_free (default_icon_name);
-    }
-
-  if (priv->new_printer_name && new_printer_position >= 0)
-    {
-      gtk_list_store_insert (store, &iter, new_printer_position);
-      gtk_list_store_set (store, &iter,
-                          PRINTER_ID_COLUMN, -1,
-                          PRINTER_NAME_COLUMN, priv->new_printer_name,
-                          PRINTER_PAUSED_COLUMN, TRUE,
-                          PRINTER_DEFAULT_ICON_COLUMN, NULL,
-                          PRINTER_ICON_COLUMN, priv->new_printer_on_network ?
-                            "printer-network" : "printer",
-                          -1);
-
-      if (g_strcmp0 (current_printer_name, priv->new_printer_name) == 0)
-        {
-          selected_iter = iter;
-          selected_iter_set = TRUE;
-        }
-    }
-
-  g_signal_handlers_block_by_func (
-    G_OBJECT (gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview))),
-    printer_selection_changed_cb,
-    self);
-
-  gtk_tree_view_set_model (treeview, GTK_TREE_MODEL (store));
-
-  g_signal_handlers_unblock_by_func (
-    G_OBJECT (gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview))),
-    printer_selection_changed_cb,
-    self);
-
-  if (selected_iter_set)
-    {
-      priv->current_dest = current_dest;
-      gtk_tree_selection_select_iter (
-        gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)),
-        &selected_iter);
-    }
-  else
-    {
-      num_jobs = cupsGetJobs (&jobs, NULL, 1, CUPS_WHICHJOBS_ALL);
-
-      /* Select last used printer */
-      if (num_jobs > 0)
-        {
-          for (i = 0; i < priv->num_dests; i++)
-            if (g_strcmp0 (priv->dests[i].name, jobs[num_jobs - 1].dest) == 0)
-              {
-                priv->current_dest = i;
-                break;
-              }
-          cupsFreeJobs (num_jobs, jobs);
-        }
-
-      /* Select default printer */
-      if (priv->current_dest < 0)
-        {
-          for (i = 0; i < priv->num_dests; i++)
-            if (priv->dests[i].is_default)
-              {
-                priv->current_dest = i;
-                break;
-              }
-        }
-
-      if (priv->current_dest >= 0)
-        {
-          gint id;
-          valid = gtk_tree_model_get_iter_first ((GtkTreeModel *) store,
-                                                 &selected_iter);
-
-          while (valid)
-            {
-              gtk_tree_model_get ((GtkTreeModel *) store, &selected_iter,
-                                  PRINTER_ID_COLUMN, &id,
-                                  -1);
-              if (id == priv->current_dest)
-                break;
-
-              valid = gtk_tree_model_iter_next ((GtkTreeModel *) store,
-                                                &selected_iter);
-            }
-
-          gtk_tree_selection_select_iter (
-            gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)),
-            &selected_iter);
-        }
-      else if (priv->num_dests > 0)
-        {
-          /* Select first printer */
-          gtk_tree_model_get_iter_first ((GtkTreeModel *) store,
-                                         &selected_iter);
-
-          gtk_tree_selection_select_iter (
-            gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)),
-            &selected_iter);
-        }
-    }
-
-  g_free (current_printer_name);
-  g_object_unref (store);
-
-  update_sensitivity (self);
-}
-
-static void
-set_cell_sensitivity_func (GtkTreeViewColumn *tree_column,
-                           GtkCellRenderer   *cell,
-                           GtkTreeModel      *tree_model,
-                           GtkTreeIter       *iter,
-                           gpointer           func_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) func_data;
-  gboolean                paused = FALSE;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  gtk_tree_model_get (tree_model, iter, PRINTER_PAUSED_COLUMN, &paused, -1);
-
-  if (priv->num_dests == 0)
-    g_object_set (G_OBJECT (cell),
-                  "ellipsize", PANGO_ELLIPSIZE_NONE,
-                  "width-chars", -1,
-                  NULL);
-  else
-    g_object_set (G_OBJECT (cell),
-                  "ellipsize", PANGO_ELLIPSIZE_END,
-                  "width-chars", 18,
-                  NULL);
-
-  g_object_set (cell, "sensitive", !paused, NULL);
-}
-
-static void
-set_pixbuf_cell_sensitivity_func (GtkTreeViewColumn *tree_column,
-                                  GtkCellRenderer   *cell,
-                                  GtkTreeModel      *tree_model,
-                                  GtkTreeIter       *iter,
-                                  gpointer           func_data)
-{
-  gboolean paused = FALSE;
-
-  gtk_tree_model_get (tree_model, iter, PRINTER_PAUSED_COLUMN, &paused, -1);
-  g_object_set (cell, "sensitive", !paused, NULL);
-}
-
-static void
-populate_printers_list (CcPrintersPanel *self)
-{
-  CcPrintersPanelPrivate *priv;
-  GtkTreeViewColumn      *column;
-  GtkCellRenderer        *icon_renderer;
-  GtkCellRenderer        *icon_renderer2;
-  GtkCellRenderer        *renderer;
-  GtkWidget              *treeview;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  treeview = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printers-treeview");
-
-  g_signal_connect (gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)),
-                    "changed", G_CALLBACK (printer_selection_changed_cb), self);
-
-  actualize_printers_list (self);
-
-
-  icon_renderer = gtk_cell_renderer_pixbuf_new ();
-  g_object_set (icon_renderer, "stock-size", gtk_icon_size_from_name ("cc-sidebar-list"), NULL);
-  gtk_cell_renderer_set_padding (icon_renderer, 4, 4);
-  column = gtk_tree_view_column_new_with_attributes ("Icon", icon_renderer,
-                                                     "icon-name", PRINTER_ICON_COLUMN, NULL);
-  gtk_tree_view_column_set_cell_data_func (column, icon_renderer, set_pixbuf_cell_sensitivity_func,
-                                           self, NULL);
-  gtk_tree_view_column_set_expand (column, FALSE);
-  gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-
-
-  renderer = gtk_cell_renderer_text_new ();
-  g_object_set (G_OBJECT (renderer), "ellipsize", PANGO_ELLIPSIZE_END, "width-chars", 18, NULL);
-  column = gtk_tree_view_column_new_with_attributes ("Printer", renderer,
-                                                     "text", PRINTER_NAME_COLUMN, NULL);
-  gtk_tree_view_column_set_cell_data_func (column, renderer, set_cell_sensitivity_func,
-                                           self, NULL);
-  gtk_tree_view_column_set_expand (column, FALSE);
-  gtk_tree_view_column_set_min_width (column, 120);
-  gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-
-
-  icon_renderer2 = gtk_cell_renderer_pixbuf_new ();
-  column = gtk_tree_view_column_new_with_attributes ("Default", icon_renderer2,
-                                                     "icon-name", PRINTER_DEFAULT_ICON_COLUMN, NULL);
-  gtk_tree_view_column_set_expand (column, FALSE);
-  gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-}
-
-enum
-{
-  JOB_ID_COLUMN,
-  JOB_TITLE_COLUMN,
-  JOB_STATE_COLUMN,
-  JOB_CREATION_TIME_COLUMN,
-  JOB_N_COLUMNS
-};
-
-static void
-update_jobs_count (CcPrintersPanel *self)
-{
-  CcPrintersPanelPrivate *priv;
-  cups_job_t             *jobs;
-  GtkWidget              *widget;
-  gchar                  *active_jobs = NULL;
-  gint                    num_jobs;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  priv->num_jobs = -1;
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      priv->num_jobs = cupsGetJobs (&jobs, priv->dests[priv->current_dest].name, 1, CUPS_WHICHJOBS_ACTIVE);
-      if (priv->num_jobs > 0)
-        cupsFreeJobs (priv->num_jobs, jobs);
-
-      num_jobs = priv->num_jobs < 0 ? 0 : (guint) priv->num_jobs;
-      /* Translators: there is n active print jobs on this printer */
-      active_jobs = g_strdup_printf (ngettext ("%u active", "%u active", num_jobs), num_jobs);
-    }
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-jobs-label");
-
-  if (active_jobs)
-    {
-      cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), active_jobs);
-      g_free (active_jobs);
-    }
-  else
-    cc_editable_entry_set_text (CC_EDITABLE_ENTRY (widget), EMPTY_TEXT);
-
-  if (priv->pp_jobs_dialog)
-    {
-      pp_jobs_dialog_update (priv->pp_jobs_dialog);
-    }
-}
-
-static void
-printer_disable_cb (GObject    *gobject,
-                    GParamSpec *pspec,
-                    gpointer    user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  gboolean                paused = FALSE;
-  char                   *name = NULL;
-  int                     i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      name = priv->dests[priv->current_dest].name;
-
-      for (i = 0; i < priv->dests[priv->current_dest].num_options; i++)
-        {
-          if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-state") == 0)
-            paused = (g_strcmp0 (priv->dests[priv->current_dest].options[i].value, "5") == 0);
-        }
-    }
-
-  if (name && printer_set_enabled (name, paused))
-    actualize_printers_list (self);
-}
-
-typedef struct {
-  gchar *color;
-  gchar *type;
-  gchar *name;
-  gint   level;
-} MarkerItem;
-
-static gint
-markers_cmp (gconstpointer a,
-             gconstpointer b)
-{
-  MarkerItem *x = (MarkerItem*) a;
-  MarkerItem *y = (MarkerItem*) b;
-
-  if (x->level < y->level)
-    return 1;
-  else if (x->level == y->level)
-    return 0;
-  else
-    return -1;
-}
-
-static void
-rounded_rectangle (cairo_t *cr, double x, double y, double w, double h, double r)
-{
-    cairo_new_sub_path (cr);
-    cairo_arc (cr, x + r, y + r, r, M_PI, 3 * M_PI / 2);
-    cairo_arc (cr, x + w - r, y + r, r, 3 *M_PI / 2, 2 * M_PI);
-    cairo_arc (cr, x + w - r, y + h - r, r, 0, M_PI / 2);
-    cairo_arc (cr, x + r, y + h - r, r, M_PI / 2, M_PI);
-    cairo_close_path (cr);
-}
-
-static gboolean
-supply_levels_draw_cb (GtkWidget *widget,
-                       cairo_t *cr,
-                       gpointer user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkStyleContext        *context;
-  gchar                  *marker_levels = NULL;
-  gchar                  *marker_colors = NULL;
-  gchar                  *marker_names = NULL;
-  gchar                  *marker_types = NULL;
-  gchar                  *tooltip_text = NULL;
-  gint                    width;
-  gint                    height;
-  int                     i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  width = gtk_widget_get_allocated_width (widget);
-  height = gtk_widget_get_allocated_height (widget);
-
-  cairo_rectangle (cr, 0.0, 0.0, width, height);
-  gdk_cairo_set_source_rgba (cr, &priv->background_color);
-  cairo_fill (cr);
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      for (i = 0; i < priv->dests[priv->current_dest].num_options; i++)
-        {
-          if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "marker-names") == 0)
-            marker_names = g_strcompress (priv->dests[priv->current_dest].options[i].value);
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "marker-levels") == 0)
-            marker_levels = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "marker-colors") == 0)
-            marker_colors = priv->dests[priv->current_dest].options[i].value;
-          else if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "marker-types") == 0)
-            marker_types = priv->dests[priv->current_dest].options[i].value;
-        }
-
-      if (marker_levels && marker_colors && marker_names && marker_types)
-        {
-          GdkRGBA   border_color = {0.0, 0.0, 0.0, 1.0};
-          GSList   *markers = NULL;
-          GSList   *tmp_list = NULL;
-          GValue    int_val = G_VALUE_INIT;
-          gchar   **marker_levelsv = NULL;
-          gchar   **marker_colorsv = NULL;
-          gchar   **marker_namesv = NULL;
-          gchar   **marker_typesv = NULL;
-          gchar    *tmp = NULL;
-          gint      border_radius = 0;
-
-          context = gtk_widget_get_style_context ((GtkWidget *)
-            gtk_builder_get_object (priv->builder, "printer-options-button"));
-          gtk_style_context_get_border_color (context, 0, &border_color);
-          gtk_style_context_get_property (
-            context, GTK_STYLE_PROPERTY_BORDER_RADIUS, 0, &int_val);
-          if (G_VALUE_HOLDS_INT (&int_val))
-            border_radius = g_value_get_int (&int_val);
-
-          widget = (GtkWidget*)
-            gtk_builder_get_object (priv->builder, "supply-drawing-area");
-
-          marker_levelsv = g_strsplit (marker_levels, ",", -1);
-          marker_colorsv = g_strsplit (marker_colors, ",", -1);
-          marker_namesv = g_strsplit (marker_names, ",", -1);
-          marker_typesv = g_strsplit (marker_types, ",", -1);
-
-          if (g_strv_length (marker_levelsv) == g_strv_length (marker_colorsv) &&
-              g_strv_length (marker_colorsv) == g_strv_length (marker_namesv) &&
-              g_strv_length (marker_namesv) == g_strv_length (marker_typesv))
-            {
-              for (i = 0; i < g_strv_length (marker_levelsv); i++)
-                {
-                  MarkerItem *marker;
-
-                  if (g_strcmp0 (marker_typesv[i], "ink") == 0 ||
-                      g_strcmp0 (marker_typesv[i], "toner") == 0)
-                    {
-                      marker = g_new0 (MarkerItem, 1);
-                      marker->type = g_strdup (marker_typesv[i]);
-                      marker->name = g_strdup (marker_namesv[i]);
-                      marker->color = g_strdup (marker_colorsv[i]);
-                      marker->level = atoi (marker_levelsv[i]);
-
-                      markers = g_slist_prepend (markers, marker);
-                    }
-                }
-
-              markers = g_slist_sort (markers, markers_cmp);
-
-              for (tmp_list = markers; tmp_list; tmp_list = tmp_list->next)
-                {
-                  GdkRGBA color = {0.0, 0.0, 0.0, 1.0};
-                  double  display_value;
-                  int     value;
-
-                  value = ((MarkerItem*) tmp_list->data)->level;
-
-                  gdk_rgba_parse (&color, ((MarkerItem*) tmp_list->data)->color);
-
-                  if (value > 0)
-                    {
-                      display_value = value / 100.0 * (width - 3.0);
-                      gdk_cairo_set_source_rgba (cr, &color);
-                      rounded_rectangle (cr, 1.5, 1.5, display_value, SUPPLY_BAR_HEIGHT - 3.0, border_radius);
-                      cairo_fill (cr);
-                    }
-
-                  if (tooltip_text)
-                    {
-                      tmp = g_strdup_printf ("%s\n%s",
-                                             tooltip_text,
-                                             ((MarkerItem*) tmp_list->data)->name);
-                      g_free (tooltip_text);
-                      tooltip_text = tmp;
-                      tmp = NULL;
-                    }
-                  else
-                    tooltip_text = g_strdup_printf ("%s",
-                                                    ((MarkerItem*) tmp_list->data)->name);
-                }
-
-              cairo_set_line_width (cr, 1.0);
-              gdk_cairo_set_source_rgba (cr, &border_color);
-              rounded_rectangle (cr, 1.5, 1.5, width - 3.0, SUPPLY_BAR_HEIGHT - 3.0, border_radius);
-              cairo_stroke (cr);
-
-              for (tmp_list = markers; tmp_list; tmp_list = tmp_list->next)
-                {
-                  g_free (((MarkerItem*) tmp_list->data)->name);
-                  g_free (((MarkerItem*) tmp_list->data)->type);
-                  g_free (((MarkerItem*) tmp_list->data)->color);
-                }
-              g_slist_free_full (markers, g_free);
-            }
-
-          g_strfreev (marker_levelsv);
-          g_strfreev (marker_colorsv);
-          g_strfreev (marker_namesv);
-          g_strfreev (marker_typesv);
-        }
-
-      g_free (marker_names);
-
-      if (tooltip_text)
-        {
-          gtk_widget_set_tooltip_text (widget, tooltip_text);
-          g_free (tooltip_text);
-        }
-      else
-        {
-          gtk_widget_set_tooltip_text (widget, NULL);
-          gtk_widget_set_has_tooltip (widget, FALSE);
-        }
-    }
-
-  return TRUE;
-}
-
-static void
-printer_set_default_cb (GtkToggleButton *button,
-                        gpointer         user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  char                   *name = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    name = priv->dests[priv->current_dest].name;
-
-  if (name)
-    {
-      printer_set_default (name);
-      actualize_printers_list (self);
-
-      g_signal_handlers_block_by_func (G_OBJECT (button), printer_set_default_cb, self);
-      gtk_toggle_button_set_active (button, priv->dests[priv->current_dest].is_default);
-      g_signal_handlers_unblock_by_func (G_OBJECT (button), printer_set_default_cb, self);
-  }
-}
-
-static void
-new_printer_dialog_pre_response_cb (PpNewPrinterDialog *dialog,
-                                    const gchar        *device_name,
-                                    const gchar        *device_location,
-                                    const gchar        *device_make_and_model,
-                                    gboolean            is_network_device,
-                                    gpointer            user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  priv->new_printer_name = g_strdup (device_name);
-  priv->new_printer_location = g_strdup (device_location);
-  priv->new_printer_make_and_model = g_strdup (device_make_and_model);
-  priv->new_printer_on_network = is_network_device;
-  priv->select_new_printer = TRUE;
-
-  actualize_printers_list (self);
-}
-
-static void
-new_printer_dialog_response_cb (PpNewPrinterDialog *dialog,
-                                gint                response_id,
-                                gpointer            user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->pp_new_printer_dialog)
-    g_clear_object (&priv->pp_new_printer_dialog);
-
-  g_clear_pointer (&priv->new_printer_name, g_free);
-  g_clear_pointer (&priv->new_printer_location, g_free);
-  g_clear_pointer (&priv->new_printer_make_and_model, g_free);
-
-  if (response_id == GTK_RESPONSE_REJECT)
-    {
-      GtkWidget *message_dialog;
-
-      message_dialog = gtk_message_dialog_new (NULL,
-                                               0,
-                                               GTK_MESSAGE_ERROR,
-                                               GTK_BUTTONS_CLOSE,
-      /* Translators: Addition of the new printer failed. */
-                                               _("Failed to add new printer."));
-      g_signal_connect (message_dialog,
-                        "response",
-                        G_CALLBACK (gtk_widget_destroy),
-                        NULL);
-      gtk_widget_show (message_dialog);
-    }
-
-  actualize_printers_list (self);
-}
-
-static void
-printer_add_cb (GtkToolButton *toolbutton,
-                gpointer       user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkWidget              *toplevel;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  toplevel = gtk_widget_get_toplevel (GTK_WIDGET (self));
-  priv->pp_new_printer_dialog = PP_NEW_PRINTER_DIALOG (pp_new_printer_dialog_new (GTK_WINDOW (toplevel)));
-
-  g_signal_connect (priv->pp_new_printer_dialog,
-                    "pre-response",
-                    G_CALLBACK (new_printer_dialog_pre_response_cb),
-                    self);
-
-  g_signal_connect (priv->pp_new_printer_dialog,
-                    "response",
-                    G_CALLBACK (new_printer_dialog_response_cb),
-                    self);
-}
-
-static void
-printer_remove_cb (GtkToolButton *toolbutton,
-                   gpointer       user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  char                   *printer_name = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    printer_name = priv->dests[priv->current_dest].name;
-
-  if (printer_name && printer_delete (printer_name))
-    actualize_printers_list (self);
-}
-
-static void
-printer_name_edit_cb (GtkWidget *entry,
-                      gpointer   user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-  const gchar             *new_name;
-  gchar                   *old_name = NULL;
-  gint                     i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  new_name = cc_editable_entry_get_text (CC_EDITABLE_ENTRY (entry));
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    old_name = priv->dests[priv->current_dest].name;
-
-  if (printer_rename (old_name, new_name))
-    {
-      free_dests (self);
-      priv->num_dests = cupsGetDests (&priv->dests);
-      priv->dest_model_names = g_new0 (gchar *, priv->num_dests);
-      priv->ppd_file_names = g_new0 (gchar *, priv->num_dests);
-
-      for (i = 0; i < priv->num_dests; i++)
-        if (g_strcmp0 (priv->dests[i].name, new_name) == 0)
-          {
-            priv->current_dest  = i;
-            break;
-          }
-    }
-
-  actualize_printers_list (self);
-}
-
-static void
-printer_location_edit_cb (GtkWidget *entry,
-                          gpointer   user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-  const gchar             *location;
-  gchar                   *printer_name = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  location = cc_editable_entry_get_text (CC_EDITABLE_ENTRY (entry));
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    printer_name = priv->dests[priv->current_dest].name;
-
-  if (printer_name && location &&
-      printer_set_location (printer_name, location))
-    actualize_printers_list (self);
-}
-
-static void
-set_ppd_cb (gchar    *printer_name,
-            gboolean  success,
-            gpointer  user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GList                  *iter;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  for (iter = priv->driver_change_list; iter; iter = iter->next)
-    {
-      SetPPDItem *item = (SetPPDItem *) iter->data;
-
-      if (g_strcmp0 (item->printer_name, printer_name) == 0)
-        {
-          priv->driver_change_list = g_list_remove_link (priv->driver_change_list, iter);
-
-          g_object_unref (item->cancellable);
-          g_free (item->printer_name);
-          g_free (item);
-          g_list_free (iter);
-          break;
-        }
-    }
-
-  update_sensitivity (self);
-
-  if (success)
-    {
-      actualize_printers_list (self);
-    }
-
-  g_free (printer_name);
-}
-
-static void
-select_ppd_manually (GtkMenuItem *menuitem,
-                     gpointer     user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkFileFilter          *filter;
-  GtkWidget              *dialog;
-  gchar                  *printer_name = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  gtk_menu_shell_cancel (GTK_MENU_SHELL (priv->popup_menu));
-
-  dialog = gtk_file_chooser_dialog_new (_("Select PPD File"),
-                                        NULL,
-                                        GTK_FILE_CHOOSER_ACTION_OPEN,
-                                        _("_Cancel"), GTK_RESPONSE_CANCEL,
-                                        _("_Open"), GTK_RESPONSE_ACCEPT,
-                                        NULL);
-
-  filter = gtk_file_filter_new ();
-  gtk_file_filter_set_name (filter,
-    _("PostScript Printer Description files (*.ppd, *.PPD, *.ppd.gz, *.PPD.gz, *.PPD.GZ)"));
-  gtk_file_filter_add_pattern (filter, "*.ppd");
-  gtk_file_filter_add_pattern (filter, "*.PPD");
-  gtk_file_filter_add_pattern (filter, "*.ppd.gz");
-  gtk_file_filter_add_pattern (filter, "*.PPD.gz");
-  gtk_file_filter_add_pattern (filter, "*.PPD.GZ");
-
-  gtk_file_chooser_set_filter (GTK_FILE_CHOOSER (dialog), filter);
-
-  if (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_ACCEPT)
-    {
-      gchar *ppd_filename;
-
-      ppd_filename = gtk_file_chooser_get_filename (GTK_FILE_CHOOSER (dialog));
-
-      if (priv->current_dest >= 0 &&
-          priv->current_dest < priv->num_dests &&
-          priv->dests != NULL)
-        printer_name = priv->dests[priv->current_dest].name;
-
-      if (printer_name && ppd_filename)
-        {
-          SetPPDItem *item;
-
-          item = g_new0 (SetPPDItem, 1);
-          item->printer_name = g_strdup (printer_name);
-          item->cancellable = g_cancellable_new ();
-
-          priv->driver_change_list =
-            g_list_prepend (priv->driver_change_list, item);
-          update_sensitivity (self);
-          printer_set_ppd_file_async (printer_name,
-                                      ppd_filename,
-                                      item->cancellable,
-                                      set_ppd_cb,
-                                      user_data);
-        }
-
-      g_free (ppd_filename);
-    }
-
-  gtk_widget_destroy (dialog);
-}
-
-static void
-ppd_selection_dialog_response_cb (GtkDialog *dialog,
-                                  gint       response_id,
-                                  gpointer   user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  gchar                  *printer_name = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (response_id == GTK_RESPONSE_OK)
-    {
-      gchar *ppd_name;
-
-      ppd_name = pp_ppd_selection_dialog_get_ppd_name (priv->pp_ppd_selection_dialog);
-
-      if (priv->current_dest >= 0 &&
-          priv->current_dest < priv->num_dests &&
-          priv->dests != NULL)
-        printer_name = priv->dests[priv->current_dest].name;
-
-      if (printer_name && ppd_name)
-        {
-          SetPPDItem *item;
-
-          item = g_new0 (SetPPDItem, 1);
-          item->printer_name = g_strdup (printer_name);
-          item->cancellable = g_cancellable_new ();
-
-          priv->driver_change_list = g_list_prepend (priv->driver_change_list,
-                                                     item);
-          update_sensitivity (self);
-          printer_set_ppd_async (printer_name,
-                                 ppd_name,
-                                 item->cancellable,
-                                 set_ppd_cb,
-                                 user_data);
-        }
-
-      g_free (ppd_name);
-    }
-
-  pp_ppd_selection_dialog_free (priv->pp_ppd_selection_dialog);
-  priv->pp_ppd_selection_dialog = NULL;
-}
-
-static void
-select_ppd_in_dialog (GtkMenuItem *menuitem,
-                      gpointer     user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkWidget              *widget;
-  gchar                  *device_id = NULL;
-  gchar                  *manufacturer = NULL;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "main-vbox");
-
-  if (!priv->pp_ppd_selection_dialog)
-    {
-      if (priv->current_dest >= 0 &&
-          priv->current_dest < priv->num_dests)
-        {
-          device_id =
-            get_ppd_attribute (priv->ppd_file_names[priv->current_dest],
-                               "1284DeviceID");
-
-          if (device_id)
-            {
-              manufacturer = get_tag_value (device_id, "mfg");
-              if (!manufacturer)
-                manufacturer = get_tag_value (device_id, "manufacturer");
-            }
-
-          if (manufacturer == NULL)
-            {
-              manufacturer =
-                get_ppd_attribute (priv->ppd_file_names[priv->current_dest],
-                                   "Manufacturer");
-            }
-
-          if (manufacturer == NULL)
-            {
-              manufacturer = g_strdup ("Raw");
-            }
-        }
-
-      priv->pp_ppd_selection_dialog = pp_ppd_selection_dialog_new (
-        GTK_WINDOW (gtk_widget_get_toplevel (widget)),
-        priv->all_ppds_list,
-        manufacturer,
-        ppd_selection_dialog_response_cb,
-        self);
-
-      g_free (manufacturer);
-      g_free (device_id);
-    }
-}
-
-static void
-set_ppd_from_list (GtkMenuItem *menuitem,
-                   gpointer     user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  gchar                  *printer_name = NULL;
-  gchar                  *ppd_name;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  ppd_name = (gchar *) g_object_get_data (G_OBJECT (menuitem), "ppd-name");
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    printer_name = priv->dests[priv->current_dest].name;
-
-  if (printer_name && ppd_name)
-    {
-      SetPPDItem *item;
-
-      item = g_new0 (SetPPDItem, 1);
-      item->printer_name = g_strdup (printer_name);
-      item->cancellable = g_cancellable_new ();
-
-      priv->driver_change_list = g_list_prepend (priv->driver_change_list,
-                                                 item);
-      update_sensitivity (self);
-      printer_set_ppd_async (printer_name,
-                             ppd_name,
-                             item->cancellable,
-                             set_ppd_cb,
-                             user_data);
-    }
-}
-
-static void
-ppd_names_free (gpointer user_data)
-{
-  PPDName **names = (PPDName **) user_data;
-  gint      i;
-
-  if (names)
-    {
-      for (i = 0; names[i]; i++)
-        {
-          g_free (names[i]->ppd_name);
-          g_free (names[i]->ppd_display_name);
-          g_free (names[i]);
-        }
-
-      g_free (names);
-    }
-}
-
-static void
-get_ppd_names_cb (PPDName     **names,
-                  const gchar  *printer_name,
-                  gboolean      cancelled,
-                  gpointer      user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-  GtkWidget               *informal = NULL;
-  GtkWidget               *placeholders[3];
-  GtkWidget               *spinner;
-  gpointer                 value = NULL;
-  gboolean                 found = FALSE;
-  PPDName                **hash_names = NULL;
-  GList                   *children, *iter;
-  gint                     i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  priv->getting_ppd_names = FALSE;
-
-  for (i = 0; i < 3; i++)
-    placeholders[i] = NULL;
-
-  children = gtk_container_get_children (GTK_CONTAINER (priv->popup_menu));
-  if (children)
-    {
-      for (iter = children; iter; iter = iter->next)
-        {
-          if (g_strcmp0 ((gchar *) g_object_get_data (G_OBJECT (iter->data), "purpose"),
-                         "informal") == 0)
-              informal = GTK_WIDGET (iter->data);
-          else if (g_strcmp0 ((gchar *) g_object_get_data (G_OBJECT (iter->data), "purpose"),
-                              "placeholder1") == 0)
-              placeholders[0] = GTK_WIDGET (iter->data);
-          else if (g_strcmp0 ((gchar *) g_object_get_data (G_OBJECT (iter->data), "purpose"),
-                              "placeholder2") == 0)
-              placeholders[1] = GTK_WIDGET (iter->data);
-          else if (g_strcmp0 ((gchar *) g_object_get_data (G_OBJECT (iter->data), "purpose"),
-                              "placeholder3") == 0)
-              placeholders[2] = GTK_WIDGET (iter->data);
-        }
-
-      g_list_free (children);
-    }
-
-  if (!priv->preferred_drivers)
-    {
-      priv->preferred_drivers = g_hash_table_new_full (g_str_hash, g_str_equal,
-                                                       g_free, ppd_names_free);
-    }
-
-  if (!cancelled &&
-      !g_hash_table_lookup_extended (priv->preferred_drivers,
-                                     printer_name, NULL, NULL))
-    g_hash_table_insert (priv->preferred_drivers, g_strdup (printer_name), names);
-
-  if (priv->preferred_drivers &&
-      g_hash_table_lookup_extended (priv->preferred_drivers,
-                                    printer_name, NULL, &value))
-    {
-      hash_names = (PPDName **) value;
-      if (hash_names)
-        {
-          for (i = 0; hash_names[i]; i++)
-            {
-              if (placeholders[i])
-                {
-                  gtk_menu_item_set_label (GTK_MENU_ITEM (placeholders[i]),
-                                           hash_names[i]->ppd_display_name);
-                  g_object_set_data_full (G_OBJECT (placeholders[i]),
-                                          "ppd-name",
-                                          g_strdup (hash_names[i]->ppd_name),
-                                              g_free);
-                  g_signal_connect (placeholders[i],
-                                    "activate",
-                                    G_CALLBACK (set_ppd_from_list),
-                                    self);
-                  gtk_widget_set_sensitive (GTK_WIDGET (placeholders[i]), TRUE);
-                  gtk_widget_show (placeholders[i]);
-                }
-            }
-
-          found = TRUE;
-        }
-      else
-        {
-          found = FALSE;
-        }
-    }
-
-  if (informal)
-    {
-      gtk_image_menu_item_set_always_show_image (GTK_IMAGE_MENU_ITEM (informal), FALSE);
-
-      spinner = gtk_image_menu_item_get_image (GTK_IMAGE_MENU_ITEM (informal));
-      if (spinner)
-        gtk_spinner_stop (GTK_SPINNER (spinner));
-
-      if (found)
-        gtk_widget_hide (informal);
-      else
-        gtk_menu_item_set_label (GTK_MENU_ITEM (informal), _("No suitable driver found"));
-    }
-
-  gtk_widget_show_all (priv->popup_menu);
-
-  update_sensitivity (self);
-}
-
-static void
-popup_menu_done (GtkMenuShell *menushell,
-                 gpointer      user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->get_ppd_name_cancellable)
-    {
-      g_cancellable_cancel (priv->get_ppd_name_cancellable);
-      g_object_unref (priv->get_ppd_name_cancellable);
-      priv->get_ppd_name_cancellable = NULL;
-    }
-}
-
-static void
-popup_model_menu_cb (GtkButton *button,
-                     gpointer   user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkWidget              *spinner;
-  GtkWidget              *item;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  priv->popup_menu = gtk_menu_new ();
-  g_signal_connect (priv->popup_menu,
-                    "selection-done",
-                    G_CALLBACK (popup_menu_done),
-                    user_data);
-
-  /*
-   * These placeholders are a workaround for a situation
-   * when we want to actually append new menu item in a callback.
-   * But unfortunately it is not possible to connect to "activate"
-   * signal of such menu item (appended after gtk_menu_popup()).
-   */
-  item = gtk_image_menu_item_new_with_label ("");
-  g_object_set_data_full (G_OBJECT (item), "purpose",
-                          g_strdup ("placeholder1"), g_free);
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-  gtk_widget_set_no_show_all (item, TRUE);
-  gtk_widget_hide (item);
-
-  item = gtk_image_menu_item_new_with_label ("");
-  g_object_set_data_full (G_OBJECT (item), "purpose",
-                          g_strdup ("placeholder2"), g_free);
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-  gtk_widget_set_no_show_all (item, TRUE);
-  gtk_widget_hide (item);
-
-  item = gtk_image_menu_item_new_with_label ("");
-  g_object_set_data_full (G_OBJECT (item), "purpose",
-                          g_strdup ("placeholder3"), g_free);
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-  gtk_widget_set_no_show_all (item, TRUE);
-  gtk_widget_hide (item);
-
-  item = gtk_image_menu_item_new_with_label (_("Searching for preferred drivers..."));
-  spinner = gtk_spinner_new ();
-  gtk_spinner_start (GTK_SPINNER (spinner));
-  gtk_image_menu_item_set_image (GTK_IMAGE_MENU_ITEM (item), spinner);
-  gtk_image_menu_item_set_always_show_image (GTK_IMAGE_MENU_ITEM (item), TRUE);
-  g_object_set_data_full (G_OBJECT (item), "purpose",
-                          g_strdup ("informal"), g_free);
-  gtk_widget_set_sensitive (item, FALSE);
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-  gtk_widget_set_no_show_all (item, TRUE);
-  gtk_widget_show (item);
-
-  item = gtk_separator_menu_item_new ();
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-
-  item = gtk_menu_item_new_with_label (_("Select from database..."));
-  g_object_set_data_full (G_OBJECT (item), "purpose",
-                          g_strdup ("ppd-select"), g_free);
-  g_signal_connect (item, "activate", G_CALLBACK (select_ppd_in_dialog), self);
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-
-  item = gtk_separator_menu_item_new ();
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-
-  item = gtk_menu_item_new_with_label (_("Provide PPD File..."));
-  g_object_set_data_full (G_OBJECT (item), "purpose",
-                          g_strdup ("ppdfile-select"), g_free);
-  g_signal_connect (item, "activate", G_CALLBACK (select_ppd_manually), self);
-  gtk_menu_shell_append (GTK_MENU_SHELL (priv->popup_menu), item);
-
-  gtk_widget_show_all (priv->popup_menu);
-
-  gtk_menu_popup (GTK_MENU (priv->popup_menu),
-                  NULL, NULL, NULL, NULL, 0,
-                  gtk_get_current_event_time());
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      if (priv->preferred_drivers &&
-          g_hash_table_lookup_extended (priv->preferred_drivers,
-                                        priv->dests[priv->current_dest].name,
-                                        NULL, NULL))
-        {
-          get_ppd_names_cb (NULL,
-                            priv->dests[priv->current_dest].name,
-                            FALSE,
-                            user_data);
-        }
-      else
-        {
-          priv->get_ppd_name_cancellable = g_cancellable_new ();
-          priv->getting_ppd_names = TRUE;
-          get_ppd_names_async (priv->dests[priv->current_dest].name,
-                               3,
-                               priv->get_ppd_name_cancellable,
-                               get_ppd_names_cb,
-                               user_data);
-
-          update_sensitivity (self);
-        }
-    }
-}
-
-static void
-pp_maintenance_command_execute_cb (GObject      *source_object,
-                                   GAsyncResult *res,
-                                   gpointer      user_data)
-{
-  PpMaintenanceCommand *command = (PpMaintenanceCommand *) source_object;
-  GError               *error = NULL;
-
-  pp_maintenance_command_execute_finish (command, res, &error);
-
-  g_object_unref (command);
-}
-
-static void
-test_page_cb (GtkButton *button,
-              gpointer   user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-  cups_ptype_t             type = 0;
-  const gchar             *printer_type = NULL;
-  gchar                   *printer_name = NULL;
-  gint                     i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      printer_name = priv->dests[priv->current_dest].name;
-      printer_type = cupsGetOption ("printer-type",
-                                    priv->dests[priv->current_dest].num_options,
-                                    priv->dests[priv->current_dest].options);
-      if (printer_type)
-        type = atoi (printer_type);
-    }
-
-  if (printer_name)
-    {
-      const gchar  *const dirs[] = { "/usr/share/cups",
-                                     "/usr/local/share/cups",
-                                     NULL };
-      const gchar  *testprint[] = { "%s/data/testprint",
-                                    "%s/data/testprint.ps",
-                                    NULL };
-      const gchar **pattern;
-      const gchar  *datadir = NULL;
-      http_t       *http = NULL;
-      gchar        *printer_uri = NULL;
-      gchar        *filename = NULL;
-      gchar        *resource = NULL;
-      ipp_t        *response = NULL;
-      ipp_t        *request;
-
-      if ((datadir = getenv ("CUPS_DATADIR")) != NULL)
-        {
-          for (pattern = testprint; *pattern != NULL; pattern++)
-            {
-              filename = g_strdup_printf (*pattern, datadir);
-              if (g_access (filename, R_OK) == 0)
-                break;
-              else
-                {
-                  g_free (filename);
-                  filename = NULL;
-                }
-            }
-        }
-      else
-        {
-          for (i = 0; (datadir = dirs[i]) != NULL && filename == NULL; i++)
-            {
-              for (pattern = testprint; *pattern != NULL; pattern++)
-                {
-                  filename = g_strdup_printf (*pattern, datadir);
-                  if (g_access (filename, R_OK) == 0)
-                    break;
-                  else
-                    {
-                      g_free (filename);
-                      filename = NULL;
-                    }
-                }
-            }
-        }
-
-      if (filename)
-        {
-          if (type & CUPS_PRINTER_CLASS)
-            {
-              printer_uri = g_strdup_printf ("ipp://localhost/classes/%s", printer_name);
-              resource = g_strdup_printf ("/classes/%s", printer_name);
-            }
-          else
-            {
-              printer_uri = g_strdup_printf ("ipp://localhost/printers/%s", printer_name);
-              resource = g_strdup_printf ("/printers/%s", printer_name);
-            }
-
-          http = httpConnectEncrypt (cupsServer (), ippPort (), cupsEncryption ());
-          if (http)
-            {
-              request = ippNewRequest (IPP_PRINT_JOB);
-              ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                            "printer-uri", NULL, printer_uri);
-              ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-                            "requesting-user-name", NULL, cupsUser ());
-              ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-              /* Translators: Name of job which makes printer to print test page */
-                            "job-name", NULL, _("Test page"));
-              response = cupsDoFileRequest (http, request, resource, filename);
-              httpClose (http);
-            }
-
-          if (response)
-            {
-              if (ippGetState (response) == IPP_ERROR)
-                g_warning ("An error has occured during printing of test page.");
-              ippDelete (response);
-            }
-
-          g_free (filename);
-          g_free (printer_uri);
-          g_free (resource);
-        }
-      else
-        {
-          PpMaintenanceCommand *command;
-
-          command = pp_maintenance_command_new (printer_name,
-                                                "PrintSelfTestPage",
-          /* Translators: Name of job which makes printer to print test page */
-                                                _("Test page"));
-
-          pp_maintenance_command_execute_async (command, NULL, pp_maintenance_command_execute_cb, self);
-        }
-    }
-}
-
-static void
-update_sensitivity (gpointer user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  GtkTreeSelection        *selection;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-  cups_ptype_t             type = 0;
-  GtkTreeModel            *model;
-  GtkTreeView             *treeview;
-  GtkTreeIter              tree_iter;
-  const char              *cups_server = NULL;
-  GtkWidget               *widget;
-  gboolean                 is_authorized;
-  gboolean                 is_discovered = FALSE;
-  gboolean                 is_class = FALSE;
-  gboolean                 is_changing_driver = FALSE;
-  gboolean                 printer_selected;
-  gboolean                 local_server = TRUE;
-  gboolean                 no_cups = FALSE;
-  gboolean                 is_new = FALSE;
-  gboolean                 already_present_local;
-  GList                   *iter;
-  gchar                   *current_printer_name = NULL;
-  gint                     i;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  is_authorized =
-    priv->permission &&
-    g_permission_get_allowed (G_PERMISSION (priv->permission)) &&
-    priv->lockdown_settings &&
-    !g_settings_get_boolean (priv->lockdown_settings, "disable-print-setup");
-
-  printer_selected = priv->current_dest >= 0 &&
-                     priv->current_dest < priv->num_dests &&
-                     priv->dests != NULL;
-
-  if (printer_selected)
-    {
-      for (i = 0; i < priv->dests[priv->current_dest].num_options; i++)
-        {
-          if (g_strcmp0 (priv->dests[priv->current_dest].options[i].name, "printer-type") == 0)
-            {
-              type = atoi (priv->dests[priv->current_dest].options[i].value);
-              is_discovered = type & CUPS_PRINTER_DISCOVERED;
-              is_class = type & CUPS_PRINTER_CLASS;
-              break;
-            }
-        }
-
-      for (iter = priv->driver_change_list; iter; iter = iter->next)
-        {
-          SetPPDItem *item = (SetPPDItem *) iter->data;
-
-          if (g_strcmp0 (item->printer_name, priv->dests[priv->current_dest].name) == 0)
-            {
-              is_changing_driver = TRUE;
-            }
-        }
-    }
-
-  treeview = (GtkTreeView*)
-    gtk_builder_get_object (priv->builder, "printers-treeview");
-
-  selection = gtk_tree_view_get_selection (treeview);
-  if (selection &&
-      gtk_tree_selection_get_selected (selection, &model, &tree_iter))
-    {
-      gtk_tree_model_get (model, &tree_iter,
-                          PRINTER_NAME_COLUMN, &current_printer_name,
-                          -1);
-    }
-
-  if (priv->new_printer_name &&
-      g_strcmp0 (priv->new_printer_name, current_printer_name) == 0)
-    {
-      printer_selected = TRUE;
-      is_discovered = FALSE;
-      is_class = FALSE;
-      is_new = TRUE;
-    }
-
-  g_free (current_printer_name);
-
-  cups_server = cupsServer ();
-  if (cups_server &&
-      g_ascii_strncasecmp (cups_server, "localhost", 9) != 0 &&
-      g_ascii_strncasecmp (cups_server, "127.0.0.1", 9) != 0 &&
-      g_ascii_strncasecmp (cups_server, "::1", 3) != 0 &&
-      cups_server[0] != '/')
-    local_server = FALSE;
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "notebook");
-  if (gtk_notebook_get_current_page (GTK_NOTEBOOK (widget)) == NOTEBOOK_NO_CUPS_PAGE)
-    no_cups = TRUE;
-
-  already_present_local = local_server && !is_discovered && is_authorized && !is_new;
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-add-button");
-  gtk_widget_set_sensitive (widget, local_server && is_authorized && !no_cups && !priv->new_printer_name);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-add-button2");
-  gtk_widget_set_sensitive (widget, local_server && is_authorized && !no_cups && !priv->new_printer_name);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-remove-button");
-  gtk_widget_set_sensitive (widget, already_present_local && printer_selected && !no_cups);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-disable-switch");
-  gtk_widget_set_sensitive (widget, already_present_local);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-default-check-button");
-  gtk_widget_set_sensitive (widget, is_authorized && !is_new);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "print-test-page-button");
-  gtk_widget_set_sensitive (widget, printer_selected && !is_new);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-options-button");
-  gtk_widget_set_sensitive (widget, printer_selected && local_server && !is_discovered &&
-                            !priv->pp_options_dialog && !is_new);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-jobs-button");
-  gtk_widget_set_sensitive (widget, printer_selected && !is_new);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-icon");
-  gtk_widget_set_sensitive (widget, printer_selected);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-name-label");
-  cc_editable_entry_set_editable (CC_EDITABLE_ENTRY (widget), already_present_local);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-location-label");
-  cc_editable_entry_set_editable (CC_EDITABLE_ENTRY (widget), already_present_local);
-
-  widget = (GtkWidget*) gtk_builder_get_object (priv->builder, "printer-model-notebook");
-  if (is_changing_driver)
-    {
-      gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 2);
-    }
-  else
-    {
-      if (already_present_local && !is_class && !priv->getting_ppd_names)
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 0);
-      else
-        gtk_notebook_set_current_page (GTK_NOTEBOOK (widget), 1);
-    }
-}
-
-static void
-on_permission_changed (GPermission *permission,
-                       GParamSpec  *pspec,
-                       gpointer     data)
-{
-  update_sensitivity (data);
-}
-
-static void
-on_lockdown_settings_changed (GSettings  *settings,
-                              const char *key,
-                              gpointer    user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-
-  if (g_str_equal (key, "disable-print-setup") == FALSE)
-    return;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-#if 0
-  /* FIXME */
-  gtk_widget_set_sensitive (priv->lock_button,
-    !g_settings_get_boolean (priv->lockdown_settings, "disable-print-setup"));
-#endif
-
-  on_permission_changed (priv->permission, NULL, user_data);
-}
-
-static void
-printer_options_response_cb (GtkDialog *dialog,
-                             gint       response_id,
-                             gpointer   user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  pp_options_dialog_free (priv->pp_options_dialog);
-  priv->pp_options_dialog = NULL;
-  update_sensitivity (self);
-
-  if (response_id == GTK_RESPONSE_OK)
-    actualize_printers_list (self);
-}
-
-static void
-printer_options_cb (GtkToolButton *toolbutton,
-                    gpointer       user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkWidget              *widget;
-  gboolean                is_authorized;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "main-vbox");
-
-  is_authorized =
-    priv->permission &&
-    g_permission_get_allowed (G_PERMISSION (priv->permission)) &&
-    priv->lockdown_settings &&
-    !g_settings_get_boolean (priv->lockdown_settings, "disable-print-setup");
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    {
-      priv->pp_options_dialog = pp_options_dialog_new (
-        GTK_WINDOW (gtk_widget_get_toplevel (widget)),
-        printer_options_response_cb,
-        self,
-        priv->dests[priv->current_dest].name,
-        is_authorized);
-      update_sensitivity (self);
-    }
-}
-
-static gboolean
-cups_status_check (gpointer user_data)
-{
-  CcPrintersPanelPrivate  *priv;
-  CcPrintersPanel         *self = (CcPrintersPanel*) user_data;
-  gboolean                 result = TRUE;
-  http_t                  *http;
-
-  priv = self->priv = PRINTERS_PANEL_PRIVATE (self);
-
-  http = httpConnectEncrypt (cupsServer (), ippPort (), cupsEncryption ());
-  if (http)
-    {
-      httpClose (http);
-      actualize_printers_list (self);
-      attach_to_cups_notifier (self);
-      priv->cups_status_check_id = 0;
-      result = FALSE;
-    }
-
-  return result;
-}
-
-static void
-get_all_ppds_async_cb (PPDList  *ppds,
-                       gpointer  user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-
-  priv = self->priv = PRINTERS_PANEL_PRIVATE (self);
-
-  priv->all_ppds_list = ppds;
-
-  if (priv->pp_ppd_selection_dialog)
-    pp_ppd_selection_dialog_set_ppd_list (priv->pp_ppd_selection_dialog,
-                                          priv->all_ppds_list);
-
-  g_object_unref (priv->get_all_ppds_cancellable);
-  priv->get_all_ppds_cancellable = NULL;
-}
-
-static void
-update_label_padding (GtkWidget     *widget,
-                      GtkAllocation *allocation,
-                      gpointer       user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkAllocation           allocation1, allocation2;
-  GtkWidget              *label;
-  GtkWidget              *sublabel;
-  gint                    offset;
-  gint                    pad;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  sublabel = gtk_bin_get_child (GTK_BIN (widget));
-  if (sublabel)
-    {
-      gtk_widget_get_allocation (widget, &allocation1);
-      gtk_widget_get_allocation (sublabel, &allocation2);
-
-      offset = allocation2.x - allocation1.x;
-
-      label = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "printer-model-label");
-
-      gtk_misc_get_padding  (GTK_MISC (label), &pad, NULL);
-      if (offset != pad)
-        gtk_misc_set_padding (GTK_MISC (label), offset, 0);
-    }
-}
-
-static void
-jobs_dialog_response_cb (GtkDialog *dialog,
-                         gint       response_id,
-                         gpointer   user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  pp_jobs_dialog_free (priv->pp_jobs_dialog);
-  priv->pp_jobs_dialog = NULL;
-}
-
-static void
-printer_jobs_cb (GtkToolButton *toolbutton,
-                 gpointer       user_data)
-{
-  CcPrintersPanelPrivate *priv;
-  CcPrintersPanel        *self = (CcPrintersPanel*) user_data;
-  GtkWidget              *widget;
-
-  priv = PRINTERS_PANEL_PRIVATE (self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "main-vbox");
-
-  if (priv->current_dest >= 0 &&
-      priv->current_dest < priv->num_dests &&
-      priv->dests != NULL)
-    priv->pp_jobs_dialog = pp_jobs_dialog_new (
-      GTK_WINDOW (gtk_widget_get_toplevel (widget)),
-      jobs_dialog_response_cb,
-      self,
-      priv->dests[priv->current_dest].name);
-}
-
-static void
-cc_printers_panel_init (CcPrintersPanel *self)
-{
-  CcPrintersPanelPrivate *priv;
-  GtkWidget              *top_widget;
-  GtkWidget              *widget;
-  GError                 *error = NULL;
-  http_t                 *http;
-  gchar                  *objects[] = { "main-vbox", NULL };
-  GtkStyleContext        *context;
-  guint                   builder_result;
-
-  priv = self->priv = PRINTERS_PANEL_PRIVATE (self);
-
-  /* initialize main data structure */
-  priv->builder = gtk_builder_new ();
-  priv->dests = NULL;
-  priv->dest_model_names = NULL;
-  priv->ppd_file_names = NULL;
-  priv->num_dests = 0;
-  priv->current_dest = -1;
-
-  priv->num_jobs = 0;
-
-  priv->pp_new_printer_dialog = NULL;
-  priv->pp_options_dialog = NULL;
-
-  priv->subscription_id = 0;
-  priv->cups_status_check_id = 0;
-  priv->subscription_renewal_id = 0;
-  priv->cups_proxy = NULL;
-  priv->cups_bus_connection = NULL;
-  priv->dbus_subscription_id = 0;
-
-  priv->new_printer_name = NULL;
-  priv->new_printer_location = NULL;
-  priv->new_printer_make_and_model = NULL;
-  priv->new_printer_on_network = FALSE;
-  priv->select_new_printer = FALSE;
-
-  priv->permission = NULL;
-  priv->lockdown_settings = NULL;
-
-  priv->getting_ppd_names = FALSE;
-
-  priv->all_ppds_list = NULL;
-  priv->get_all_ppds_cancellable = NULL;
-
-  priv->preferred_drivers = NULL;
-
-  builder_result = gtk_builder_add_objects_from_file (priv->builder,
-                                                      DATADIR"/printers.ui",
-                                                      objects, &error);
-
-  if (builder_result == 0)
-    {
-      /* Translators: The XML file containing user interface can not be loaded */
-      g_warning (_("Could not load ui: %s"), error->message);
-      g_error_free (error);
-      return;
-    }
-
-  /* add the top level widget */
-  top_widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "main-vbox");
-
-  /* connect signals */
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-add-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (printer_add_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-add-button2");
-  g_signal_connect (widget, "clicked", G_CALLBACK (printer_add_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-remove-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (printer_remove_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-disable-switch");
-  g_signal_connect (widget, "notify::active", G_CALLBACK (printer_disable_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "supply-drawing-area");
-  g_signal_connect (widget, "draw", G_CALLBACK (supply_levels_draw_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-default-check-button");
-  g_signal_connect (widget, "toggled", G_CALLBACK (printer_set_default_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "print-test-page-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (test_page_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-jobs-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (printer_jobs_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-options-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (printer_options_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-name-label");
-  g_signal_connect (widget, "editing-done", G_CALLBACK (printer_name_edit_cb), self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-location-label");
-  g_signal_connect (widget, "editing-done", G_CALLBACK (printer_location_edit_cb), self);
-
-  priv->lockdown_settings = g_settings_new ("org.gnome.desktop.lockdown");
-  if (priv->lockdown_settings)
-    g_signal_connect (priv->lockdown_settings,
-                      "changed",
-                      G_CALLBACK (on_lockdown_settings_changed),
-                      self);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-model-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (popup_model_menu_cb), self);
-  g_signal_connect (widget, "size-allocate", G_CALLBACK (update_label_padding), self);
-
-
-  /* Set junctions */
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printers-scrolledwindow");
-  context = gtk_widget_get_style_context (widget);
-  gtk_style_context_set_junction_sides (context, GTK_JUNCTION_BOTTOM);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printers-toolbar");
-  context = gtk_widget_get_style_context (widget);
-  gtk_style_context_set_junction_sides (context, GTK_JUNCTION_TOP);
-
-
-  /* Make model label and ip-address label selectable */
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "printer-ip-address-label");
-  cc_editable_entry_set_selectable (CC_EDITABLE_ENTRY (widget), TRUE);
-
-
-  /* Add unlock button */
-  priv->permission = (GPermission *)polkit_permission_new_sync (
-    "org.opensuse.cupspkhelper.mechanism.all-edit", NULL, NULL, NULL);
-  if (priv->permission != NULL)
-    {
-      g_signal_connect (priv->permission, "notify",
-                        G_CALLBACK (on_permission_changed), self);
-      on_permission_changed (priv->permission, NULL, self);
-    }
-  else
-    g_warning ("Your system does not have the cups-pk-helper's policy \
-\"org.opensuse.cupspkhelper.mechanism.all-edit\" installed. \
-Please check your installation");
-
-  gtk_style_context_get_background_color (gtk_widget_get_style_context (top_widget),
-                                          GTK_STATE_FLAG_NORMAL,
-                                          &priv->background_color);
-
-  populate_printers_list (self);
-  attach_to_cups_notifier (self);
-
-  priv->get_all_ppds_cancellable = g_cancellable_new ();
-  get_all_ppds_async (priv->get_all_ppds_cancellable,
-                      get_all_ppds_async_cb,
-                      self);
-
-  http = httpConnectEncrypt (cupsServer (), ippPort (), cupsEncryption ());
-  if (!http)
-    {
-      priv->cups_status_check_id =
-        g_timeout_add_seconds (CUPS_STATUS_CHECK_INTERVAL, cups_status_check, self);
-    }
-  else
-    httpClose (http);
-
-  gtk_container_add (GTK_CONTAINER (self), top_widget);
-  gtk_widget_show_all (GTK_WIDGET (self));
-}
-
-void
-cc_printers_panel_register (GIOModule *module)
-{
-  cc_printers_panel_register_type (G_TYPE_MODULE (module));
-  g_io_extension_point_implement (CC_SHELL_PANEL_EXTENSION_POINT,
-                                  CC_TYPE_PRINTERS_PANEL,
-                                  "printers", 0);
-}
-
diff --git a/panels/printers/cc-printers-panel.h b/panels/printers/cc-printers-panel.h
deleted file mode 100644
index c140234..0000000
--- a/panels/printers/cc-printers-panel.h
+++ /dev/null
@@ -1,72 +0,0 @@
-/*
- * Copyright (C) 2010 Red Hat, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-
-#ifndef _CC_PRINTERS_PANEL_H
-#define _CC_PRINTERS_PANEL_H
-
-#include <shell/cc-panel.h>
-
-G_BEGIN_DECLS
-
-#define CC_TYPE_PRINTERS_PANEL cc_printers_panel_get_type()
-
-#define CC_PRINTERS_PANEL(obj) \
-  (G_TYPE_CHECK_INSTANCE_CAST ((obj), \
-  CC_TYPE_PRINTERS_PANEL, CcPrintersPanel))
-
-#define CC_PRINTERS_PANEL_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_CAST ((klass), \
-  CC_TYPE_PRINTERS_PANEL, CcPrintersPanelClass))
-
-#define CC_IS_PRINTERS_PANEL(obj) \
-  (G_TYPE_CHECK_INSTANCE_TYPE ((obj), \
-  CC_TYPE_PRINTERS_PANEL))
-
-#define CC_IS_PRINTERS_PANEL_CLASS(klass) \
-  (G_TYPE_CHECK_CLASS_TYPE ((klass), \
-  CC_TYPE_PRINTERS_PANEL))
-
-#define CC_PRINTERS_PANEL_GET_CLASS(obj) \
-  (G_TYPE_INSTANCE_GET_CLASS ((obj), \
-  CC_TYPE_PRINTERS_PANEL, CcPrintersPanelClass))
-
-typedef struct _CcPrintersPanel CcPrintersPanel;
-typedef struct _CcPrintersPanelClass CcPrintersPanelClass;
-typedef struct _CcPrintersPanelPrivate CcPrintersPanelPrivate;
-
-struct _CcPrintersPanel
-{
-  CcPanel parent;
-
-  CcPrintersPanelPrivate *priv;
-};
-
-struct _CcPrintersPanelClass
-{
-  CcPanelClass parent_class;
-};
-
-GType cc_printers_panel_get_type (void) G_GNUC_CONST;
-
-void  cc_printers_panel_register (GIOModule *module);
-
-G_END_DECLS
-
-#endif /* _CC_PRINTERS_PANEL_H */
diff --git a/panels/printers/jobs-dialog.ui b/panels/printers/jobs-dialog.ui
deleted file mode 100644
index d58be2c..0000000
--- a/panels/printers/jobs-dialog.ui
+++ /dev/null
@@ -1,183 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkDialog" id="jobs-dialog">
-    <property name="width_request">500</property>
-    <property name="height_request">350</property>
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes"> </property>
-    <property name="modal">True</property>
-    <property name="destroy_with_parent">True</property>
-    <property name="type_hint">dialog</property>
-    <property name="resizable">False</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="main-vbox">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">2</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action-area1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="jobs-close-button">
-                <property name="label" translatable="yes">Close</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkAlignment" id="content-alignment">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkBox" id="box1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="orientation">vertical</property>
-                <property name="spacing">10</property>
-                <child>
-                  <object class="GtkLabel" id="jobs-title">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label" translatable="yes" comments="Translators: This tab contains list of active print jobs of the selected printer">Active Jobs</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox" id="box2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkScrolledWindow" id="queue-scrolledwindow">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkTreeView" id="job-treeview">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <child internal-child="selection">
-                              <object class="GtkTreeSelection" id="treeview-selection"/>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkToolbar" id="queue-toolbar">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="icon_size">1</property>
-                        <child>
-                          <object class="GtkToolButton" id="job-release-button">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="sensitive">False</property>
-                            <property name="can_focus">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="label" translatable="yes">Resume Printing</property>
-                            <property name="use_underline">True</property>
-                            <property name="icon_name">media-playback-start-symbolic</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="homogeneous">True</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkToolButton" id="job-hold-button">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="sensitive">False</property>
-                            <property name="can_focus">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="label" translatable="yes">Pause Printing</property>
-                            <property name="use_underline">True</property>
-                            <property name="icon_name">media-playback-pause-symbolic</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="homogeneous">True</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkToolButton" id="job-cancel-button">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="sensitive">False</property>
-                            <property name="can_focus">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="label" translatable="yes">Cancel Print Job</property>
-                            <property name="use_underline">True</property>
-                            <property name="icon_name">media-playback-stop-symbolic</property>
-                          </object>
-                          <packing>
-                            <property name="expand">False</property>
-                            <property name="homogeneous">True</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="0">jobs-close-button</action-widget>
-    </action-widgets>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1"/>
-</interface>
diff --git a/panels/printers/new-printer-dialog.ui b/panels/printers/new-printer-dialog.ui
deleted file mode 100644
index 931fe0f..0000000
--- a/panels/printers/new-printer-dialog.ui
+++ /dev/null
@@ -1,230 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkDialog" id="dialog">
-    <property name="width_request">500</property>
-    <property name="height_request">350</property>
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="resizable">False</property>
-    <property name="modal">True</property>
-    <property name="title"></property>
-    <property name="destroy_with_parent">True</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="dialog-vbox1">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">10</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action-area1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkButton" id="new-printer-cancel-button">
-                <property name="label" translatable="yes">_Cancel</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="new-printer-add-button">
-                <property name="label" translatable="yes">_Add</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-                <property name="use_underline">True</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkAlignment" id="content-alignment">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkVBox" id="vbox1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">10</property>
-                <child>
-                  <object class="GtkLabel" id="label1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label" translatable="yes">Add a New Printer</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox" id="box2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="orientation">vertical</property>
-                    <child>
-                      <object class="GtkScrolledWindow" id="scrolledwindow1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkTreeView" id="devices-treeview">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="headers_visible">False</property>
-                            <child internal-child="selection">
-                              <object class="GtkTreeSelection" id="treeview-selection"/>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkToolbar" id="toolbar1">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="toolbar_style">icons</property>
-                        <property name="icon_size">1</property>
-                        <style>
-                          <class name="inline-toolbar"/>
-                        </style>
-                        <child>
-                          <object class="GtkToolItem" id="toolbutton1">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="use_action_appearance">False</property>
-                            <child>
-                              <object class="GtkBox" id="box1">
-                                <property name="visible">True</property>
-                                <property name="can_focus">False</property>
-                                <child>
-                                  <object class="GtkAlignment" id="alignment2">
-                                    <property name="width_request">24</property>
-                                    <property name="height_request">24</property>
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <child>
-                                      <placeholder/>
-                                    </child>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="padding">10</property>
-                                    <property name="position">0</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkSearchEntry" id="search-entry">
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">True</property>
-                                    <property name="has_tooltip">True</property>
-                                    <property name="invisible_char">●</property>
-                                    <property name="truncate_multiline">True</property>
-                                    <property name="invisible_char_set">True</property>
-                                    <property name="secondary_icon_tooltip_text" translatable="yes">Search for network printers or filter result</property>
-                                    <property name="secondary_icon_tooltip_markup" translatable="yes">Search for network printers or filter result</property>
-                                    <property name="placeholder_text">Enter address of a printer or a text to filter results</property>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">True</property>
-                                    <property name="fill">True</property>
-                                    <property name="position">1</property>
-                                  </packing>
-                                </child>
-                                <child>
-                                  <object class="GtkAlignment" id="alignment3">
-                                    <property name="width_request">24</property>
-                                    <property name="height_request">24</property>
-                                    <property name="visible">True</property>
-                                    <property name="can_focus">False</property>
-                                    <child>
-                                      <object class="GtkSpinner" id="spinner">
-                                        <property name="visible">True</property>
-                                        <property name="can_focus">False</property>
-                                        <property name="no_show_all">True</property>
-                                      </object>
-                                    </child>
-                                  </object>
-                                  <packing>
-                                    <property name="expand">False</property>
-                                    <property name="fill">True</property>
-                                    <property name="padding">10</property>
-                                    <property name="position">2</property>
-                                  </packing>
-                                </child>
-                              </object>
-                            </child>
-                          </object>
-                          <packing>
-                            <property name="expand">True</property>
-                            <property name="homogeneous">True</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="-6">new-printer-cancel-button</action-widget>
-      <action-widget response="-5">new-printer-add-button</action-widget>
-    </action-widgets>
-  </object>
-</interface>
diff --git a/panels/printers/options-dialog.ui b/panels/printers/options-dialog.ui
deleted file mode 100644
index f100335..0000000
--- a/panels/printers/options-dialog.ui
+++ /dev/null
@@ -1,182 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkDialog" id="options-dialog">
-    <property name="width_request">500</property>
-    <property name="height_request">400</property>
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes"> </property>
-    <property name="modal">True</property>
-    <property name="destroy_with_parent">True</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="main-vbox">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">10</property>
-        <child>
-          <object class="GtkAlignment" id="content-alignment">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkBox" id="box1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="orientation">vertical</property>
-                <property name="spacing">10</property>
-                <child>
-                  <object class="GtkLabel" id="options-title">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label" translatable="yes">Options</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkBox" id="box2">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <child>
-                      <object class="GtkScrolledWindow" id="scrolled-window1">
-                        <property name="width_request">120</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="hscrollbar_policy">never</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkTreeView" id="options-categories-treeview">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="headers_visible">False</property>
-                            <child internal-child="selection">
-                              <object class="GtkTreeSelection" id="treeview-selection1"/>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkNotebook" id="options-notebook">
-                        <property name="visible">True</property>
-                        <property name="can_focus">False</property>
-                        <property name="tab_pos">left</property>
-                        <property name="show_tabs">False</property>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="pack_type">end</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action-area1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkBox" id="box3">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <child>
-                  <object class="GtkAlignment" id="alignment1">
-                    <property name="width_request">24</property>
-                    <property name="height_request">24</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <child>
-                      <object class="GtkSpinner" id="options-spinner">
-                        <property name="can_focus">False</property>
-                        <property name="no_show_all">True</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="progress-label">
-                    <property name="can_focus">False</property>
-                    <property name="no_show_all">True</property>
-                    <property name="label" translatable="yes">Loading options...</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="padding">10</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-                <property name="secondary">True</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="options-close-button">
-                <property name="label" translatable="yes">Close</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">2</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="0">options-close-button</action-widget>
-    </action-widgets>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1"/>
-</interface>
diff --git a/panels/printers/pp-cups.c b/panels/printers/pp-cups.c
deleted file mode 100644
index 6ab6622..0000000
--- a/panels/printers/pp-cups.c
+++ /dev/null
@@ -1,125 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "pp-cups.h"
-
-G_DEFINE_TYPE (PpCups, pp_cups, G_TYPE_OBJECT);
-
-static void
-pp_cups_finalize (GObject *object)
-{
-  G_OBJECT_CLASS (pp_cups_parent_class)->finalize (object);
-}
-
-static void
-pp_cups_class_init (PpCupsClass *klass)
-{
-  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
-
-  gobject_class->finalize = pp_cups_finalize;
-}
-
-static void
-pp_cups_init (PpCups *cups)
-{
-}
-
-PpCups *
-pp_cups_new ()
-{
-  return g_object_new (PP_TYPE_CUPS, NULL);
-}
-
-typedef struct
-{
-  PpCupsDests *dests;
-} CGDData;
-
-static void
-_pp_cups_get_dests_thread (GSimpleAsyncResult *res,
-                           GObject            *object,
-                           GCancellable       *cancellable)
-{
-  CGDData *data;
-
-  data = g_simple_async_result_get_op_res_gpointer (res);
-
-  data->dests = g_new0 (PpCupsDests, 1);
-  data->dests->num_of_dests = cupsGetDests (&data->dests->dests);
-}
-
-static void
-cgd_data_free (CGDData *data)
-{
-  if (data)
-    {
-      if (data->dests)
-        {
-          cupsFreeDests (data->dests->num_of_dests, data->dests->dests);
-          g_free (data->dests);
-        }
-
-      g_free (data);
-    }
-}
-
-void
-pp_cups_get_dests_async (PpCups              *cups,
-                         GCancellable        *cancellable,
-                         GAsyncReadyCallback  callback,
-                         gpointer             user_data)
-{
-  GSimpleAsyncResult *res;
-  CGDData            *data;
-
-  res = g_simple_async_result_new (G_OBJECT (cups), callback, user_data, pp_cups_get_dests_async);
-  data = g_new0 (CGDData, 1);
-  data->dests = NULL;
-
-  g_simple_async_result_set_check_cancellable (res, cancellable);
-  g_simple_async_result_set_op_res_gpointer (res, data, (GDestroyNotify) cgd_data_free);
-  g_simple_async_result_run_in_thread (res, _pp_cups_get_dests_thread, 0, cancellable);
-
-  g_object_unref (res);
-}
-
-PpCupsDests *
-pp_cups_get_dests_finish (PpCups        *cups,
-                          GAsyncResult  *res,
-                          GError       **error)
-{
-  GSimpleAsyncResult *simple = G_SIMPLE_ASYNC_RESULT (res);
-  PpCupsDests        *result = NULL;
-  CGDData            *data;
-
-  g_warn_if_fail (g_simple_async_result_get_source_tag (simple) == pp_cups_get_dests_async);
-
-  if (g_simple_async_result_propagate_error (simple, error))
-    {
-      return NULL;
-    }
-
-  data = g_simple_async_result_get_op_res_gpointer (simple);
-  result = data->dests;
-  data->dests = NULL;
-
-  return result;
-}
diff --git a/panels/printers/pp-cups.h b/panels/printers/pp-cups.h
deleted file mode 100644
index 3847249..0000000
--- a/panels/printers/pp-cups.h
+++ /dev/null
@@ -1,71 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_CUPS_H__
-#define __PP_CUPS_H__
-
-#include <glib-object.h>
-#include <gio/gio.h>
-#include "pp-utils.h"
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_CUPS         (pp_cups_get_type ())
-#define PP_CUPS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), PP_TYPE_CUPS, PpCups))
-#define PP_CUPS_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), PP_TYPE_CUPS, PpCupsClass))
-#define PP_IS_CUPS(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), PP_TYPE_CUPS))
-#define PP_IS_CUPS_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), PP_TYPE_CUPS))
-#define PP_CUPS_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), PP_TYPE_CUPS, PpCupsClass))
-
-typedef struct{
-  cups_dest_t *dests;
-  gint         num_of_dests;
-} PpCupsDests;
-
-typedef struct _PpCups        PpCups;
-typedef struct _PpCupsClass   PpCupsClass;
-
-struct _PpCups
-{
-  GObject parent_instance;
-};
-
-struct _PpCupsClass
-{
-  GObjectClass parent_class;
-};
-
-GType        pp_cups_get_type         (void) G_GNUC_CONST;
-
-PpCups      *pp_cups_new              (void);
-
-void         pp_cups_get_dests_async  (PpCups               *cups,
-                                       GCancellable         *cancellable,
-                                       GAsyncReadyCallback   callback,
-                                       gpointer              user_data);
-
-PpCupsDests *pp_cups_get_dests_finish (PpCups               *cups,
-                                       GAsyncResult         *result,
-                                       GError              **error);
-
-G_END_DECLS
-
-#endif /* __PP_CUPS_H__ */
diff --git a/panels/printers/pp-host.c b/panels/printers/pp-host.c
deleted file mode 100644
index a994a61..0000000
--- a/panels/printers/pp-host.c
+++ /dev/null
@@ -1,459 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "pp-host.h"
-
-struct _PpHostPrivate
-{
-  gchar *hostname;
-  gint   port;
-};
-
-G_DEFINE_TYPE (PpHost, pp_host, G_TYPE_OBJECT);
-
-enum {
-  PROP_0 = 0,
-  PROP_HOSTNAME,
-  PROP_PORT,
-};
-
-static void
-pp_host_finalize (GObject *object)
-{
-  PpHostPrivate *priv;
-
-  priv = PP_HOST (object)->priv;
-
-  g_clear_pointer (&priv->hostname, g_free);
-
-  G_OBJECT_CLASS (pp_host_parent_class)->finalize (object);
-}
-
-static void
-pp_host_get_property (GObject    *object,
-                      guint       prop_id,
-                      GValue     *value,
-                      GParamSpec *param_spec)
-{
-  PpHost *self;
-
-  self = PP_HOST (object);
-
-  switch (prop_id)
-    {
-      case PROP_HOSTNAME:
-        g_value_set_string (value, self->priv->hostname);
-        break;
-      case PROP_PORT:
-        g_value_set_int (value, self->priv->port);
-        break;
-      default:
-        G_OBJECT_WARN_INVALID_PROPERTY_ID (object,
-                                           prop_id,
-                                           param_spec);
-      break;
-    }
-}
-
-static void
-pp_host_set_property (GObject      *object,
-                      guint         prop_id,
-                      const GValue *value,
-                      GParamSpec   *param_spec)
-{
-  PpHost *self = PP_HOST (object);
-
-  switch (prop_id)
-    {
-      case PROP_HOSTNAME:
-        g_free (self->priv->hostname);
-        self->priv->hostname = g_value_dup_string (value);
-        break;
-      case PROP_PORT:
-        self->priv->port = g_value_get_int (value);
-        break;
-      default:
-        G_OBJECT_WARN_INVALID_PROPERTY_ID (object,
-                                           prop_id,
-                                           param_spec);
-        break;
-    }
-}
-
-static void
-pp_host_class_init (PpHostClass *klass)
-{
-  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
-
-  g_type_class_add_private (klass, sizeof (PpHostPrivate));
-
-  gobject_class->set_property = pp_host_set_property;
-  gobject_class->get_property = pp_host_get_property;
-  gobject_class->finalize = pp_host_finalize;
-
-  g_object_class_install_property (gobject_class, PROP_HOSTNAME,
-    g_param_spec_string ("hostname",
-                         "Hostname",
-                         "The hostname",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_PORT,
-    g_param_spec_int ("port",
-                      "Port",
-                      "The port",
-                      0, G_MAXINT32, 631,
-                      G_PARAM_READWRITE));
-}
-
-static void
-pp_host_init (PpHost *host)
-{
-  host->priv = G_TYPE_INSTANCE_GET_PRIVATE (host,
-                                            PP_TYPE_HOST,
-                                            PpHostPrivate);
-}
-
-PpHost *
-pp_host_new (const gchar *hostname,
-             gint         port)
-{
-  return g_object_new (PP_TYPE_HOST,
-                       "hostname", hostname,
-                       "port", port,
-                       NULL);
-}
-
-typedef struct
-{
-  PpDevicesList *devices;
-} GSDData;
-
-static gchar **
-line_split (gchar *line)
-{
-  gboolean   escaped = FALSE;
-  gboolean   quoted = FALSE;
-  gboolean   in_word = FALSE;
-  gchar    **words = NULL;
-  gchar    **result = NULL;
-  gchar     *buffer = NULL;
-  gchar      ch;
-  gint       n = 0;
-  gint       i, j = 0, k = 0;
-
-  if (line)
-    {
-      n = strlen (line);
-      words = g_new0 (gchar *, n + 1);
-      buffer = g_new0 (gchar, n + 1);
-
-      for (i = 0; i < n; i++)
-        {
-          ch = line[i];
-
-          if (escaped)
-            {
-              buffer[k++] = ch;
-              escaped = FALSE;
-              continue;
-            }
-
-          if (ch == '\\')
-            {
-              in_word = TRUE;
-              escaped = TRUE;
-              continue;
-            }
-
-          if (in_word)
-            {
-              if (quoted)
-                {
-                  if (ch == '"')
-                    quoted = FALSE;
-                  else
-                    buffer[k++] = ch;
-                }
-              else if (g_ascii_isspace (ch))
-                {
-                  words[j++] = g_strdup (buffer);
-                  memset (buffer, 0, n + 1);
-                  k = 0;
-                  in_word = FALSE;
-                }
-              else if (ch == '"')
-                quoted = TRUE;
-              else
-                buffer[k++] = ch;
-            }
-          else
-            {
-              if (ch == '"')
-                {
-                  in_word = TRUE;
-                  quoted = TRUE;
-                }
-              else if (!g_ascii_isspace (ch))
-                {
-                  in_word = TRUE;
-                  buffer[k++] = ch;
-                }
-            }
-        }
-    }
-
-  if (buffer && buffer[0] != '\0')
-    words[j++] = g_strdup (buffer);
-
-  result = g_strdupv (words);
-  g_strfreev (words);
-  g_free (buffer);
-
-  return result;
-}
-
-static void
-_pp_host_get_snmp_devices_thread (GSimpleAsyncResult *res,
-                                  GObject            *object,
-                                  GCancellable       *cancellable)
-{
-  PpHost         *host = (PpHost *) object;
-  PpHostPrivate  *priv = host->priv;
-  PpPrintDevice  *device;
-  GSDData        *data;
-  GError         *error;
-  gchar         **argv;
-  gchar          *stdout_string = NULL;
-  gchar          *stderr_string = NULL;
-  gint            exit_status;
-
-  data = g_simple_async_result_get_op_res_gpointer (res);
-  data->devices = g_new0 (PpDevicesList, 1);
-  data->devices->devices = NULL;
-
-  argv = g_new0 (gchar *, 3);
-  argv[0] = g_strdup ("/usr/lib/cups/backend/snmp");
-  argv[1] = g_strdup (priv->hostname);
-
-  /* Use SNMP to get printer's informations */
-  g_spawn_sync (NULL,
-                argv,
-                NULL,
-                0,
-                NULL,
-                NULL,
-                &stdout_string,
-                &stderr_string,
-                &exit_status,
-                &error);
-
-  g_free (argv[1]);
-  g_free (argv[0]);
-  g_free (argv);
-
-  if (exit_status == 0 && stdout_string)
-    {
-      gchar **printer_informations = NULL;
-      gint    length;
-
-      printer_informations = line_split (stdout_string);
-      length = g_strv_length (printer_informations);
-
-      if (length >= 4)
-        {
-          device = g_new0 (PpPrintDevice, 1);
-
-          device->device_class = g_strdup (printer_informations[0]);
-          device->device_uri = g_strdup (printer_informations[1]);
-          device->device_make_and_model = g_strdup (printer_informations[2]);
-          device->device_info = g_strdup (printer_informations[3]);
-          device->device_name = g_strdup (printer_informations[3]);
-          device->device_name =
-            g_strcanon (device->device_name, ALLOWED_CHARACTERS, '-');
-          device->acquisition_method = ACQUISITION_METHOD_SNMP;
-
-          if (length >= 5 && printer_informations[4][0] != '\0')
-            device->device_id = g_strdup (printer_informations[4]);
-
-          if (length >= 6 && printer_informations[5][0] != '\0')
-            device->device_location = g_strdup (printer_informations[5]);
-
-          data->devices->devices = g_list_append (data->devices->devices, device);
-        }
-
-      g_strfreev (printer_informations);
-      g_free (stdout_string);
-    }
-}
-
-static void
-gsd_data_free (GSDData *data)
-{
-  GList *iter;
-
-  if (data)
-    {
-      if (data->devices)
-        {
-          if (data->devices->devices)
-            {
-              for (iter = data->devices->devices; iter; iter = iter->next)
-                pp_print_device_free ((PpPrintDevice *) iter->data);
-              g_list_free (data->devices->devices);
-            }
-
-          g_free (data->devices);
-        }
-
-      g_free (data);
-    }
-}
-
-void
-pp_host_get_snmp_devices_async (PpHost              *host,
-                                GCancellable        *cancellable,
-                                GAsyncReadyCallback  callback,
-                                gpointer             user_data)
-{
-  GSimpleAsyncResult *res;
-  GSDData            *data;
-
-  res = g_simple_async_result_new (G_OBJECT (host), callback, user_data, pp_host_get_snmp_devices_async);
-  data = g_new0 (GSDData, 1);
-  data->devices = NULL;
-
-  g_simple_async_result_set_check_cancellable (res, cancellable);
-  g_simple_async_result_set_op_res_gpointer (res, data, (GDestroyNotify) gsd_data_free);
-  g_simple_async_result_run_in_thread (res, _pp_host_get_snmp_devices_thread, 0, cancellable);
-
-  g_object_unref (res);
-}
-
-PpDevicesList *
-pp_host_get_snmp_devices_finish (PpHost        *host,
-                                 GAsyncResult  *res,
-                                 GError       **error)
-{
-  GSimpleAsyncResult *simple = G_SIMPLE_ASYNC_RESULT (res);
-  GSDData            *data;
-  PpDevicesList      *result;
-
-  g_warn_if_fail (g_simple_async_result_get_source_tag (simple) == pp_host_get_snmp_devices_async);
-
-  if (g_simple_async_result_propagate_error (simple, error))
-    return NULL;
-
-  data = g_simple_async_result_get_op_res_gpointer (simple);
-  result = data->devices;
-  data->devices = NULL;
-
-  return result;
-}
-
-static void
-_pp_host_get_remote_cups_devices_thread (GSimpleAsyncResult *res,
-                                         GObject            *object,
-                                         GCancellable       *cancellable)
-{
-  cups_dest_t   *dests = NULL;
-  GSDData       *data;
-  PpHost        *host = (PpHost *) object;
-  PpHostPrivate *priv = host->priv;
-  PpPrintDevice *device;
-  http_t        *http;
-  gint           num_of_devices = 0;
-  gint           i;
-
-  data = g_simple_async_result_get_op_res_gpointer (res);
-  data->devices = g_new0 (PpDevicesList, 1);
-  data->devices->devices = NULL;
-
-  /* Connect to remote CUPS server and get its devices */
-  http = httpConnect (priv->hostname, priv->port);
-  if (http)
-    {
-      num_of_devices = cupsGetDests2 (http, &dests);
-      if (num_of_devices > 0)
-        {
-          for (i = 0; i < num_of_devices; i++)
-            {
-              device = g_new0 (PpPrintDevice, 1);
-              device->device_class = g_strdup ("network");
-              device->device_uri = g_strdup_printf ("ipp://%s:%d/printers/%s",
-                                           priv->hostname,
-                                           priv->port,
-                                           dests[i].name);
-              device->device_name = g_strdup (dests[i].name);
-              device->device_location = g_strdup (cupsGetOption ("printer-location",
-                                                        dests[i].num_options,
-                                                        dests[i].options));
-              device->host_name = g_strdup (priv->hostname);
-              device->host_port = priv->port;
-              device->acquisition_method = ACQUISITION_METHOD_REMOTE_CUPS_SERVER;
-              data->devices->devices = g_list_append (data->devices->devices, device);
-            }
-        }
-
-      httpClose (http);
-    }
-}
-
-void
-pp_host_get_remote_cups_devices_async (PpHost              *host,
-                                       GCancellable        *cancellable,
-                                       GAsyncReadyCallback  callback,
-                                       gpointer             user_data)
-{
-  GSimpleAsyncResult *res;
-  GSDData            *data;
-
-  res = g_simple_async_result_new (G_OBJECT (host), callback, user_data, pp_host_get_remote_cups_devices_async);
-  data = g_new0 (GSDData, 1);
-  data->devices = NULL;
-
-  g_simple_async_result_set_check_cancellable (res, cancellable);
-  g_simple_async_result_set_op_res_gpointer (res, data, (GDestroyNotify) gsd_data_free);
-  g_simple_async_result_run_in_thread (res, _pp_host_get_remote_cups_devices_thread, 0, cancellable);
-
-  g_object_unref (res);
-}
-
-PpDevicesList *
-pp_host_get_remote_cups_devices_finish (PpHost        *host,
-                                        GAsyncResult  *res,
-                                        GError       **error)
-{
-  GSimpleAsyncResult *simple = G_SIMPLE_ASYNC_RESULT (res);
-  GSDData            *data;
-  PpDevicesList      *result;
-
-  g_warn_if_fail (g_simple_async_result_get_source_tag (simple) == pp_host_get_remote_cups_devices_async);
-
-  if (g_simple_async_result_propagate_error (simple, error))
-    return NULL;
-
-  data = g_simple_async_result_get_op_res_gpointer (simple);
-  result = data->devices;
-  data->devices = NULL;
-
-  return result;
-}
diff --git a/panels/printers/pp-host.h b/panels/printers/pp-host.h
deleted file mode 100644
index b3c2b5b..0000000
--- a/panels/printers/pp-host.h
+++ /dev/null
@@ -1,82 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_HOST_H__
-#define __PP_HOST_H__
-
-#include <glib-object.h>
-#include <gio/gio.h>
-#include "pp-utils.h"
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_HOST         (pp_host_get_type ())
-#define PP_HOST(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), PP_TYPE_HOST, PpHost))
-#define PP_HOST_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), PP_TYPE_HOST, PpHostClass))
-#define PP_IS_HOST(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), PP_TYPE_HOST))
-#define PP_IS_HOST_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), PP_TYPE_HOST))
-#define PP_HOST_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), PP_TYPE_HOST, PpHostClass))
-
-typedef struct{
-  GList *devices;
-} PpDevicesList;
-
-typedef struct _PpHost        PpHost;
-typedef struct _PpHostClass   PpHostClass;
-typedef struct _PpHostPrivate PpHostPrivate;
-
-struct _PpHost
-{
-  GObject        parent_instance;
-  PpHostPrivate *priv;
-};
-
-struct _PpHostClass
-{
-  GObjectClass parent_class;
-};
-
-GType          pp_host_get_type                       (void) G_GNUC_CONST;
-
-PpHost        *pp_host_new                            (const gchar          *hostname,
-                                                       gint                  port);
-
-void           pp_host_get_snmp_devices_async         (PpHost               *host,
-                                                       GCancellable         *cancellable,
-                                                       GAsyncReadyCallback   callback,
-                                                       gpointer              user_data);
-
-PpDevicesList *pp_host_get_snmp_devices_finish        (PpHost               *host,
-                                                       GAsyncResult         *result,
-                                                       GError              **error);
-
-void           pp_host_get_remote_cups_devices_async  (PpHost               *host,
-                                                       GCancellable         *cancellable,
-                                                       GAsyncReadyCallback   callback,
-                                                       gpointer              user_data);
-
-PpDevicesList *pp_host_get_remote_cups_devices_finish (PpHost               *host,
-                                                       GAsyncResult         *result,
-                                                       GError              **error);
-
-G_END_DECLS
-
-#endif /* __PP_HOST_H__ */
diff --git a/panels/printers/pp-ipp-option-widget.c b/panels/printers/pp-ipp-option-widget.c
deleted file mode 100644
index 0fa5410..0000000
--- a/panels/printers/pp-ipp-option-widget.c
+++ /dev/null
@@ -1,605 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "config.h"
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-#include <ctype.h>
-#include <glib/gi18n-lib.h>
-
-#include "pp-ipp-option-widget.h"
-#include "pp-utils.h"
-
-#define PP_IPP_OPTION_WIDGET_GET_PRIVATE(o)  \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), PP_TYPE_IPP_OPTION_WIDGET, PpIPPOptionWidgetPrivate))
-
-static void pp_ipp_option_widget_finalize (GObject *object);
-
-static gboolean construct_widget   (PpIPPOptionWidget *widget);
-static void     update_widget      (PpIPPOptionWidget *widget);
-static void     update_widget_real (PpIPPOptionWidget *widget);
-
-struct PpIPPOptionWidgetPrivate
-{
-  GtkWidget *switch_button;
-  GtkWidget *spin_button;
-  GtkWidget *combo;
-  GtkWidget *box;
-
-  IPPAttribute *option_supported;
-  IPPAttribute *option_default;
-
-  gchar *printer_name;
-  gchar *option_name;
-
-  GHashTable *ipp_attribute;
-};
-
-G_DEFINE_TYPE (PpIPPOptionWidget, pp_ipp_option_widget, GTK_TYPE_HBOX)
-
-static const struct {
-  const char *keyword;
-  const char *choice;
-  const char *translation;
-} ipp_choice_translations[] = {
-  /* Translators: this is an option of "Two Sided" */
-  { "sides", "one-sided", N_("One Sided") },
-  /* Translators: this is an option of "Two Sided" */
-  { "sides", "two-sided-long-edge", N_("Long Edge (Standard)") },
-  /* Translators: this is an option of "Two Sided" */
-  { "sides", "two-sided-short-edge", N_("Short Edge (Flip)") },
-  /* Translators: this is an option of "Orientation" */
-  { "orientation-requested", "3", N_("Portrait") },
-  /* Translators: this is an option of "Orientation" */
-  { "orientation-requested", "4", N_("Landscape") },
-  /* Translators: this is an option of "Orientation" */
-  { "orientation-requested", "5", N_("Reverse landscape") },
-  /* Translators: this is an option of "Orientation" */
-  { "orientation-requested", "6", N_("Reverse portrait") },
-};
-
-static const gchar *
-ipp_choice_translate (const gchar *option,
-                      const gchar *choice)
-{
-  gint i;
-
-  for (i = 0; i < G_N_ELEMENTS (ipp_choice_translations); i++)
-    {
-      if (g_strcmp0 (ipp_choice_translations[i].keyword, option) == 0 &&
-	  g_strcmp0 (ipp_choice_translations[i].choice, choice) == 0)
-	return _(ipp_choice_translations[i].translation);
-    }
-
-  return choice;
-}
-
-static void
-pp_ipp_option_widget_class_init (PpIPPOptionWidgetClass *class)
-{
-  GObjectClass *object_class;
-
-  object_class = G_OBJECT_CLASS (class);
-
-  object_class->finalize = pp_ipp_option_widget_finalize;
-
-  g_type_class_add_private (class, sizeof (PpIPPOptionWidgetPrivate));
-}
-
-static void
-pp_ipp_option_widget_init (PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate *priv;
-
-  priv = widget->priv = PP_IPP_OPTION_WIDGET_GET_PRIVATE (widget);
-
-  priv->switch_button = NULL;
-  priv->spin_button = NULL;
-  priv->combo = NULL;
-  priv->box = NULL;
-
-  priv->printer_name = NULL;
-  priv->option_name = NULL;
-
-  priv->option_supported = NULL;
-  priv->option_default = NULL;
-
-  priv->ipp_attribute = NULL;
-}
-
-static void
-pp_ipp_option_widget_finalize (GObject *object)
-{
-  PpIPPOptionWidget *widget = PP_IPP_OPTION_WIDGET (object);
-  PpIPPOptionWidgetPrivate *priv = widget->priv;
-
-  if (priv)
-    {
-      if (priv->option_name)
-        {
-          g_free (priv->option_name);
-          priv->option_name = NULL;
-        }
-
-      if (priv->printer_name)
-        {
-          g_free (priv->printer_name);
-          priv->printer_name = NULL;
-        }
-
-      if (priv->option_supported)
-        {
-          ipp_attribute_free (priv->option_supported);
-          priv->option_supported = NULL;
-        }
-
-      if (priv->option_default)
-        {
-          ipp_attribute_free (priv->option_default);
-          priv->option_default = NULL;
-        }
-
-      if (priv->ipp_attribute)
-        {
-          g_hash_table_unref (priv->ipp_attribute);
-          priv->ipp_attribute = NULL;
-        }
-    }
-
-  G_OBJECT_CLASS (pp_ipp_option_widget_parent_class)->finalize (object);
-}
-
-GtkWidget *
-pp_ipp_option_widget_new (IPPAttribute *attr_supported,
-                          IPPAttribute *attr_default,
-                          const gchar  *option_name,
-                          const gchar  *printer)
-{
-  PpIPPOptionWidgetPrivate *priv;
-  PpIPPOptionWidget        *widget = NULL;
-
-  if (attr_supported && option_name && printer)
-    {
-      widget = g_object_new (PP_TYPE_IPP_OPTION_WIDGET, NULL);
-
-      priv = PP_IPP_OPTION_WIDGET_GET_PRIVATE (widget);
-
-      priv->printer_name = g_strdup (printer);
-      priv->option_name = g_strdup (option_name);
-      priv->option_supported = ipp_attribute_copy (attr_supported);
-      priv->option_default = ipp_attribute_copy (attr_default);
-
-      if (construct_widget (widget))
-        {
-          update_widget_real (widget);
-        }
-      else
-        {
-          g_object_ref_sink (widget);
-          g_object_unref (widget);
-          widget = NULL;
-        }
-    }
-
-  return (GtkWidget *) widget;
-}
-
-enum {
-  NAME_COLUMN,
-  VALUE_COLUMN,
-  N_COLUMNS
-};
-
-static GtkWidget *
-combo_box_new (void)
-{
-  GtkCellRenderer *cell;
-  GtkListStore    *store;
-  GtkWidget       *combo_box;
-
-  combo_box = gtk_combo_box_new ();
-
-  store = gtk_list_store_new (N_COLUMNS, G_TYPE_STRING, G_TYPE_STRING);
-  gtk_combo_box_set_model (GTK_COMBO_BOX (combo_box), GTK_TREE_MODEL (store));
-  g_object_unref (store);
-
-  cell = gtk_cell_renderer_text_new ();
-  gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (combo_box), cell, TRUE);
-  gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (combo_box), cell,
-                                  "text", NAME_COLUMN,
-                                  NULL);
-
-  return combo_box;
-}
-
-static void
-combo_box_append (GtkWidget   *combo,
-                  const gchar *display_text,
-                  const gchar *value)
-{
-  GtkTreeModel *model;
-  GtkListStore *store;
-  GtkTreeIter   iter;
-
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo));
-  store = GTK_LIST_STORE (model);
-
-  gtk_list_store_append (store, &iter);
-  gtk_list_store_set (store, &iter,
-                      NAME_COLUMN, display_text,
-                      VALUE_COLUMN, value,
-                      -1);
-}
-
-struct ComboSet {
-  GtkComboBox *combo;
-  const gchar *value;
-};
-
-static gboolean
-set_cb (GtkTreeModel *model,
-        GtkTreePath  *path,
-        GtkTreeIter  *iter,
-        gpointer      data)
-{
-  struct ComboSet *set_data = data;
-  gboolean         found;
-  char            *value;
-
-  gtk_tree_model_get (model, iter, VALUE_COLUMN, &value, -1);
-  found = (strcmp (value, set_data->value) == 0);
-  g_free (value);
-
-  if (found)
-    gtk_combo_box_set_active_iter (set_data->combo, iter);
-
-  return found;
-}
-
-static void
-combo_box_set (GtkWidget   *combo,
-               const gchar *value)
-{
-  struct ComboSet  set_data;
-  GtkTreeModel    *model;
-
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo));
-
-  set_data.combo = GTK_COMBO_BOX (combo);
-  set_data.value = value;
-  gtk_tree_model_foreach (model, set_cb, &set_data);
-}
-
-static char *
-combo_box_get (GtkWidget *combo)
-{
-  GtkTreeModel *model;
-  GtkTreeIter   iter;
-  gchar        *value = NULL;
-
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo));
-
-  if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (combo), &iter))
-     gtk_tree_model_get (model, &iter, VALUE_COLUMN, &value, -1);
-
-  return value;
-}
-
-static void
-printer_add_option_async_cb (gboolean success,
-                             gpointer user_data)
-{
-  update_widget (user_data);
-}
-
-static void
-switch_changed_cb (GtkWidget         *switch_button,
-                   GParamSpec        *pspec,
-                   PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate  *priv = widget->priv;
-  gchar                    **values;
-
-  values = g_new0 (gchar *, 2);
-
-  if (gtk_switch_get_active (GTK_SWITCH (switch_button)))
-    values[0] = g_strdup ("True");
-  else
-    values[0] = g_strdup ("False");
-
-  printer_add_option_async (priv->printer_name,
-                            priv->option_name,
-                            values,
-                            TRUE,
-                            NULL,
-                            printer_add_option_async_cb,
-                            widget);
-
-  g_strfreev (values);
-}
-
-static void
-combo_changed_cb (GtkWidget         *combo,
-                  PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate  *priv = widget->priv;
-  gchar                    **values;
-
-  values = g_new0 (gchar *, 2);
-  values[0] = combo_box_get (combo);
-
-  printer_add_option_async (priv->printer_name,
-                            priv->option_name,
-                            values,
-                            TRUE,
-                            NULL,
-                            printer_add_option_async_cb,
-                            widget);
-
-  g_strfreev (values);
-}
-
-static void
-spin_button_changed_cb (GtkWidget         *spin_button,
-                        PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate  *priv = widget->priv;
-  gchar                    **values;
-
-  values = g_new0 (gchar *, 2);
-  values[0] = g_strdup_printf ("%d", gtk_spin_button_get_value_as_int (GTK_SPIN_BUTTON (spin_button)));
-
-  printer_add_option_async (priv->printer_name,
-                            priv->option_name,
-                            values,
-                            TRUE,
-                            NULL,
-                            printer_add_option_async_cb,
-                            widget);
-
-  g_strfreev (values);
-}
-
-static gboolean
-construct_widget (PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate *priv = widget->priv;
-  gboolean                  trivial_option = FALSE;
-  gboolean                  result = FALSE;
-  gchar                    *value;
-  gint                      i;
-
-  if (priv->option_supported)
-    {
-      switch (priv->option_supported->attribute_type)
-        {
-          case IPP_ATTRIBUTE_TYPE_INTEGER:
-            if (priv->option_supported->num_of_values <= 1)
-              trivial_option = TRUE;
-            break;
-
-          case IPP_ATTRIBUTE_TYPE_STRING:
-            if (priv->option_supported->num_of_values <= 1)
-              trivial_option = TRUE;
-            break;
-
-          case IPP_ATTRIBUTE_TYPE_RANGE:
-            if (priv->option_supported->attribute_values[0].lower_range ==
-                priv->option_supported->attribute_values[0].upper_range)
-              trivial_option = TRUE;
-            break;
-        }
-
-      if (!trivial_option)
-        {
-          switch (priv->option_supported->attribute_type)
-            {
-              case IPP_ATTRIBUTE_TYPE_BOOLEAN:
-                  priv->switch_button = gtk_switch_new ();
-
-                  gtk_box_pack_start (GTK_BOX (widget), priv->switch_button, FALSE, FALSE, 0);
-                  g_signal_connect (priv->switch_button, "notify::active", G_CALLBACK (switch_changed_cb), widget);
-                  break;
-
-              case IPP_ATTRIBUTE_TYPE_INTEGER:
-                  priv->combo = combo_box_new ();
-
-                  for (i = 0; i < priv->option_supported->num_of_values; i++)
-                    {
-                      value = g_strdup_printf ("%d", priv->option_supported->attribute_values[i].integer_value);
-                      combo_box_append (priv->combo,
-                                        ipp_choice_translate (priv->option_name,
-                                                              value),
-                                        value);
-                      g_free (value);
-                    }
-
-                  gtk_box_pack_start (GTK_BOX (widget), priv->combo, FALSE, FALSE, 0);
-                  g_signal_connect (priv->combo, "changed", G_CALLBACK (combo_changed_cb), widget);
-                  break;
-
-              case IPP_ATTRIBUTE_TYPE_STRING:
-                  priv->combo = combo_box_new ();
-
-                  for (i = 0; i < priv->option_supported->num_of_values; i++)
-                    combo_box_append (priv->combo,
-                                      ipp_choice_translate (priv->option_name,
-                                                            priv->option_supported->attribute_values[i].string_value),
-                                      priv->option_supported->attribute_values[i].string_value);
-
-                  gtk_box_pack_start (GTK_BOX (widget), priv->combo, FALSE, FALSE, 0);
-                  g_signal_connect (priv->combo, "changed", G_CALLBACK (combo_changed_cb), widget);
-                  break;
-
-              case IPP_ATTRIBUTE_TYPE_RANGE:
-                  priv->spin_button = gtk_spin_button_new_with_range (
-                                        priv->option_supported->attribute_values[0].lower_range,
-                                        priv->option_supported->attribute_values[0].upper_range,
-                                        1);
-
-                  gtk_box_pack_start (GTK_BOX (widget), priv->spin_button, FALSE, FALSE, 0);
-                  g_signal_connect (priv->spin_button, "value-changed", G_CALLBACK (spin_button_changed_cb), widget);
-                  break;
-
-              default:
-                  break;
-            }
-
-          result = TRUE;
-        }
-    }
-
-  return result;
-}
-
-static void
-update_widget_real (PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate *priv = widget->priv;
-  IPPAttribute             *attr = NULL;
-  gchar                    *value;
-  gchar                    *attr_name;
-
-  if (priv->option_default)
-    {
-      attr = ipp_attribute_copy (priv->option_default);
-
-      ipp_attribute_free (priv->option_default);
-      priv->option_default = NULL;
-    }
-  else if (priv->ipp_attribute)
-    {
-      attr_name = g_strdup_printf ("%s-default", priv->option_name);
-      attr = ipp_attribute_copy (g_hash_table_lookup (priv->ipp_attribute, attr_name));
-
-      g_free (attr_name);
-      g_hash_table_unref (priv->ipp_attribute);
-      priv->ipp_attribute = NULL;
-    }
-
-  switch (priv->option_supported->attribute_type)
-    {
-      case IPP_ATTRIBUTE_TYPE_BOOLEAN:
-        g_signal_handlers_block_by_func (priv->switch_button, switch_changed_cb, widget);
-
-        if (attr && attr->num_of_values > 0 &&
-            attr->attribute_type == IPP_ATTRIBUTE_TYPE_BOOLEAN)
-          {
-            gtk_switch_set_active (GTK_SWITCH (priv->switch_button),
-                                   attr->attribute_values[0].boolean_value);
-          }
-
-        g_signal_handlers_unblock_by_func (priv->switch_button, switch_changed_cb, widget);
-        break;
-
-      case IPP_ATTRIBUTE_TYPE_INTEGER:
-        g_signal_handlers_block_by_func (priv->combo, combo_changed_cb, widget);
-
-        if (attr && attr->num_of_values > 0 &&
-            attr->attribute_type == IPP_ATTRIBUTE_TYPE_INTEGER)
-          {
-            value = g_strdup_printf ("%d", attr->attribute_values[0].integer_value);
-            combo_box_set (priv->combo, value);
-            g_free (value);
-          }
-        else
-          {
-            value = g_strdup_printf ("%d", priv->option_supported->attribute_values[0].integer_value);
-            combo_box_set (priv->combo, value);
-            g_free (value);
-          }
-
-        g_signal_handlers_unblock_by_func (priv->combo, combo_changed_cb, widget);
-        break;
-
-      case IPP_ATTRIBUTE_TYPE_STRING:
-        g_signal_handlers_block_by_func (priv->combo, combo_changed_cb, widget);
-
-        if (attr && attr->num_of_values > 0 &&
-            attr->attribute_type == IPP_ATTRIBUTE_TYPE_STRING)
-          {
-            combo_box_set (priv->combo, attr->attribute_values[0].string_value);
-          }
-        else
-          {
-            combo_box_set (priv->combo, priv->option_supported->attribute_values[0].string_value);
-          }
-
-        g_signal_handlers_unblock_by_func (priv->combo, combo_changed_cb, widget);
-        break;
-
-      case IPP_ATTRIBUTE_TYPE_RANGE:
-        g_signal_handlers_block_by_func (priv->spin_button, spin_button_changed_cb, widget);
-
-        if (attr && attr->num_of_values > 0 &&
-            attr->attribute_type == IPP_ATTRIBUTE_TYPE_INTEGER)
-          {
-            gtk_spin_button_set_value (GTK_SPIN_BUTTON (priv->spin_button),
-                                       attr->attribute_values[0].integer_value);
-          }
-        else
-          {
-            gtk_spin_button_set_value (GTK_SPIN_BUTTON (priv->spin_button),
-                                       priv->option_supported->attribute_values[0].lower_range);
-          }
-
-        g_signal_handlers_unblock_by_func (priv->spin_button, spin_button_changed_cb, widget);
-        break;
-
-      default:
-        break;
-    }
-
-  ipp_attribute_free (attr);
-}
-
-static void
-get_ipp_attributes_cb (GHashTable *table,
-                       gpointer    user_data)
-{
-  PpIPPOptionWidget        *widget = (PpIPPOptionWidget *) user_data;
-  PpIPPOptionWidgetPrivate *priv = widget->priv;
-
-  if (priv->ipp_attribute)
-    g_hash_table_unref (priv->ipp_attribute);
-
-  priv->ipp_attribute = table;
-
-  update_widget_real (widget);
-}
-
-static void
-update_widget (PpIPPOptionWidget *widget)
-{
-  PpIPPOptionWidgetPrivate  *priv = widget->priv;
-  gchar                    **attributes_names;
-
-  attributes_names = g_new0 (gchar *, 2);
-  attributes_names[0] = g_strdup_printf ("%s-default", priv->option_name);
-
-  get_ipp_attributes_async (priv->printer_name,
-                            attributes_names,
-                            get_ipp_attributes_cb,
-                            widget);
-
-  g_strfreev (attributes_names);
-}
diff --git a/panels/printers/pp-ipp-option-widget.h b/panels/printers/pp-ipp-option-widget.h
deleted file mode 100644
index b075541..0000000
--- a/panels/printers/pp-ipp-option-widget.h
+++ /dev/null
@@ -1,70 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_IPP_OPTION_WIDGET_H__
-#define __PP_IPP_OPTION_WIDGET_H__
-
-#include <gtk/gtk.h>
-#include <cups/cups.h>
-#include <cups/ppd.h>
-
-#include "pp-utils.h"
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_IPP_OPTION_WIDGET                  (pp_ipp_option_widget_get_type ())
-#define PP_IPP_OPTION_WIDGET(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), PP_TYPE_IPP_OPTION_WIDGET, PpIPPOptionWidget))
-#define PP_IPP_OPTION_WIDGET_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass),  PP_TYPE_IPP_OPTION_WIDGET, PpIPPOptionWidgetClass))
-#define PP_IS_IPP_OPTION_WIDGET(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PP_TYPE_IPP_OPTION_WIDGET))
-#define PP_IS_IPP_OPTION_WIDGET_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass),  PP_TYPE_IPP_OPTION_WIDGET))
-#define PP_IPP_OPTION_WIDGET_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj),  PP_TYPE_IPP_OPTION_WIDGET, PpIPPOptionWidgetClass))
-
-typedef struct _PpIPPOptionWidget         PpIPPOptionWidget;
-typedef struct _PpIPPOptionWidgetClass    PpIPPOptionWidgetClass;
-typedef struct PpIPPOptionWidgetPrivate   PpIPPOptionWidgetPrivate;
-
-struct _PpIPPOptionWidget
-{
-  GtkHBox parent_instance;
-
-  PpIPPOptionWidgetPrivate *priv;
-};
-
-struct _PpIPPOptionWidgetClass
-{
-  GtkHBoxClass parent_class;
-
-  void (*changed) (PpIPPOptionWidget *widget);
-};
-
-typedef void (*IPPOptionCallback) (GtkWidget *widget,
-                                   gpointer   user_data);
-
-GType	     pp_ipp_option_widget_get_type  (void) G_GNUC_CONST;
-
-GtkWidget   *pp_ipp_option_widget_new (IPPAttribute *attr_supported,
-                                       IPPAttribute *attr_default,
-                                       const gchar  *option_name,
-                                       const gchar  *printer);
-
-G_END_DECLS
-
-#endif /* __PP_IPP_OPTION_WIDGET_H__ */
diff --git a/panels/printers/pp-jobs-dialog.c b/panels/printers/pp-jobs-dialog.c
deleted file mode 100644
index 7e0ef9f..0000000
--- a/panels/printers/pp-jobs-dialog.c
+++ /dev/null
@@ -1,541 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "config.h"
-
-#include <unistd.h>
-#include <stdlib.h>
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <glib/gstdio.h>
-#include <gtk/gtk.h>
-#include <gdesktop-enums.h>
-
-#include <cups/cups.h>
-
-#include "pp-jobs-dialog.h"
-#include "pp-utils.h"
-
-#define EMPTY_TEXT "\xe2\x80\x94"
-
-#define CLOCK_SCHEMA "org.gnome.desktop.interface"
-#define CLOCK_FORMAT_KEY "clock-format"
-
-static void pp_jobs_dialog_hide (PpJobsDialog *dialog);
-
-struct _PpJobsDialog {
-  GtkBuilder *builder;
-  GtkWidget  *parent;
-
-  GtkWidget  *dialog;
-
-  UserResponseCallback user_callback;
-  gpointer             user_data;
-
-  gchar *printer_name;
-
-  cups_job_t *jobs;
-  gint num_jobs;
-  gint current_job_id;
-
-  gint ref_count;
-};
-
-enum
-{
-  JOB_ID_COLUMN,
-  JOB_TITLE_COLUMN,
-  JOB_STATE_COLUMN,
-  JOB_CREATION_TIME_COLUMN,
-  JOB_N_COLUMNS
-};
-
-static void
-update_jobs_list_cb (cups_job_t *jobs,
-                     gint        num_of_jobs,
-                     gpointer    user_data)
-{
-  GtkTreeSelection *selection;
-  PpJobsDialog     *dialog = (PpJobsDialog *) user_data;
-  GtkListStore     *store;
-  GtkTreeView      *treeview;
-  GtkTreeIter       select_iter;
-  GtkTreeIter       iter;
-  GSettings        *settings;
-  gboolean          select_iter_set = FALSE;
-  gint              i;
-  gint              select_index = 0;
-
-  treeview = (GtkTreeView*)
-    gtk_builder_get_object (dialog->builder, "job-treeview");
-
-  if (dialog->num_jobs > 0)
-    cupsFreeJobs (dialog->num_jobs, dialog->jobs);
-
-  dialog->num_jobs = num_of_jobs;
-  dialog->jobs = jobs;
-
-  store = gtk_list_store_new (JOB_N_COLUMNS,
-                              G_TYPE_INT,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING,
-                              G_TYPE_STRING);
-
-  if (dialog->current_job_id >= 0)
-    {
-      for (i = 0; i < dialog->num_jobs; i++)
-        {
-          select_index = i;
-          if (dialog->jobs[i].id >= dialog->current_job_id)
-            break;
-        }
-    }
-
-  for (i = 0; i < dialog->num_jobs; i++)
-    {
-      GDesktopClockFormat  value;
-      GDateTime           *time;
-      struct tm *ts;
-      gchar     *time_string;
-      gchar     *state = NULL;
-
-      ts = localtime (&(dialog->jobs[i].creation_time));
-      time = g_date_time_new_local (ts->tm_year,
-                                    ts->tm_mon,
-                                    ts->tm_mday,
-                                    ts->tm_hour,
-                                    ts->tm_min,
-                                    ts->tm_sec);
-
-      settings = g_settings_new (CLOCK_SCHEMA);
-      value = g_settings_get_enum (settings, CLOCK_FORMAT_KEY);
-
-      if (value == G_DESKTOP_CLOCK_FORMAT_24H)
-        time_string = g_date_time_format (time, "%k:%M");
-      else
-        time_string = g_date_time_format (time, "%l:%M %p");
-
-      g_date_time_unref (time);
-
-      switch (dialog->jobs[i].state)
-        {
-          case IPP_JOB_PENDING:
-            /* Translators: Job's state (job is waiting to be printed) */
-            state = g_strdup (C_("print job", "Pending"));
-            break;
-          case IPP_JOB_HELD:
-            /* Translators: Job's state (job is held for printing) */
-            state = g_strdup (C_("print job", "Held"));
-            break;
-          case IPP_JOB_PROCESSING:
-            /* Translators: Job's state (job is currently printing) */
-            state = g_strdup (C_("print job", "Processing"));
-            break;
-          case IPP_JOB_STOPPED:
-            /* Translators: Job's state (job has been stopped) */
-            state = g_strdup (C_("print job", "Stopped"));
-            break;
-          case IPP_JOB_CANCELED:
-            /* Translators: Job's state (job has been canceled) */
-            state = g_strdup (C_("print job", "Canceled"));
-            break;
-          case IPP_JOB_ABORTED:
-            /* Translators: Job's state (job has aborted due to error) */
-            state = g_strdup (C_("print job", "Aborted"));
-            break;
-          case IPP_JOB_COMPLETED:
-            /* Translators: Job's state (job has completed successfully) */
-            state = g_strdup (C_("print job", "Completed"));
-            break;
-        }
-
-      gtk_list_store_append (store, &iter);
-      gtk_list_store_set (store, &iter,
-                          JOB_ID_COLUMN, dialog->jobs[i].id,
-                          JOB_TITLE_COLUMN, dialog->jobs[i].title,
-                          JOB_STATE_COLUMN, state,
-                          JOB_CREATION_TIME_COLUMN, time_string,
-                          -1);
-
-      if (i == select_index)
-        {
-          select_iter = iter;
-          select_iter_set = TRUE;
-          dialog->current_job_id = dialog->jobs[i].id;
-        }
-
-      g_free (time_string);
-      g_free (state);
-    }
-
-  gtk_tree_view_set_model (treeview, GTK_TREE_MODEL (store));
-
-  if (select_iter_set &&
-      (selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview))))
-    {
-      gtk_tree_selection_select_iter (selection, &select_iter);
-    }
-
-  g_object_unref (store);
-  dialog->ref_count--;
-}
-
-static void
-update_jobs_list (PpJobsDialog *dialog)
-{
-  if (dialog->printer_name)
-    {
-      dialog->ref_count++;
-      cups_get_jobs_async (dialog->printer_name,
-                           TRUE,
-                           CUPS_WHICHJOBS_ACTIVE,
-                           update_jobs_list_cb,
-                           dialog);
-    }
-}
-
-static void
-job_selection_changed_cb (GtkTreeSelection *selection,
-                          gpointer          user_data)
-{
-  PpJobsDialog *dialog = (PpJobsDialog *) user_data;
-  GtkTreeModel *model;
-  GtkTreeIter   iter;
-  GtkWidget    *widget;
-  gboolean      release_button_sensitive = FALSE;
-  gboolean      hold_button_sensitive = FALSE;
-  gboolean      cancel_button_sensitive = FALSE;
-  gint          id = -1;
-  gint          i;
-
-  if (gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      gtk_tree_model_get (model, &iter,
-                          JOB_ID_COLUMN, &id,
-                          -1);
-    }
-  else
-    {
-      id = -1;
-    }
-
-  dialog->current_job_id = id;
-
-  if (dialog->current_job_id >= 0 &&
-      dialog->jobs != NULL)
-    {
-      for (i = 0; i < dialog->num_jobs; i++)
-        {
-          if (dialog->jobs[i].id == dialog->current_job_id)
-            {
-              ipp_jstate_t job_state = dialog->jobs[i].state;
-
-              release_button_sensitive = job_state == IPP_JOB_HELD;
-              hold_button_sensitive = job_state == IPP_JOB_PENDING;
-              cancel_button_sensitive = job_state < IPP_JOB_CANCELED;
-
-              break;
-            }
-        }
-    }
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-release-button");
-  gtk_widget_set_sensitive (widget, release_button_sensitive);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-hold-button");
-  gtk_widget_set_sensitive (widget, hold_button_sensitive);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-cancel-button");
-  gtk_widget_set_sensitive (widget, cancel_button_sensitive);
-}
-
-static void
-populate_jobs_list (PpJobsDialog *dialog)
-{
-  GtkTreeViewColumn *column;
-  GtkCellRenderer   *renderer;
-  GtkCellRenderer   *title_renderer;
-  GtkTreeView       *treeview;
-
-  treeview = (GtkTreeView*)
-    gtk_builder_get_object (dialog->builder, "job-treeview");
-
-  renderer = gtk_cell_renderer_text_new ();
-  title_renderer = gtk_cell_renderer_text_new ();
-
-  /* Translators: Name of column showing titles of print jobs */
-  column = gtk_tree_view_column_new_with_attributes (_("Job Title"), title_renderer,
-                                                     "text", JOB_TITLE_COLUMN, NULL);
-  g_object_set (G_OBJECT (title_renderer), "ellipsize", PANGO_ELLIPSIZE_END, NULL);
-  gtk_tree_view_column_set_fixed_width (column, 180);
-  gtk_tree_view_column_set_min_width (column, 180);
-  gtk_tree_view_column_set_max_width (column, 180);
-  gtk_tree_view_append_column (treeview, column);
-
-  /* Translators: Name of column showing statuses of print jobs */
-  column = gtk_tree_view_column_new_with_attributes (_("Job State"), renderer,
-                                                     "text", JOB_STATE_COLUMN, NULL);
-  gtk_tree_view_column_set_expand (column, TRUE);
-  gtk_tree_view_append_column (treeview, column);
-
-  /* Translators: Name of column showing times of creation of print jobs */
-  column = gtk_tree_view_column_new_with_attributes (_("Time"), renderer,
-                                                     "text", JOB_CREATION_TIME_COLUMN, NULL);
-  gtk_tree_view_column_set_expand (column, TRUE);
-  gtk_tree_view_append_column (treeview, column);
-
-  g_signal_connect (gtk_tree_view_get_selection (treeview),
-                    "changed", G_CALLBACK (job_selection_changed_cb), dialog);
-
-  update_jobs_list (dialog);
-}
-
-static void
-job_process_cb_cb (gpointer user_data)
-{
-}
-
-static void
-job_process_cb (GtkButton *button,
-                gpointer   user_data)
-{
-  PpJobsDialog *dialog = (PpJobsDialog *) user_data;
-  GtkWidget    *widget;
-
-  if (dialog->current_job_id >= 0)
-    {
-      if ((GtkButton*) gtk_builder_get_object (dialog->builder,
-                                               "job-cancel-button") ==
-          button)
-        {
-          job_cancel_purge_async (dialog->current_job_id,
-                                  FALSE,
-                                  NULL,
-                                  job_process_cb_cb,
-                                  dialog);
-        }
-      else if ((GtkButton*) gtk_builder_get_object (dialog->builder,
-                                                    "job-hold-button") ==
-               button)
-        {
-          job_set_hold_until_async (dialog->current_job_id,
-                                    "indefinite",
-                                    NULL,
-                                    job_process_cb_cb,
-                                    dialog);
-        }
-      else
-        {
-          job_set_hold_until_async (dialog->current_job_id,
-                                    "no-hold",
-                                    NULL,
-                                    job_process_cb_cb,
-                                    dialog);
-        }
-  }
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-release-button");
-  gtk_widget_set_sensitive (widget, FALSE);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-hold-button");
-  gtk_widget_set_sensitive (widget, FALSE);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-cancel-button");
-  gtk_widget_set_sensitive (widget, FALSE);
-}
-
-static void
-jobs_dialog_response_cb (GtkDialog *dialog,
-                         gint       response_id,
-                         gpointer   user_data)
-{
-  PpJobsDialog *jobs_dialog = (PpJobsDialog*) user_data;
-
-  pp_jobs_dialog_hide (jobs_dialog);
-
-  jobs_dialog->user_callback (GTK_DIALOG (jobs_dialog->dialog),
-                              response_id,
-                              jobs_dialog->user_data);
-}
-
-static void
-update_alignment_padding (GtkWidget     *widget,
-                          GtkAllocation *allocation,
-                          gpointer       user_data)
-{
-  GtkAllocation  allocation2;
-  PpJobsDialog  *dialog = (PpJobsDialog*) user_data;
-  GtkWidget     *action_area;
-  gint           offset_left, offset_right;
-  guint          padding_left, padding_right,
-                 padding_top, padding_bottom;
-
-  action_area = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "dialog-action-area1");
-  gtk_widget_get_allocation (action_area, &allocation2);
-
-  offset_left = allocation2.x - allocation->x;
-  offset_right = (allocation->x + allocation->width) -
-                 (allocation2.x + allocation2.width);
-
-  gtk_alignment_get_padding  (GTK_ALIGNMENT (widget),
-                              &padding_top, &padding_bottom,
-                              &padding_left, &padding_right);
-  if (allocation->x >= 0 && allocation2.x >= 0)
-    {
-      if (offset_left > 0 && offset_left != padding_left)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (widget),
-                                   padding_top, padding_bottom,
-                                   offset_left, padding_right);
-
-      gtk_alignment_get_padding  (GTK_ALIGNMENT (widget),
-                                  &padding_top, &padding_bottom,
-                                  &padding_left, &padding_right);
-      if (offset_right > 0 && offset_right != padding_right)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (widget),
-                                   padding_top, padding_bottom,
-                                   padding_left, offset_right);
-    }
-}
-
-PpJobsDialog *
-pp_jobs_dialog_new (GtkWindow            *parent,
-                    UserResponseCallback  user_callback,
-                    gpointer              user_data,
-                    gchar                *printer_name)
-{
-  PpJobsDialog *dialog;
-  GtkWidget    *widget;
-  GError       *error = NULL;
-  gchar        *objects[] = { "jobs-dialog", NULL };
-  guint         builder_result;
-  gchar        *title;
-
-  dialog = g_new0 (PpJobsDialog, 1);
-
-  dialog->builder = gtk_builder_new ();
-  dialog->parent = GTK_WIDGET (parent);
-
-  builder_result = gtk_builder_add_objects_from_file (dialog->builder,
-                                                      DATADIR"/jobs-dialog.ui",
-                                                      objects, &error);
-
-  if (builder_result == 0)
-    {
-      g_warning ("Could not load ui: %s", error->message);
-      g_error_free (error);
-      return NULL;
-    }
-
-  dialog->dialog = (GtkWidget *) gtk_builder_get_object (dialog->builder, "jobs-dialog");
-  dialog->user_callback = user_callback;
-  dialog->user_data = user_data;
-  dialog->printer_name = g_strdup (printer_name);
-  dialog->current_job_id = -1;
-  dialog->ref_count = 0;
-
-  /* connect signals */
-  g_signal_connect (dialog->dialog, "delete-event", G_CALLBACK (gtk_widget_hide_on_delete), NULL);
-  g_signal_connect (dialog->dialog, "response", G_CALLBACK (jobs_dialog_response_cb), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "content-alignment");
-  g_signal_connect (widget, "size-allocate", G_CALLBACK (update_alignment_padding), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-cancel-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (job_process_cb), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-hold-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (job_process_cb), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "job-release-button");
-  g_signal_connect (widget, "clicked", G_CALLBACK (job_process_cb), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "jobs-title");
-  title = g_strdup_printf (_("%s Active Jobs"), printer_name);
-  gtk_label_set_label (GTK_LABEL (widget), title);
-  g_free (title);
-
-  populate_jobs_list (dialog);
-
-  gtk_window_set_transient_for (GTK_WINDOW (dialog->dialog), GTK_WINDOW (parent));
-  gtk_window_present (GTK_WINDOW (dialog->dialog));
-  gtk_widget_show_all (GTK_WIDGET (dialog->dialog));
-
-  return dialog;
-}
-
-void
-pp_jobs_dialog_update (PpJobsDialog *dialog)
-{
-  update_jobs_list (dialog);
-}
-
-static gboolean
-pp_jobs_dialog_free_idle (gpointer user_data)
-{
-  PpJobsDialog *dialog = (PpJobsDialog*) user_data;
-
-  if (dialog->ref_count == 0)
-    {
-      gtk_widget_destroy (GTK_WIDGET (dialog->dialog));
-      dialog->dialog = NULL;
-
-      g_object_unref (dialog->builder);
-      dialog->builder = NULL;
-
-      if (dialog->num_jobs > 0)
-        cupsFreeJobs (dialog->num_jobs, dialog->jobs);
-
-      g_free (dialog->printer_name);
-
-      g_free (dialog);
-
-      return FALSE;
-    }
-  else
-    {
-      return TRUE;
-    }
-}
-
-void
-pp_jobs_dialog_free (PpJobsDialog *dialog)
-{
-  g_idle_add (pp_jobs_dialog_free_idle, dialog);
-}
-
-static void
-pp_jobs_dialog_hide (PpJobsDialog *dialog)
-{
-  gtk_widget_hide (GTK_WIDGET (dialog->dialog));
-}
diff --git a/panels/printers/pp-jobs-dialog.h b/panels/printers/pp-jobs-dialog.h
deleted file mode 100644
index e07909f..0000000
--- a/panels/printers/pp-jobs-dialog.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_JOBS_DIALOG_H__
-#define __PP_JOBS_DIALOG_H__
-
-#include <gtk/gtk.h>
-#include "pp-utils.h"
-
-G_BEGIN_DECLS
-
-typedef struct _PpJobsDialog PpJobsDialog;
-
-PpJobsDialog *pp_jobs_dialog_new    (GtkWindow            *parent,
-                                     UserResponseCallback  user_callback,
-                                     gpointer              user_data,
-                                     gchar                *printer_name);
-void          pp_jobs_dialog_update (PpJobsDialog         *dialog);
-void          pp_jobs_dialog_free   (PpJobsDialog         *dialog);
-
-G_END_DECLS
-
-#endif
diff --git a/panels/printers/pp-maintenance-command.c b/panels/printers/pp-maintenance-command.c
deleted file mode 100644
index 3ccc539..0000000
--- a/panels/printers/pp-maintenance-command.c
+++ /dev/null
@@ -1,329 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include <glib/gstdio.h>
-
-#include "pp-maintenance-command.h"
-
-#include "pp-utils.h"
-
-#if (CUPS_VERSION_MAJOR > 1) || (CUPS_VERSION_MINOR > 5)
-#define HAVE_CUPS_1_6 1
-#endif
-
-#ifndef HAVE_CUPS_1_6
-#define ippGetCount(attr)     attr->num_values
-#define ippGetValueTag(attr)  attr->value_tag
-#define ippGetStatusCode(ipp) ipp->request.status.status_code
-#define ippGetString(attr, element, language) attr->values[element].string.text
-#endif
-
-struct _PpMaintenanceCommandPrivate
-{
-  gchar *printer_name;
-  gchar *command;
-  gchar *title;
-};
-
-G_DEFINE_TYPE (PpMaintenanceCommand, pp_maintenance_command, G_TYPE_OBJECT);
-
-enum {
-  PROP_0 = 0,
-  PROP_PRINTER_NAME,
-  PROP_COMMAND,
-  PROP_TITLE
-};
-
-static void
-pp_maintenance_command_finalize (GObject *object)
-{
-  PpMaintenanceCommandPrivate *priv;
-
-  priv = PP_MAINTENANCE_COMMAND (object)->priv;
-
-  g_clear_pointer (&priv->printer_name, g_free);
-  g_clear_pointer (&priv->command, g_free);
-  g_clear_pointer (&priv->title, g_free);
-
-  G_OBJECT_CLASS (pp_maintenance_command_parent_class)->finalize (object);
-}
-
-static void
-pp_maintenance_command_get_property (GObject    *object,
-                                     guint       prop_id,
-                                     GValue     *value,
-                                     GParamSpec *param_spec)
-{
-  PpMaintenanceCommand *self;
-
-  self = PP_MAINTENANCE_COMMAND (object);
-
-  switch (prop_id)
-    {
-      case PROP_PRINTER_NAME:
-        g_value_set_string (value, self->priv->printer_name);
-        break;
-      case PROP_COMMAND:
-        g_value_set_string (value, self->priv->command);
-        break;
-      case PROP_TITLE:
-        g_value_set_string (value, self->priv->title);
-        break;
-      default:
-        G_OBJECT_WARN_INVALID_PROPERTY_ID (object,
-                                           prop_id,
-                                           param_spec);
-      break;
-    }
-}
-
-static void
-pp_maintenance_command_set_property (GObject      *object,
-                                     guint         prop_id,
-                                     const GValue *value,
-                                     GParamSpec   *param_spec)
-{
-  PpMaintenanceCommand *self = PP_MAINTENANCE_COMMAND (object);
-
-  switch (prop_id)
-    {
-      case PROP_PRINTER_NAME:
-        g_free (self->priv->printer_name);
-        self->priv->printer_name = g_value_dup_string (value);
-        break;
-      case PROP_COMMAND:
-        g_free (self->priv->command);
-        self->priv->command = g_value_dup_string (value);
-        break;
-      case PROP_TITLE:
-        g_free (self->priv->title);
-        self->priv->title = g_value_dup_string (value);
-        break;
-      default:
-        G_OBJECT_WARN_INVALID_PROPERTY_ID (object,
-                                           prop_id,
-                                           param_spec);
-        break;
-    }
-}
-
-static void
-pp_maintenance_command_class_init (PpMaintenanceCommandClass *klass)
-{
-  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
-
-  g_type_class_add_private (klass, sizeof (PpMaintenanceCommandPrivate));
-
-  gobject_class->set_property = pp_maintenance_command_set_property;
-  gobject_class->get_property = pp_maintenance_command_get_property;
-  gobject_class->finalize = pp_maintenance_command_finalize;
-
-  g_object_class_install_property (gobject_class, PROP_PRINTER_NAME,
-    g_param_spec_string ("printer-name",
-                         "Printer name",
-                         "Name of the printer",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_COMMAND,
-    g_param_spec_string ("command",
-                         "Maintenance command",
-                         "Command to execute",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_TITLE,
-    g_param_spec_string ("title",
-                         "Command title",
-                         "Title of the job by which the command will be executed",
-                         NULL,
-                         G_PARAM_READWRITE));
-}
-
-static void
-pp_maintenance_command_init (PpMaintenanceCommand *command)
-{
-  command->priv = G_TYPE_INSTANCE_GET_PRIVATE (command,
-                                               PP_TYPE_MAINTENANCE_COMMAND,
-                                               PpMaintenanceCommandPrivate);
-}
-
-PpMaintenanceCommand *
-pp_maintenance_command_new (const gchar *printer_name,
-                            const gchar *command,
-                            const gchar *title)
-{
-  return g_object_new (PP_TYPE_MAINTENANCE_COMMAND,
-                       "printer-name", printer_name,
-                       "command", command,
-                       "title", title,
-                       NULL);
-}
-
-static void
-_pp_maintenance_command_execute_thread (GSimpleAsyncResult *res,
-                                        GObject            *object,
-                                        GCancellable       *cancellable)
-{
-  PpMaintenanceCommand        *command = (PpMaintenanceCommand *) object;
-  PpMaintenanceCommandPrivate *priv = command->priv;
-  static const char           *attrs[] = {"printer-commands"};
-  ipp_attribute_t             *attr = NULL;
-  gboolean                     success = FALSE;
-  GError                      *error = NULL;
-  ipp_t                       *request;
-  ipp_t                       *response = NULL;
-  gchar                       *printer_uri;
-  gchar                       *printer_commands = NULL;
-  gchar                       *printer_commands_lowercase = NULL;
-  gchar                       *command_lowercase;
-  gchar                       *file_name = NULL;
-  int                          fd = -1;
-
-  printer_uri = g_strdup_printf ("ipp://localhost/printers/%s",
-                                 priv->printer_name);
-
-  request = ippNewRequest (IPP_GET_PRINTER_ATTRIBUTES);
-  ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                "printer-uri", NULL, printer_uri);
-  ippAddStrings (request, IPP_TAG_OPERATION, IPP_TAG_KEYWORD,
-                 "requested-attributes", 1, NULL, attrs);
-  response = cupsDoRequest (CUPS_HTTP_DEFAULT, request, "/");
-
-  if (response)
-    {
-      if (ippGetStatusCode (response) <= IPP_OK_CONFLICT)
-        {
-          attr = ippFindAttribute (response, "printer-commands", IPP_TAG_ZERO);
-          if (attr && ippGetCount (attr) > 0 && ippGetValueTag (attr) != IPP_TAG_NOVALUE)
-            {
-              if (ippGetValueTag (attr) == IPP_TAG_KEYWORD)
-                {
-                  printer_commands = g_strdup (ippGetString (attr, 0, NULL));
-                }
-            }
-          else
-            {
-              success = TRUE;
-            }
-        }
-
-      ippDelete (response);
-    }
-
-  if (printer_commands)
-    {
-      command_lowercase = g_ascii_strdown (priv->command, -1);
-      printer_commands_lowercase = g_ascii_strdown (printer_commands, -1);
-
-      if (g_strrstr (printer_commands_lowercase, command_lowercase))
-        {
-          request = ippNewRequest (IPP_PRINT_JOB);
-
-          ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                        "printer-uri", NULL, printer_uri);
-          ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-                        "job-name", NULL, priv->title);
-          ippAddString (request, IPP_TAG_JOB, IPP_TAG_MIMETYPE,
-                        "document-format", NULL, "application/vnd.cups-command");
-
-          fd = g_file_open_tmp ("ccXXXXXX", &file_name, &error);
-
-          if (fd != -1)
-            {
-              FILE *file;
-
-              file = fdopen (fd, "w");
-              fprintf (file, "#CUPS-COMMAND\n");
-              fprintf (file, "%s\n", priv->command);
-              fclose (file);
-
-              response = cupsDoFileRequest (CUPS_HTTP_DEFAULT, request, "/", file_name);
-              g_unlink (file_name);
-
-              if (response)
-                {
-                  if (ippGetStatusCode (response) <= IPP_OK_CONFLICT)
-                    {
-                      success = TRUE;
-                    }
-
-                  ippDelete (response);
-                }
-            }
-
-          g_free (file_name);
-        }
-      else
-        {
-          success = TRUE;
-        }
-
-      g_free (command_lowercase);
-      g_free (printer_commands_lowercase);
-      g_free (printer_commands);
-    }
-
-  g_free (printer_uri);
-
-  if (!success)
-    {
-      g_simple_async_result_set_error (res,
-                                       G_IO_ERROR,
-                                       G_IO_ERROR_FAILED,
-                                       "Execution of maintenance command failed.");
-    }
-
-  g_simple_async_result_set_op_res_gboolean (res, success);
-}
-
-void
-pp_maintenance_command_execute_async (PpMaintenanceCommand *command,
-                                      GCancellable         *cancellable,
-                                      GAsyncReadyCallback   callback,
-                                      gpointer              user_data)
-{
-  GSimpleAsyncResult *res;
-
-  res = g_simple_async_result_new (G_OBJECT (command), callback, user_data, pp_maintenance_command_execute_async);
-
-  g_simple_async_result_set_check_cancellable (res, cancellable);
-  g_simple_async_result_run_in_thread (res, _pp_maintenance_command_execute_thread, 0, cancellable);
-
-  g_object_unref (res);
-}
-
-gboolean
-pp_maintenance_command_execute_finish (PpMaintenanceCommand  *command,
-                                       GAsyncResult          *res,
-                                       GError               **error)
-{
-  GSimpleAsyncResult *simple = G_SIMPLE_ASYNC_RESULT (res);
-
-  g_warn_if_fail (g_simple_async_result_get_source_tag (simple) == pp_maintenance_command_execute_async);
-
-  if (g_simple_async_result_propagate_error (simple, error))
-    {
-      return FALSE;
-    }
-
-  return g_simple_async_result_get_op_res_gboolean (simple);
-}
diff --git a/panels/printers/pp-maintenance-command.h b/panels/printers/pp-maintenance-command.h
deleted file mode 100644
index b876e9f..0000000
--- a/panels/printers/pp-maintenance-command.h
+++ /dev/null
@@ -1,69 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_MAINTENANCE_COMMAND_H__
-#define __PP_MAINTENANCE_COMMAND_H__
-
-#include <glib-object.h>
-#include <gio/gio.h>
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_MAINTENANCE_COMMAND         (pp_maintenance_command_get_type ())
-#define PP_MAINTENANCE_COMMAND(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), PP_TYPE_MAINTENANCE_COMMAND, PpMaintenanceCommand))
-#define PP_MAINTENANCE_COMMAND_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), PP_TYPE_MAINTENANCE_COMMAND, PpMaintenanceCommandClass))
-#define PP_IS_MAINTENANCE_COMMAND(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), PP_TYPE_MAINTENANCE_COMMAND))
-#define PP_IS_MAINTENANCE_COMMAND_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), PP_TYPE_MAINTENANCE_COMMAND))
-#define PP_MAINTENANCE_COMMAND_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), PP_TYPE_MAINTENANCE_COMMAND, PpMaintenanceCommandClass))
-
-typedef struct _PpMaintenanceCommand        PpMaintenanceCommand;
-typedef struct _PpMaintenanceCommandClass   PpMaintenanceCommandClass;
-typedef struct _PpMaintenanceCommandPrivate PpMaintenanceCommandPrivate;
-
-struct _PpMaintenanceCommand
-{
-  GObject                      parent_instance;
-  PpMaintenanceCommandPrivate *priv;
-};
-
-struct _PpMaintenanceCommandClass
-{
-  GObjectClass parent_class;
-};
-
-GType   pp_maintenance_command_get_type                     (void) G_GNUC_CONST;
-
-PpMaintenanceCommand *pp_maintenance_command_new            (const gchar *printer_name,
-                                                             const gchar *command,
-                                                             const gchar *title);
-
-void                  pp_maintenance_command_execute_async  (PpMaintenanceCommand *command,
-                                                             GCancellable         *cancellable,
-                                                             GAsyncReadyCallback   callback,
-                                                             gpointer              user_data);
-
-gboolean              pp_maintenance_command_execute_finish (PpMaintenanceCommand  *command,
-                                                             GAsyncResult          *result,
-                                                             GError               **error);
-
-G_END_DECLS
-
-#endif /* __PP_MAINTENANCE_COMMAND_H__ */
diff --git a/panels/printers/pp-new-printer-dialog.c b/panels/printers/pp-new-printer-dialog.c
deleted file mode 100644
index 90c57c1..0000000
--- a/panels/printers/pp-new-printer-dialog.c
+++ /dev/null
@@ -1,1522 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2009-2010  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#include "config.h"
-
-#include <unistd.h>
-#include <stdlib.h>
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <glib/gstdio.h>
-#include <gtk/gtk.h>
-
-#include <cups/cups.h>
-
-#include "pp-new-printer-dialog.h"
-#include "pp-utils.h"
-#include "pp-host.h"
-#include "pp-cups.h"
-#include "pp-new-printer.h"
-
-#ifdef GDK_WINDOWING_X11
-#include <gdk/gdkx.h>
-#endif
-
-#if (CUPS_VERSION_MAJOR > 1) || (CUPS_VERSION_MINOR > 5)
-#define HAVE_CUPS_1_6 1
-#endif
-
-#ifndef HAVE_CUPS_1_6
-#define ippGetState(ipp) ipp->state
-#endif
-
-static void actualize_devices_list (PpNewPrinterDialog *dialog);
-static void populate_devices_list (PpNewPrinterDialog *dialog);
-static void search_address_cb2 (GtkEntry             *entry,
-                                GtkEntryIconPosition  icon_pos,
-                                GdkEvent             *event,
-                                gpointer              user_data);
-static void search_address_cb (GtkEntry *entry,
-                               gpointer  user_data);
-static void new_printer_dialog_response_cb (GtkDialog *_dialog,
-                                            gint       response_id,
-                                            gpointer   user_data);
-static void t_device_free (gpointer data);
-
-enum
-{
-  DEVICE_ICON_COLUMN = 0,
-  DEVICE_NAME_COLUMN,
-  DEVICE_DISPLAY_NAME_COLUMN,
-  DEVICE_N_COLUMNS
-};
-
-typedef struct
-{
-  gchar    *display_name;
-  gchar    *device_name;
-  gchar    *device_original_name;
-  gchar    *device_info;
-  gchar    *device_location;
-  gchar    *device_make_and_model;
-  gchar    *device_uri;
-  gchar    *device_id;
-  gchar    *device_ppd;
-  gchar    *host_name;
-  gint      host_port;
-  gboolean  network_device;
-  gint      acquisition_method;
-  gboolean  show;
-} TDevice;
-
-struct _PpNewPrinterDialogPrivate
-{
-  GtkBuilder *builder;
-
-  GList *devices;
-  GList *new_devices;
-
-  cups_dest_t *dests;
-  gint         num_of_dests;
-
-  GCancellable *cancellable;
-
-  gboolean  cups_searching;
-  gboolean  remote_cups_searching;
-  gboolean  snmp_searching;
-
-  GtkCellRenderer *text_renderer;
-  GtkCellRenderer *icon_renderer;
-
-  GtkWidget *dialog;
-};
-
-#define PP_NEW_PRINTER_DIALOG_GET_PRIVATE(obj) (G_TYPE_INSTANCE_GET_PRIVATE ((obj), PP_TYPE_NEW_PRINTER_DIALOG, PpNewPrinterDialogPrivate))
-
-static void pp_new_printer_dialog_finalize (GObject *object);
-
-enum {
-  PRE_RESPONSE,
-  RESPONSE,
-  LAST_SIGNAL
-};
-
-static guint signals[LAST_SIGNAL] = { 0 };
-
-G_DEFINE_TYPE (PpNewPrinterDialog, pp_new_printer_dialog, G_TYPE_OBJECT)
-
-static void
-pp_new_printer_dialog_class_init (PpNewPrinterDialogClass *klass)
-{
-  GObjectClass *object_class;
-
-  object_class = G_OBJECT_CLASS (klass);
-  object_class->finalize = pp_new_printer_dialog_finalize;
-
-  g_type_class_add_private (object_class, sizeof (PpNewPrinterDialogPrivate));
-
-  /**
-   * PpNewPrinterDialog::pre-response:
-   * @device: the device that is being added
-   *
-   * The signal which gets emitted when the new printer dialog is closed.
-   */
-  signals[PRE_RESPONSE] =
-    g_signal_new ("pre-response",
-                  G_TYPE_FROM_CLASS (object_class),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PpNewPrinterDialogClass, pre_response),
-                  NULL, NULL,
-                  g_cclosure_marshal_generic,
-                  G_TYPE_NONE, 4, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_BOOLEAN);
-
-  /**
-   * PpNewPrinterDialog::response:
-   * @response-id: response id of dialog
-   *
-   * The signal which gets emitted after the printer is added and configured.
-   */
-  signals[RESPONSE] =
-    g_signal_new ("response",
-                  G_TYPE_FROM_CLASS (object_class),
-                  G_SIGNAL_RUN_LAST,
-                  G_STRUCT_OFFSET (PpNewPrinterDialogClass, response),
-                  NULL, NULL,
-                  g_cclosure_marshal_generic,
-                  G_TYPE_NONE, 1, G_TYPE_INT);
-}
-
-
-PpNewPrinterDialog *
-pp_new_printer_dialog_new (GtkWindow *parent)
-{
-  PpNewPrinterDialogPrivate *priv;
-  PpNewPrinterDialog        *dialog;
-
-  dialog = g_object_new (PP_TYPE_NEW_PRINTER_DIALOG, NULL);
-  priv = dialog->priv;
-
-  gtk_window_set_transient_for (GTK_WINDOW (priv->dialog), GTK_WINDOW (parent));
-
-  return PP_NEW_PRINTER_DIALOG (dialog);
-}
-
-static void
-emit_pre_response (PpNewPrinterDialog *dialog,
-                   const gchar        *device_name,
-                   const gchar        *device_location,
-                   const gchar        *device_make_and_model,
-                   gboolean            network_device)
-{
-  g_signal_emit (dialog,
-                 signals[PRE_RESPONSE],
-                 0,
-                 device_name,
-                 device_location,
-                 device_make_and_model,
-                 network_device);
-}
-
-static void
-emit_response (PpNewPrinterDialog *dialog,
-               gint                response_id)
-{
-  g_signal_emit (dialog, signals[RESPONSE], 0, response_id);
-}
-
-/*
- * Modify padding of the content area of the GtkDialog
- * so it is aligned with the action area.
- */
-static void
-update_alignment_padding (GtkWidget     *widget,
-                          GtkAllocation *allocation,
-                          gpointer       user_data)
-{
-  PpNewPrinterDialog        *dialog = (PpNewPrinterDialog*) user_data;
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  GtkAllocation              allocation1, allocation2;
-  GtkWidget                 *action_area;
-  GtkWidget                 *content_area;
-  gint                       offset_left, offset_right;
-  guint                      padding_left, padding_right,
-                             padding_top, padding_bottom;
-
-  action_area = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "dialog-action-area1");
-  gtk_widget_get_allocation (action_area, &allocation2);
-
-  content_area = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "content-alignment");
-  gtk_widget_get_allocation (content_area, &allocation1);
-
-  offset_left = allocation2.x - allocation1.x;
-  offset_right = (allocation1.x + allocation1.width) -
-                 (allocation2.x + allocation2.width);
-
-  gtk_alignment_get_padding  (GTK_ALIGNMENT (content_area),
-                              &padding_top, &padding_bottom,
-                              &padding_left, &padding_right);
-  if (allocation1.x >= 0 && allocation2.x >= 0)
-    {
-      if (offset_left > 0 && offset_left != padding_left)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (content_area),
-                                   padding_top, padding_bottom,
-                                   offset_left, padding_right);
-
-      gtk_alignment_get_padding  (GTK_ALIGNMENT (content_area),
-                                  &padding_top, &padding_bottom,
-                                  &padding_left, &padding_right);
-      if (offset_right > 0 && offset_right != padding_right)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (content_area),
-                                   padding_top, padding_bottom,
-                                   padding_left, offset_right);
-    }
-}
-
-static void
-pp_new_printer_dialog_init (PpNewPrinterDialog *dialog)
-{
-  PpNewPrinterDialogPrivate *priv;
-  GtkStyleContext           *context;
-  GtkWidget                 *widget;
-  GError                    *error = NULL;
-  gchar                     *objects[] = { "dialog", NULL };
-  guint                      builder_result;
-
-  priv = PP_NEW_PRINTER_DIALOG_GET_PRIVATE (dialog);
-  dialog->priv = priv;
-
-  priv->builder = gtk_builder_new ();
-
-  builder_result = gtk_builder_add_objects_from_file (priv->builder,
-                                                      DATADIR"/new-printer-dialog.ui",
-                                                      objects, &error);
-
-  if (builder_result == 0)
-    {
-      g_warning ("Could not load ui: %s", error->message);
-      g_error_free (error);
-    }
-
-  /* GCancellable for cancelling of async operations */
-  priv->cancellable = g_cancellable_new ();
-
-  priv->devices = NULL;
-  priv->new_devices = NULL;
-  priv->dests = NULL;
-  priv->num_of_dests = 0;
-  priv->cups_searching = FALSE;
-  priv->remote_cups_searching = FALSE;
-  priv->snmp_searching = FALSE;
-  priv->text_renderer = NULL;
-  priv->icon_renderer = NULL;
-
-  /* Construct dialog */
-  priv->dialog = (GtkWidget*) gtk_builder_get_object (priv->builder, "dialog");
-
-  /* Connect signals */
-  g_signal_connect (priv->dialog, "response", G_CALLBACK (new_printer_dialog_response_cb), dialog);
-  g_signal_connect (priv->dialog, "size-allocate", G_CALLBACK (update_alignment_padding), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "search-entry");
-  g_signal_connect (widget, "icon-press", G_CALLBACK (search_address_cb2), dialog);
-  g_signal_connect (widget, "activate", G_CALLBACK (search_address_cb), dialog);
-
-  /* Set junctions */
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "scrolledwindow1");
-  context = gtk_widget_get_style_context (widget);
-  gtk_style_context_set_junction_sides (context, GTK_JUNCTION_BOTTOM);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "toolbar1");
-  context = gtk_widget_get_style_context (widget);
-  gtk_style_context_set_junction_sides (context, GTK_JUNCTION_TOP);
-
-  /* Fill with data */
-  populate_devices_list (dialog);
-
-  gtk_widget_show (priv->dialog);
-}
-
-static void
-pp_new_printer_dialog_finalize (GObject *object)
-{
-  PpNewPrinterDialog *dialog = PP_NEW_PRINTER_DIALOG (object);
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-
-  priv->text_renderer = NULL;
-  priv->icon_renderer = NULL;
-
-  if (priv->cancellable)
-    {
-      g_cancellable_cancel (priv->cancellable);
-      g_clear_object (&priv->cancellable);
-    }
-
-  if (priv->builder)
-    g_clear_object (&priv->builder);
-
-  g_list_free_full (priv->devices, t_device_free);
-  priv->devices = NULL;
-
-  g_list_free_full (priv->new_devices, t_device_free);
-  priv->new_devices = NULL;
-
-  if (priv->num_of_dests > 0)
-    {
-      cupsFreeDests (priv->num_of_dests, priv->dests);
-      priv->num_of_dests = 0;
-      priv->dests = NULL;
-    }
-
-  G_OBJECT_CLASS (pp_new_printer_dialog_parent_class)->finalize (object);
-}
-
-static void
-device_selection_changed_cb (GtkTreeSelection *selection,
-                             gpointer          user_data)
-{
-  PpNewPrinterDialog        *dialog = PP_NEW_PRINTER_DIALOG (user_data);
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  GtkTreeModel              *model;
-  GtkTreeIter                iter;
-  GtkWidget                 *treeview = NULL;
-  GtkWidget                 *widget;
-
-  treeview = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "devices-treeview");
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "new-printer-add-button");
-
-  if (treeview)
-    gtk_widget_set_sensitive (widget,
-      gtk_tree_selection_get_selected (
-        gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)),
-        &model,
-        &iter));
-}
-
-static void
-add_device_to_list (PpNewPrinterDialog *dialog,
-                    PpPrintDevice      *device,
-                    gboolean            new_device)
-{
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  gboolean  network_device;
-  gboolean  already_present;
-  TDevice  *store_device;
-  TDevice  *item;
-  GList    *iter;
-  gchar    *name = NULL;
-  gchar    *canonized_name = NULL;
-  gchar    *new_name;
-  gchar    *new_canonized_name = NULL;
-  gint      name_index, j;
-
-  if (device)
-    {
-      if (device->device_id ||
-          device->device_ppd ||
-          (device->host_name &&
-           device->acquisition_method == ACQUISITION_METHOD_REMOTE_CUPS_SERVER))
-        {
-          network_device = FALSE;
-
-          if (device->device_class &&
-              g_strcmp0 (device->device_class, "network") == 0)
-            network_device = TRUE;
-
-          store_device = g_new0 (TDevice, 1);
-          store_device->device_original_name = g_strdup (device->device_name);
-          store_device->device_info = g_strdup (device->device_info);
-          store_device->device_location = g_strdup (device->device_location);
-          store_device->device_make_and_model = g_strdup (device->device_make_and_model);
-          store_device->device_uri = g_strdup (device->device_uri);
-          store_device->device_id = g_strdup (device->device_id);
-          store_device->device_ppd = g_strdup (device->device_ppd);
-          store_device->host_name = g_strdup (device->host_name);
-          store_device->host_port = device->host_port;
-          store_device->network_device = network_device;
-          store_device->acquisition_method = device->acquisition_method;
-          store_device->show = TRUE;
-
-          if (device->device_id)
-            {
-              name = get_tag_value (device->device_id, "mdl");
-              if (!name)
-                name = get_tag_value (device->device_id, "model");
-            }
-
-          if (!name &&
-              device->device_make_and_model &&
-              device->device_make_and_model[0] != '\0')
-            {
-              name = g_strdup (device->device_make_and_model);
-            }
-
-          if (!name &&
-              device->device_name &&
-              device->device_name[0] != '\0')
-            {
-              name = g_strdup (device->device_name);
-            }
-
-          if (!name &&
-              device->device_info &&
-              device->device_info[0] != '\0')
-            {
-              name = g_strdup (device->device_info);
-            }
-
-          g_strstrip (name);
-
-          name_index = 2;
-          already_present = FALSE;
-          do
-            {
-              if (already_present)
-                {
-                  new_name = g_strdup_printf ("%s %d", name, name_index);
-                  name_index++;
-                }
-              else
-                {
-                  new_name = g_strdup (name);
-                }
-
-              if (new_name)
-                {
-                  new_canonized_name = g_strcanon (g_strdup (new_name), ALLOWED_CHARACTERS, '-');
-                }
-
-              already_present = FALSE;
-              for (j = 0; j < priv->num_of_dests; j++)
-                if (g_strcmp0 (priv->dests[j].name, new_canonized_name) == 0)
-                  already_present = TRUE;
-
-              for (iter = priv->devices; iter; iter = iter->next)
-                {
-                  item = (TDevice *) iter->data;
-                  if (g_strcmp0 (item->device_name, new_canonized_name) == 0)
-                    already_present = TRUE;
-                }
-
-              for (iter = priv->new_devices; iter; iter = iter->next)
-                {
-                  item = (TDevice *) iter->data;
-                  if (g_strcmp0 (item->device_name, new_canonized_name) == 0)
-                    already_present = TRUE;
-                }
-
-              if (already_present)
-                {
-                  g_free (new_name);
-                  g_free (new_canonized_name);
-                }
-              else
-                {
-                  g_free (name);
-                  g_free (canonized_name);
-                  name = new_name;
-                  canonized_name = new_canonized_name;
-                }
-            } while (already_present);
-
-          store_device->display_name = g_strdup (canonized_name);
-          store_device->device_name = canonized_name;
-          g_free (name);
-
-          if (new_device)
-            priv->new_devices = g_list_append (priv->new_devices, store_device);
-          else
-            priv->devices = g_list_append (priv->devices, store_device);
-        }
-    }
-}
-
-static void
-add_devices_to_list (PpNewPrinterDialog  *dialog,
-                     GList               *devices,
-                     gboolean             new_device)
-{
-  GList *iter;
-
-  for (iter = devices; iter; iter = iter->next)
-    {
-      add_device_to_list (dialog, (PpPrintDevice *) iter->data, new_device);
-    }
-}
-
-static TDevice *
-device_in_list (gchar *device_uri,
-                GList *device_list)
-{
-  GList   *iter;
-  TDevice *device;
-
-  for (iter = device_list; iter; iter = iter->next)
-    {
-      device = (TDevice *) iter->data;
-      /* GroupPhysicalDevices returns uris without port numbers */
-      if (g_str_has_prefix (device->device_uri, device_uri))
-        return device;
-    }
-
-  return NULL;
-}
-
-static void
-t_device_free (gpointer data)
-{
-  if (data)
-    {
-      TDevice *device = (TDevice *) data;
-
-      g_free (device->display_name);
-      g_free (device->device_name);
-      g_free (device->device_original_name);
-      g_free (device->device_info);
-      g_free (device->device_location);
-      g_free (device->device_make_and_model);
-      g_free (device->device_uri);
-      g_free (device->device_id);
-      g_free (device->device_ppd);
-      g_free (device);
-    }
-}
-
-static void
-update_spinner_state (PpNewPrinterDialog *dialog)
-{
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  GtkWidget *spinner;
-
-  if (priv->cups_searching ||
-      priv->remote_cups_searching ||
-      priv->snmp_searching)
-    {
-      spinner = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "spinner");
-      gtk_spinner_start (GTK_SPINNER (spinner));
-      gtk_widget_show (spinner);
-    }
-  else
-    {
-      spinner = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "spinner");
-      gtk_spinner_stop (GTK_SPINNER (spinner));
-      gtk_widget_hide (spinner);
-    }
-}
-
-static void
-group_physical_devices_cb (gchar    ***device_uris,
-                           gpointer    user_data)
-{
-  PpNewPrinterDialog        *dialog = (PpNewPrinterDialog *) user_data;
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  TDevice                   *device, *tmp;
-  gint                       i, j;
-
-  if (device_uris)
-    {
-      for (i = 0; device_uris[i]; i++)
-        {
-          if (device_uris[i])
-            {
-              for (j = 0; device_uris[i][j]; j++)
-                {
-                  device = device_in_list (device_uris[i][j], priv->devices);
-                  if (device)
-                    break;
-                }
-
-              if (device)
-                {
-                  for (j = 0; device_uris[i][j]; j++)
-                    {
-                      tmp = device_in_list (device_uris[i][j], priv->new_devices);
-                      if (tmp)
-                        {
-                          priv->new_devices = g_list_remove (priv->new_devices, tmp);
-                          t_device_free (tmp);
-                        }
-                    }
-                }
-              else
-                {
-                  for (j = 0; device_uris[i][j]; j++)
-                    {
-                      tmp = device_in_list (device_uris[i][j], priv->new_devices);
-                      if (tmp)
-                        {
-                          priv->new_devices = g_list_remove (priv->new_devices, tmp);
-                          if (j == 0)
-                            {
-                              priv->devices = g_list_append (priv->devices, tmp);
-                            }
-                          else
-                            {
-                              t_device_free (tmp);
-                            }
-                        }
-                    }
-                }
-            }
-        }
-
-      for (i = 0; device_uris[i]; i++)
-        {
-          for (j = 0; device_uris[i][j]; j++)
-            {
-              g_free (device_uris[i][j]);
-            }
-
-          g_free (device_uris[i]);
-        }
-
-      g_free (device_uris);
-    }
-  else
-    {
-      priv->devices = g_list_concat (priv->devices, priv->new_devices);
-      priv->new_devices = NULL;
-    }
-
-  actualize_devices_list (dialog);
-}
-
-static void
-group_physical_devices_dbus_cb (GObject      *source_object,
-                                GAsyncResult *res,
-                                gpointer      user_data)
-{
-  GVariant   *output;
-  GError     *error = NULL;
-  gchar    ***result = NULL;
-  gint        i, j;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      GVariant *array;
-
-      g_variant_get (output, "(@aas)", &array);
-
-      if (array)
-        {
-          GVariantIter *iter;
-          GVariantIter *subiter;
-          GVariant     *item;
-          GVariant     *subitem;
-          gchar        *device_uri;
-
-          result = g_new0 (gchar **, g_variant_n_children (array) + 1);
-          g_variant_get (array, "aas", &iter);
-          i = 0;
-          while ((item = g_variant_iter_next_value (iter)))
-            {
-              result[i] = g_new0 (gchar *, g_variant_n_children (item) + 1);
-              g_variant_get (item, "as", &subiter);
-              j = 0;
-              while ((subitem = g_variant_iter_next_value (subiter)))
-                {
-                  g_variant_get (subitem, "s", &device_uri);
-
-                  result[i][j] = device_uri;
-
-                  g_variant_unref (subitem);
-                  j++;
-                }
-
-              g_variant_unref (item);
-              i++;
-            }
-
-          g_variant_unref (array);
-        }
-
-      g_variant_unref (output);
-    }
-  else if (error &&
-           error->domain == G_DBUS_ERROR &&
-           (error->code == G_DBUS_ERROR_SERVICE_UNKNOWN ||
-            error->code == G_DBUS_ERROR_UNKNOWN_METHOD))
-    {
-      g_warning ("Install system-config-printer which provides \
-DBus method \"GroupPhysicalDevices\" to group duplicates in device list.");
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-    }
-
-  if (!error ||
-      error->domain != G_IO_ERROR ||
-      error->code != G_IO_ERROR_CANCELLED)
-    group_physical_devices_cb (result, user_data);
-
-  if (error)
-    g_error_free (error);
-}
-
-static void
-get_cups_devices_cb (GList    *devices,
-                     gboolean  finished,
-                     gboolean  cancelled,
-                     gpointer  user_data)
-{
-  PpNewPrinterDialog         *dialog;
-  PpNewPrinterDialogPrivate  *priv;
-  GDBusConnection            *bus;
-  GVariantBuilder             device_list;
-  GVariantBuilder             device_hash;
-  PpPrintDevice             **all_devices;
-  PpPrintDevice              *pp_device;
-  TDevice                    *device;
-  GError                     *error = NULL;
-  GList                      *iter;
-  gint                        length, i;
-
-
-  if (!cancelled)
-    {
-      dialog = (PpNewPrinterDialog*) user_data;
-      priv = dialog->priv;
-
-      if (finished)
-        {
-          priv->cups_searching = FALSE;
-        }
-
-      if (devices)
-        {
-          add_devices_to_list (dialog,
-                               devices,
-                               TRUE);
-
-          length = g_list_length (priv->devices) + g_list_length (devices);
-          if (length > 0)
-            {
-              all_devices = g_new0 (PpPrintDevice *, length);
-
-              i = 0;
-              for (iter = priv->devices; iter; iter = iter->next)
-                {
-                  device = (TDevice *) iter->data;
-                  if (device)
-                    {
-                      all_devices[i] = g_new0 (PpPrintDevice, 1);
-                      all_devices[i]->device_id = g_strdup (device->device_id);
-                      all_devices[i]->device_make_and_model = g_strdup (device->device_make_and_model);
-                      all_devices[i]->device_class = device->network_device ? g_strdup ("network") : strdup ("direct");
-                      all_devices[i]->device_uri = g_strdup (device->device_uri);
-                    }
-                  i++;
-                }
-
-              for (iter = devices; iter; iter = iter->next)
-                {
-                  pp_device = (PpPrintDevice *) iter->data;
-                  if (pp_device)
-                    {
-                      all_devices[i] = g_new0 (PpPrintDevice, 1);
-                      all_devices[i]->device_id = g_strdup (pp_device->device_id);
-                      all_devices[i]->device_make_and_model = g_strdup (pp_device->device_make_and_model);
-                      all_devices[i]->device_class = g_strdup (pp_device->device_class);
-                      all_devices[i]->device_uri = g_strdup (pp_device->device_uri);
-                    }
-                  i++;
-                }
-
-              bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
-              if (bus)
-                {
-                  g_variant_builder_init (&device_list, G_VARIANT_TYPE ("a{sv}"));
-
-                  for (i = 0; i < length; i++)
-                    {
-                      if (all_devices[i]->device_uri)
-                        {
-                          g_variant_builder_init (&device_hash, G_VARIANT_TYPE ("a{ss}"));
-
-                          if (all_devices[i]->device_id)
-                            g_variant_builder_add (&device_hash,
-                                                   "{ss}",
-                                                   "device-id",
-                                                   all_devices[i]->device_id);
-
-                          if (all_devices[i]->device_make_and_model)
-                            g_variant_builder_add (&device_hash,
-                                                   "{ss}",
-                                                   "device-make-and-model",
-                                                   all_devices[i]->device_make_and_model);
-
-                          if (all_devices[i]->device_class)
-                            g_variant_builder_add (&device_hash,
-                                                   "{ss}",
-                                                   "device-class",
-                                                   all_devices[i]->device_class);
-
-                          g_variant_builder_add (&device_list,
-                                                 "{sv}",
-                                                 all_devices[i]->device_uri,
-                                                 g_variant_builder_end (&device_hash));
-                        }
-                    }
-
-                  g_dbus_connection_call (bus,
-                                          SCP_BUS,
-                                          SCP_PATH,
-                                          SCP_IFACE,
-                                          "GroupPhysicalDevices",
-                                          g_variant_new ("(v)", g_variant_builder_end (&device_list)),
-                                          G_VARIANT_TYPE ("(aas)"),
-                                          G_DBUS_CALL_FLAGS_NONE,
-                                          -1,
-                                          priv->cancellable,
-                                          group_physical_devices_dbus_cb,
-                                          dialog);
-                }
-              else
-                {
-                  g_warning ("Failed to get system bus: %s", error->message);
-                  g_error_free (error);
-                  group_physical_devices_cb (NULL, user_data);
-                }
-
-              for (i = 0; i < length; i++)
-                {
-                  if (all_devices[i])
-                    {
-                      g_free (all_devices[i]->device_id);
-                      g_free (all_devices[i]->device_make_and_model);
-                      g_free (all_devices[i]->device_class);
-                      g_free (all_devices[i]->device_uri);
-                      g_free (all_devices[i]);
-                    }
-                }
-
-              g_free (all_devices);
-            }
-          else
-            {
-              actualize_devices_list (dialog);
-            }
-        }
-      else
-        {
-          actualize_devices_list (dialog);
-        }
-    }
-
-  for (iter = devices; iter; iter = iter->next)
-    pp_print_device_free ((PpPrintDevice *) iter->data);
-  g_list_free (devices);
-}
-
-static void
-get_snmp_devices_cb (GObject      *source_object,
-                     GAsyncResult *res,
-                     gpointer      user_data)
-{
-  PpNewPrinterDialog        *dialog;
-  PpNewPrinterDialogPrivate *priv;
-  PpHost                    *host = (PpHost *) source_object;
-  GError                    *error = NULL;
-  PpDevicesList             *result;
-  GList                     *iter;
-
-  result = pp_host_get_snmp_devices_finish (host, res, &error);
-  g_object_unref (source_object);
-
-  if (result)
-    {
-      dialog = PP_NEW_PRINTER_DIALOG (user_data);
-      priv = dialog->priv;
-
-      priv->snmp_searching = FALSE;
-      update_spinner_state (dialog);
-
-      if (result->devices)
-        {
-          add_devices_to_list (dialog,
-                               result->devices,
-                               FALSE);
-        }
-
-      actualize_devices_list (dialog);
-
-      for (iter = result->devices; iter; iter = iter->next)
-        pp_print_device_free ((PpPrintDevice *) iter->data);
-      g_list_free (result->devices);
-      g_free (result);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        {
-          dialog = PP_NEW_PRINTER_DIALOG (user_data);
-          priv = dialog->priv;
-
-          g_warning ("%s", error->message);
-
-          priv->snmp_searching = FALSE;
-          update_spinner_state (dialog);
-        }
-
-      g_error_free (error);
-    }
-}
-
-static void
-get_remote_cups_devices_cb (GObject      *source_object,
-                            GAsyncResult *res,
-                            gpointer      user_data)
-{
-  PpNewPrinterDialog        *dialog;
-  PpNewPrinterDialogPrivate *priv;
-  PpHost                    *host = (PpHost *) source_object;
-  GError                    *error = NULL;
-  PpDevicesList             *result;
-  GList                     *iter;
-
-  result = pp_host_get_remote_cups_devices_finish (host, res, &error);
-  g_object_unref (source_object);
-
-  if (result)
-    {
-      dialog = PP_NEW_PRINTER_DIALOG (user_data);
-      priv = dialog->priv;
-
-      priv->remote_cups_searching = FALSE;
-      update_spinner_state (dialog);
-
-      if (result->devices)
-        {
-          add_devices_to_list (dialog,
-                               result->devices,
-                               FALSE);
-        }
-
-      actualize_devices_list (dialog);
-
-      for (iter = result->devices; iter; iter = iter->next)
-        pp_print_device_free ((PpPrintDevice *) iter->data);
-      g_list_free (result->devices);
-      g_free (result);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        {
-          dialog = PP_NEW_PRINTER_DIALOG (user_data);
-          priv = dialog->priv;
-
-          g_warning ("%s", error->message);
-
-          priv->remote_cups_searching = FALSE;
-          update_spinner_state (dialog);
-        }
-
-      g_error_free (error);
-    }
-}
-
-static void
-get_cups_devices (PpNewPrinterDialog *dialog)
-{
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-
-  priv->cups_searching = TRUE;
-  update_spinner_state (dialog);
-
-  get_cups_devices_async (priv->cancellable,
-                          get_cups_devices_cb,
-                          dialog);
-}
-
-static gboolean
-parse_uri (gchar  *uri,
-           gchar **host,
-           gint   *port)
-{
-  gchar *tmp = NULL;
-  gchar *resulting_host = NULL;
-  gchar *port_string = NULL;
-  gchar *position;
-  int    resulting_port = 631;
-
-  if (g_strrstr (uri, "://"))
-    tmp = g_strrstr (uri, "://") + 3;
-  else
-    tmp = uri;
-
-  if (g_strrstr (tmp, "@"))
-    tmp = g_strrstr (tmp, "@") + 1;
-
-  if ((position = g_strrstr (tmp, "/")))
-    {
-      *position = '\0';
-      resulting_host = g_strdup (tmp);
-      *position = '/';
-    }
-  else
-    resulting_host = g_strdup (tmp);
-
-  if ((position = g_strrstr (resulting_host, ":")))
-    {
-      *position = '\0';
-      port_string = position + 1;
-    }
-
-  if (port_string)
-    resulting_port = atoi (port_string);
-
-  *host = resulting_host;
-  *port = resulting_port;
-
-  return TRUE;
-}
-
-
-static void
-search_address_cb (GtkEntry *entry,
-                   gpointer  user_data)
-{
-  PpNewPrinterDialog        *dialog = PP_NEW_PRINTER_DIALOG (user_data);
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  gboolean             found = FALSE;
-  gboolean             subfound;
-  TDevice             *device;
-  GList               *iter, *tmp;
-  gchar               *text;
-  gchar               *lowercase_name;
-  gchar               *lowercase_location;
-  gchar               *lowercase_text;
-  gchar              **words;
-  gint                 words_length = 0;
-  gint                 i;
-
-  text = g_strdup (gtk_entry_get_text (entry));
-
-  lowercase_text = g_ascii_strdown (text, -1);
-  words = g_strsplit_set (lowercase_text, " ", -1);
-  g_free (lowercase_text);
-
-  if (words)
-    {
-      words_length = g_strv_length (words);
-
-      for (iter = priv->devices; iter; iter = iter->next)
-        {
-          device = iter->data;
-
-          lowercase_name = g_ascii_strdown (device->device_name, -1);
-          if (device->device_location)
-            lowercase_location = g_ascii_strdown (device->device_location, -1);
-          else
-            lowercase_location = NULL;
-
-          subfound = TRUE;
-          for (i = 0; words[i]; i++)
-            {
-              if (!g_strrstr (lowercase_name, words[i]) &&
-                  (!lowercase_location || !g_strrstr (lowercase_location, words[i])))
-                subfound = FALSE;
-            }
-
-          if (subfound)
-            {
-              device->show = TRUE;
-              found = TRUE;
-            }
-          else
-            {
-              device->show = FALSE;
-            }
-
-          g_free (lowercase_location);
-          g_free (lowercase_name);
-        }
-
-      g_strfreev (words);
-  }
-
-  if (!found && words_length == 1)
-    {
-      iter = priv->devices;
-      while (iter)
-        {
-          device = iter->data;
-          device->show = TRUE;
-
-          if (device->acquisition_method == ACQUISITION_METHOD_REMOTE_CUPS_SERVER ||
-              device->acquisition_method == ACQUISITION_METHOD_SNMP)
-            {
-              tmp = iter;
-              iter = iter->next;
-              priv->devices = g_list_remove_link (priv->devices, tmp);
-              g_list_free_full (tmp, t_device_free);
-            }
-          else
-            iter = iter->next;
-        }
-
-      iter = priv->new_devices;
-      while (iter)
-        {
-          device = iter->data;
-
-          if (device->acquisition_method == ACQUISITION_METHOD_REMOTE_CUPS_SERVER ||
-              device->acquisition_method == ACQUISITION_METHOD_SNMP)
-            {
-              tmp = iter;
-              iter = iter->next;
-              priv->new_devices = g_list_remove_link (priv->new_devices, tmp);
-              g_list_free_full (tmp, t_device_free);
-            }
-          else
-            iter = iter->next;
-        }
-
-      if (text && text[0] != '\0')
-        {
-          gchar *host = NULL;
-          gint   port = 631;
-
-          parse_uri (text, &host, &port);
-
-          if (host)
-            {
-              PpHost *snmp_host;
-              PpHost *remote_cups_host;
-
-              snmp_host = pp_host_new (host, port);
-              remote_cups_host = g_object_ref (snmp_host);
-
-              priv->remote_cups_searching = TRUE;
-              priv->snmp_searching = TRUE;
-              update_spinner_state (dialog);
-
-              pp_host_get_remote_cups_devices_async (snmp_host,
-                                                     priv->cancellable,
-                                                     get_remote_cups_devices_cb,
-                                                     dialog);
-
-              pp_host_get_snmp_devices_async (remote_cups_host,
-                                              priv->cancellable,
-                                              get_snmp_devices_cb,
-                                              dialog);
-
-              g_free (host);
-            }
-        }
-    }
-
-  actualize_devices_list (dialog);
-
-  g_free (text);
-}
-
-static void
-search_address_cb2 (GtkEntry             *entry,
-                    GtkEntryIconPosition  icon_pos,
-                    GdkEvent             *event,
-                    gpointer              user_data)
-{
-  search_address_cb (entry, user_data);
-}
-
-static void
-actualize_devices_list (PpNewPrinterDialog *dialog)
-{
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  GtkTreeViewColumn *column;
-  GtkTreeSelection  *selection;
-  GtkListStore      *store;
-  GtkTreeView       *treeview;
-  GtkTreeIter        iter;
-  gboolean           no_device = TRUE;
-  TDevice           *device;
-  gfloat             yalign;
-  GList             *item;
-  gchar             *display_string;
-
-  treeview = (GtkTreeView *)
-    gtk_builder_get_object (priv->builder, "devices-treeview");
-
-  store = gtk_list_store_new (3, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);
-
-  for (item = priv->devices; item; item = item->next)
-    {
-      device = (TDevice *) item->data;
-
-      if (device->display_name &&
-          (device->device_id ||
-           device->device_ppd ||
-           (device->host_name &&
-            device->acquisition_method == ACQUISITION_METHOD_REMOTE_CUPS_SERVER)) &&
-          device->show)
-        {
-          if (device->device_location)
-            display_string = g_markup_printf_escaped ("<b>%s</b>\n<small><span foreground=\"#555555\">%s</span></small>",
-                                                      device->display_name,
-                                                      device->device_location);
-          else
-            display_string = g_markup_printf_escaped ("<b>%s</b>\n ",
-                                                      device->display_name);
-
-          gtk_list_store_append (store, &iter);
-          gtk_list_store_set (store, &iter,
-                              DEVICE_ICON_COLUMN, device->network_device ? "printer-network" : "printer",
-                              DEVICE_NAME_COLUMN, device->device_name,
-                              DEVICE_DISPLAY_NAME_COLUMN, display_string,
-                              -1);
-          no_device = FALSE;
-
-          g_free (display_string);
-        }
-    }
-
-  column = gtk_tree_view_get_column (treeview, 0);
-  if (priv->text_renderer)
-    gtk_cell_renderer_get_alignment (priv->text_renderer, NULL, &yalign);
-
-  if (no_device &&
-      !priv->cups_searching &&
-      !priv->remote_cups_searching &&
-      !priv->snmp_searching)
-    {
-      if (priv->text_renderer)
-        gtk_cell_renderer_set_alignment (priv->text_renderer, 0.5, yalign);
-
-      if (column)
-        gtk_tree_view_column_set_max_width (column, 0);
-
-      gtk_widget_set_sensitive (GTK_WIDGET (treeview), FALSE);
-
-      display_string = g_markup_printf_escaped ("<b>%s</b>\n",
-      /* Translators: No printers were found */
-                                                _("No printers detected."));
-
-      gtk_list_store_append (store, &iter);
-      gtk_list_store_set (store, &iter,
-                          DEVICE_DISPLAY_NAME_COLUMN, display_string,
-                          -1);
-
-      g_free (display_string);
-    }
-  else
-    {
-      if (priv->text_renderer)
-        gtk_cell_renderer_set_alignment (priv->text_renderer, 0.0, yalign);
-
-      if (column)
-        {
-          gtk_tree_view_column_set_max_width (column, -1);
-          gtk_tree_view_column_set_min_width (column, 80);
-        }
-      gtk_widget_set_sensitive (GTK_WIDGET (treeview), TRUE);
-    }
-
-  gtk_tree_view_set_model (treeview, GTK_TREE_MODEL (store));
-
-  if (!no_device &&
-      gtk_tree_model_get_iter_first ((GtkTreeModel *) store, &iter) &&
-      (selection = gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview))) != NULL)
-    gtk_tree_selection_select_iter (selection, &iter);
-
-  g_object_unref (store);
-  update_spinner_state (dialog);
-}
-
-static void
-cups_get_dests_cb (GObject      *source_object,
-                   GAsyncResult *res,
-                   gpointer      user_data)
-{
-  PpNewPrinterDialog        *dialog;
-  PpNewPrinterDialogPrivate *priv;
-  PpCupsDests               *dests;
-  PpCups                    *cups = (PpCups *) source_object;
-  GError                    *error = NULL;
-
-  dests = pp_cups_get_dests_finish (cups, res, &error);
-  g_object_unref (source_object);
-
-  if (dests)
-    {
-      dialog = PP_NEW_PRINTER_DIALOG (user_data);
-      priv = dialog->priv;
-
-      priv->dests = dests->dests;
-      priv->num_of_dests = dests->num_of_dests;
-
-      get_cups_devices (dialog);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        {
-          dialog = PP_NEW_PRINTER_DIALOG (user_data);
-
-          g_warning ("%s", error->message);
-
-          get_cups_devices (dialog);
-        }
-
-      g_error_free (error);
-    }
-}
-
-static void
-populate_devices_list (PpNewPrinterDialog *dialog)
-{
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  GtkTreeViewColumn         *column;
-  GtkWidget                 *treeview;
-  PpCups                    *cups;
-
-  treeview = (GtkWidget*)
-    gtk_builder_get_object (priv->builder, "devices-treeview");
-
-  g_signal_connect (gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)),
-                    "changed", G_CALLBACK (device_selection_changed_cb), dialog);
-
-  priv->icon_renderer = gtk_cell_renderer_pixbuf_new ();
-  g_object_set (priv->icon_renderer, "stock-size", GTK_ICON_SIZE_DIALOG, NULL);
-  gtk_cell_renderer_set_alignment (priv->icon_renderer, 1.0, 0.5);
-  gtk_cell_renderer_set_padding (priv->icon_renderer, 4, 4);
-  column = gtk_tree_view_column_new_with_attributes ("Icon", priv->icon_renderer,
-                                                     "icon-name", DEVICE_ICON_COLUMN, NULL);
-  gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-
-
-  priv->text_renderer = gtk_cell_renderer_text_new ();
-  column = gtk_tree_view_column_new_with_attributes ("Devices", priv->text_renderer,
-                                                     "markup", DEVICE_DISPLAY_NAME_COLUMN, NULL);
-  gtk_tree_view_append_column (GTK_TREE_VIEW (treeview), column);
-
-  cups = pp_cups_new ();
-  pp_cups_get_dests_async (cups, priv->cancellable, cups_get_dests_cb, dialog);
-}
-
-static void
-printer_add_async_cb (GObject      *source_object,
-                      GAsyncResult *res,
-                      gpointer      user_data)
-{
-  PpNewPrinterDialog        *dialog;
-  GtkResponseType            response_id = GTK_RESPONSE_OK;
-  PpNewPrinter              *new_printer = (PpNewPrinter *) source_object;
-  gboolean                   success;
-  GError                    *error = NULL;
-
-  success = pp_new_printer_add_finish (new_printer, res, &error);
-  g_object_unref (source_object);
-
-  if (success)
-    {
-      dialog = PP_NEW_PRINTER_DIALOG (user_data);
-
-      emit_response (dialog, response_id);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        {
-          dialog = PP_NEW_PRINTER_DIALOG (user_data);
-
-          g_warning ("%s", error->message);
-
-          response_id = GTK_RESPONSE_REJECT;
-
-          emit_response (dialog, response_id);
-        }
-
-      g_error_free (error);
-    }
-}
-
-static void
-new_printer_dialog_response_cb (GtkDialog *_dialog,
-                                gint       response_id,
-                                gpointer   user_data)
-{
-  PpNewPrinterDialog        *dialog = (PpNewPrinterDialog*) user_data;
-  PpNewPrinterDialogPrivate *priv = dialog->priv;
-  GtkTreeModel              *model;
-  GtkTreeIter                iter;
-  GtkWidget                 *treeview;
-  TDevice                   *device = NULL;
-  TDevice                   *tmp;
-  GList                     *list_iter;
-  gchar                     *device_name = NULL;
-
-  gtk_widget_hide (GTK_WIDGET (_dialog));
-
-  if (response_id == GTK_RESPONSE_OK)
-    {
-      g_cancellable_cancel (priv->cancellable);
-      g_clear_object (&priv->cancellable);
-
-      treeview = (GtkWidget*)
-        gtk_builder_get_object (priv->builder, "devices-treeview");
-
-      if (treeview &&
-          gtk_tree_selection_get_selected (
-            gtk_tree_view_get_selection (GTK_TREE_VIEW (treeview)), &model, &iter))
-        {
-          gtk_tree_model_get (model, &iter,
-                              DEVICE_NAME_COLUMN, &device_name,
-                              -1);
-        }
-
-      for (list_iter = priv->devices; list_iter; list_iter = list_iter->next)
-        {
-          tmp = (TDevice *) list_iter->data;
-          if (tmp && g_strcmp0 (tmp->device_name, device_name) == 0)
-            {
-              device = tmp;
-              break;
-            }
-        }
-
-      if (device)
-        {
-          PpNewPrinter *new_printer;
-          guint         window_id = 0;
-
-          emit_pre_response (dialog,
-                             device->device_name,
-                             device->device_location,
-                             device->device_make_and_model,
-                             device->network_device);
-
-#ifdef GDK_WINDOWING_X11
-          window_id = GDK_WINDOW_XID (gtk_widget_get_window (GTK_WIDGET (_dialog)));
-#endif
-
-          new_printer = pp_new_printer_new ();
-          g_object_set (new_printer,
-                        "name", device->device_name,
-                        "original-name""", device->device_original_name,
-                        "device-uri", device->device_uri,
-                        "device-id", device->device_id,
-                        "ppd-name", device->device_ppd,
-                        "ppd-file-name", device->device_ppd,
-                        "info", device->device_info,
-                        "location", device->device_location,
-                        "make-and-model", device->device_make_and_model,
-                        "host-name", device->host_name,
-                        "host-port", device->host_port,
-                        "is-network-device", device->network_device,
-                        "window-id", window_id,
-                        NULL);
-
-          priv->cancellable = g_cancellable_new ();
-
-          pp_new_printer_add_async (new_printer,
-                                    priv->cancellable,
-                                    printer_add_async_cb,
-                                    dialog);
-        }
-    }
-  else
-    {
-      emit_response (dialog, GTK_RESPONSE_CANCEL);
-    }
-}
diff --git a/panels/printers/pp-new-printer-dialog.h b/panels/printers/pp-new-printer-dialog.h
deleted file mode 100644
index fe00b3e..0000000
--- a/panels/printers/pp-new-printer-dialog.h
+++ /dev/null
@@ -1,64 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2009-2010  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#ifndef __PP_NEW_PRINTER_DIALOG_H__
-#define __PP_NEW_PRINTER_DIALOG_H__
-
-#include <gtk/gtk.h>
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_NEW_PRINTER_DIALOG            (pp_new_printer_dialog_get_type ())
-#define PP_NEW_PRINTER_DIALOG(object)         (G_TYPE_CHECK_INSTANCE_CAST ((object), PP_TYPE_NEW_PRINTER_DIALOG, PpNewPrinterDialog))
-#define PP_NEW_PRINTER_DIALOG_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), PP_TYPE_NEW_PRINTER_DIALOG, PpNewPrinterDialogClass))
-#define PP_IS_NEW_PRINTER_DIALOG(object)      (G_TYPE_CHECK_INSTANCE_TYPE ((object), PP_TYPE_NEW_PRINTER_DIALOG))
-#define PP_IS_NEW_PRINTER_DIALOG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), PP_TYPE_NEW_PRINTER_DIALOG))
-#define PP_NEW_PRINTER_DIALOG_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), PP_TYPE_NEW_PRINTER_DIALOG, PpNewPrinterDialogClass))
-
-typedef struct _PpNewPrinterDialog        PpNewPrinterDialog;
-typedef struct _PpNewPrinterDialogClass   PpNewPrinterDialogClass;
-typedef struct _PpNewPrinterDialogPrivate PpNewPrinterDialogPrivate;
-
-struct _PpNewPrinterDialog
-{
-  GObject                    parent_instance;
-  PpNewPrinterDialogPrivate *priv;
-};
-
-struct _PpNewPrinterDialogClass
-{
-  GObjectClass parent_class;
-
-  void (*pre_response)  (PpNewPrinterDialog *dialog,
-                         const gchar        *device_name,
-                         const gchar        *device_location,
-                         const gchar        *device_make_and_model,
-                         gboolean            is_network_device);
-
-  void (*response)      (PpNewPrinterDialog *dialog,
-                         gint                response_id);
-};
-
-GType               pp_new_printer_dialog_get_type (void) G_GNUC_CONST;
-PpNewPrinterDialog *pp_new_printer_dialog_new      (GtkWindow *parent);
-
-G_END_DECLS
-
-#endif /* __PP_NEW_PRINTER_DIALOG_H__ */
diff --git a/panels/printers/pp-new-printer.c b/panels/printers/pp-new-printer.c
deleted file mode 100644
index c76f1ac..0000000
--- a/panels/printers/pp-new-printer.c
+++ /dev/null
@@ -1,1442 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "pp-new-printer.h"
-
-#include <glib/gstdio.h>
-#include <glib/gi18n.h>
-
-#include "pp-utils.h"
-#include "pp-maintenance-command.h"
-
-#define PACKAGE_KIT_BUS "org.freedesktop.PackageKit"
-#define PACKAGE_KIT_PATH "/org/freedesktop/PackageKit"
-#define PACKAGE_KIT_MODIFY_IFACE "org.freedesktop.PackageKit.Modify"
-#define PACKAGE_KIT_QUERY_IFACE  "org.freedesktop.PackageKit.Query"
-
-#define DBUS_TIMEOUT      120000
-#define DBUS_TIMEOUT_LONG 600000
-
-#if (CUPS_VERSION_MAJOR > 1) || (CUPS_VERSION_MINOR > 5)
-#define HAVE_CUPS_1_6 1
-#endif
-
-#ifndef HAVE_CUPS_1_6
-#define ippGetState(ipp)      ipp->state
-#endif
-
-struct _PpNewPrinterPrivate
-{
-  gchar    *name;
-  gchar    *original_name;
-  gchar    *device_uri;
-  gchar    *device_id;
-  gchar    *ppd_name;
-  gchar    *ppd_file_name;
-  gchar    *info;
-  gchar    *location;
-  gchar    *make_and_model;
-  gchar    *host_name;
-  gint      host_port;
-  gboolean  is_network_device;
-  guint     window_id;
-  gboolean  unlink_ppd_file;
-
-  GSimpleAsyncResult *res;
-  GCancellable *cancellable;
-};
-
-G_DEFINE_TYPE (PpNewPrinter, pp_new_printer, G_TYPE_OBJECT);
-
-enum {
-  PROP_0 = 0,
-  PROP_NAME,
-  PROP_ORIGINAL_NAME,
-  PROP_DEVICE_URI,
-  PROP_DEVICE_ID,
-  PROP_PPD_NAME,
-  PROP_PPD_FILE_NAME,
-  PROP_INFO,
-  PROP_LOCATION,
-  PROP_MAKE_AND_MODEL,
-  PROP_HOST_NAME,
-  PROP_HOST_PORT,
-  PROP_IS_NETWORK_DEVICE,
-  PROP_WINDOW_ID
-};
-
-static void
-pp_new_printer_finalize (GObject *object)
-{
-  PpNewPrinterPrivate *priv;
-
-  priv = PP_NEW_PRINTER (object)->priv;
-
-  if (priv->unlink_ppd_file && priv->ppd_file_name)
-    g_unlink (priv->ppd_file_name);
-
-  g_clear_pointer (&priv->name, g_free);
-  g_clear_pointer (&priv->original_name, g_free);
-  g_clear_pointer (&priv->device_uri, g_free);
-  g_clear_pointer (&priv->device_id, g_free);
-  g_clear_pointer (&priv->ppd_name, g_free);
-  g_clear_pointer (&priv->ppd_file_name, g_free);
-  g_clear_pointer (&priv->info, g_free);
-  g_clear_pointer (&priv->location, g_free);
-  g_clear_pointer (&priv->make_and_model, g_free);
-  g_clear_pointer (&priv->host_name, g_free);
-
-  if (priv->res)
-    g_object_unref (priv->res);
-
-  if (priv->cancellable)
-    g_object_unref (priv->cancellable);
-
-  G_OBJECT_CLASS (pp_new_printer_parent_class)->finalize (object);
-}
-
-static void
-pp_new_printer_get_property (GObject    *object,
-                             guint       prop_id,
-                             GValue     *value,
-                             GParamSpec *param_spec)
-{
-  PpNewPrinter *self;
-
-  self = PP_NEW_PRINTER (object);
-
-  switch (prop_id)
-    {
-      case PROP_NAME:
-        g_value_set_string (value, self->priv->name);
-        break;
-      case PROP_ORIGINAL_NAME:
-        g_value_set_string (value, self->priv->original_name);
-        break;
-      case PROP_DEVICE_URI:
-        g_value_set_string (value, self->priv->device_uri);
-        break;
-      case PROP_DEVICE_ID:
-        g_value_set_string (value, self->priv->device_id);
-        break;
-      case PROP_PPD_NAME:
-        g_value_set_string (value, self->priv->ppd_name);
-        break;
-      case PROP_PPD_FILE_NAME:
-        g_value_set_string (value, self->priv->ppd_file_name);
-        break;
-      case PROP_INFO:
-        g_value_set_string (value, self->priv->info);
-        break;
-      case PROP_LOCATION:
-        g_value_set_string (value, self->priv->location);
-        break;
-      case PROP_MAKE_AND_MODEL:
-        g_value_set_string (value, self->priv->make_and_model);
-        break;
-      case PROP_HOST_NAME:
-        g_value_set_string (value, self->priv->host_name);
-        break;
-      case PROP_HOST_PORT:
-        g_value_set_int (value, self->priv->host_port);
-        break;
-      case PROP_IS_NETWORK_DEVICE:
-        g_value_set_boolean (value, self->priv->is_network_device);
-        break;
-      case PROP_WINDOW_ID:
-        g_value_set_int (value, self->priv->window_id);
-        break;
-      default:
-        G_OBJECT_WARN_INVALID_PROPERTY_ID (object,
-                                           prop_id,
-                                           param_spec);
-      break;
-    }
-}
-
-static void
-pp_new_printer_set_property (GObject      *object,
-                             guint         prop_id,
-                             const GValue *value,
-                             GParamSpec   *param_spec)
-{
-  PpNewPrinter *self = PP_NEW_PRINTER (object);
-
-  switch (prop_id)
-    {
-      case PROP_NAME:
-        g_free (self->priv->name);
-        self->priv->name = g_value_dup_string (value);
-        break;
-      case PROP_ORIGINAL_NAME:
-        g_free (self->priv->original_name);
-        self->priv->original_name = g_value_dup_string (value);
-        break;
-      case PROP_DEVICE_URI:
-        g_free (self->priv->device_uri);
-        self->priv->device_uri = g_value_dup_string (value);
-        break;
-      case PROP_DEVICE_ID:
-        g_free (self->priv->device_id);
-        self->priv->device_id = g_value_dup_string (value);
-        break;
-      case PROP_PPD_NAME:
-        g_free (self->priv->ppd_name);
-        self->priv->ppd_name = g_value_dup_string (value);
-        break;
-      case PROP_PPD_FILE_NAME:
-        g_free (self->priv->ppd_file_name);
-        self->priv->ppd_file_name = g_value_dup_string (value);
-        break;
-      case PROP_INFO:
-        g_free (self->priv->info);
-        self->priv->info = g_value_dup_string (value);
-        break;
-      case PROP_LOCATION:
-        g_free (self->priv->location);
-        self->priv->location = g_value_dup_string (value);
-        break;
-      case PROP_MAKE_AND_MODEL:
-        g_free (self->priv->make_and_model);
-        self->priv->make_and_model = g_value_dup_string (value);
-        break;
-      case PROP_HOST_NAME:
-        g_free (self->priv->host_name);
-        self->priv->host_name = g_value_dup_string (value);
-        break;
-      case PROP_HOST_PORT:
-        self->priv->host_port = g_value_get_int (value);
-        break;
-      case PROP_IS_NETWORK_DEVICE:
-        self->priv->is_network_device = g_value_get_boolean (value);
-        break;
-      case PROP_WINDOW_ID:
-        self->priv->window_id = g_value_get_int (value);
-        break;
-      default:
-        G_OBJECT_WARN_INVALID_PROPERTY_ID (object,
-                                           prop_id,
-                                           param_spec);
-        break;
-    }
-}
-
-static void
-pp_new_printer_class_init (PpNewPrinterClass *klass)
-{
-  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
-
-  g_type_class_add_private (klass, sizeof (PpNewPrinterPrivate));
-
-  gobject_class->set_property = pp_new_printer_set_property;
-  gobject_class->get_property = pp_new_printer_get_property;
-
-  gobject_class->finalize = pp_new_printer_finalize;
-
-  g_object_class_install_property (gobject_class, PROP_NAME,
-    g_param_spec_string ("name",
-                         "Name",
-                         "The new printer's name",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_ORIGINAL_NAME,
-    g_param_spec_string ("original-name",
-                         "Original name",
-                         "Original name of the new printer",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_DEVICE_URI,
-    g_param_spec_string ("device-uri",
-                         "Device URI",
-                         "The new printer's device URI",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_DEVICE_ID,
-    g_param_spec_string ("device-id",
-                         "DeviceID",
-                         "The new printer's DeviceID",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_PPD_NAME,
-    g_param_spec_string ("ppd-name",
-                         "PPD name",
-                         "Name of PPD for the new printer",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_PPD_FILE_NAME,
-    g_param_spec_string ("ppd-file-name",
-                         "PPD file name",
-                         "PPD file for the new printer",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_INFO,
-    g_param_spec_string ("info",
-                         "Printer info",
-                         "The new printer's info",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_LOCATION,
-    g_param_spec_string ("location",
-                         "Printer location",
-                         "The new printer's location",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_MAKE_AND_MODEL,
-    g_param_spec_string ("make-and-model",
-                         "Printer make and model",
-                         "The new printer's make and model",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_HOST_NAME,
-    g_param_spec_string ("host-name",
-                         "Hostname",
-                         "The new printer's hostname",
-                         NULL,
-                         G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_HOST_PORT,
-    g_param_spec_int ("host-port",
-                      "Host port",
-                      "The port of the host",
-                      0, G_MAXINT32, 631,
-                      G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_IS_NETWORK_DEVICE,
-    g_param_spec_boolean ("is-network-device",
-                          "Network device",
-                          "Whether the new printer is a network device",
-                          FALSE,
-                          G_PARAM_READWRITE));
-
-  g_object_class_install_property (gobject_class, PROP_WINDOW_ID,
-    g_param_spec_int ("window-id",
-                      "WindowID",
-                      "Window ID of parent window",
-                      0, G_MAXINT32, 631,
-                      G_PARAM_READWRITE));
-}
-
-static void
-pp_new_printer_init (PpNewPrinter *printer)
-{
-  printer->priv = G_TYPE_INSTANCE_GET_PRIVATE (printer,
-                                               PP_TYPE_NEW_PRINTER,
-                                               PpNewPrinterPrivate);
-
-  printer->priv->unlink_ppd_file = FALSE;
-  printer->priv->cancellable = NULL;
-  printer->priv->res = NULL;
-}
-
-PpNewPrinter *
-pp_new_printer_new ()
-{
-  return g_object_new (PP_TYPE_NEW_PRINTER, NULL);
-}
-
-static void printer_configure_async (PpNewPrinter *new_printer);
-
-static void
-_pp_new_printer_add_async_cb (gboolean      success,
-                              PpNewPrinter *printer)
-{
-  PpNewPrinterPrivate *priv = printer->priv;
-
-  if (!success)
-    {
-      g_simple_async_result_set_error (priv->res,
-                                       G_IO_ERROR,
-                                       G_IO_ERROR_FAILED,
-                                       "Installation of the new printer failed.");
-    }
-
-  g_simple_async_result_set_op_res_gboolean (priv->res, success);
-  g_simple_async_result_complete_in_idle (priv->res);
-}
-
-static void
-printer_add_real_async_cb (cups_dest_t *destination,
-                           gpointer     user_data)
-{
-  PpNewPrinter        *printer = (PpNewPrinter *) user_data;
-  gboolean             success = FALSE;
-
-  if (destination)
-    {
-      success = TRUE;
-      cupsFreeDests (1, destination);
-    }
-
-  if (success)
-    {
-      printer_configure_async (printer);
-    }
-  else
-    {
-      _pp_new_printer_add_async_cb (FALSE, printer);
-    }
-}
-
-static void
-printer_add_real_async_dbus_cb (GObject      *source_object,
-                                GAsyncResult *res,
-                                gpointer      user_data)
-{
-  PpNewPrinter        *printer = (PpNewPrinter *) user_data;
-  PpNewPrinterPrivate *priv = printer->priv;
-  GVariant            *output;
-  GError              *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        {
-          g_warning ("cups-pk-helper: addition of printer %s failed: %s", priv->name, ret_error);
-        }
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-    }
-
-  if (!error ||
-      error->domain != G_IO_ERROR ||
-      error->code != G_IO_ERROR_CANCELLED)
-    {
-      get_named_dest_async (priv->name,
-                            printer_add_real_async_cb,
-                            printer);
-    }
-
-  if (error)
-      g_error_free (error);
-}
-
-static void
-printer_add_real_async (PpNewPrinter *printer)
-{
-  PpNewPrinterPrivate *priv = printer->priv;
-  GDBusConnection     *bus;
-  GError              *error = NULL;
-
-  if (!priv->ppd_name && !priv->ppd_file_name)
-    {
-      _pp_new_printer_add_async_cb (FALSE, printer);
-      return;
-    }
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get system bus: %s", error->message);
-      g_error_free (error);
-      _pp_new_printer_add_async_cb (FALSE, printer);
-      return;
-    }
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          priv->ppd_name ? "PrinterAdd" : "PrinterAddWithPpdFile",
-                          g_variant_new ("(sssss)",
-                                         priv->name,
-                                         priv->device_uri,
-                                         priv->ppd_name ? priv->ppd_name : priv->ppd_file_name,
-                                         priv->info ? priv->info : "",
-                                         priv->location ? priv->location : ""),
-                          G_VARIANT_TYPE ("(s)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          DBUS_TIMEOUT,
-                          NULL,
-                          printer_add_real_async_dbus_cb,
-                          printer);
-}
-
-static PPDName *
-get_ppd_item_from_output (GVariant *output)
-{
-  GVariant *array;
-  PPDName  *ppd_item = NULL;
-  gint      j;
-  static const char * const match_levels[] = {
-             "exact-cmd",
-             "exact",
-             "close",
-             "generic",
-             "none"};
-
-  if (output)
-    {
-      g_variant_get (output, "(@a(ss))", &array);
-      if (array)
-        {
-          GVariantIter *iter;
-          GVariant     *item;
-          gchar        *driver;
-          gchar        *match;
-
-          for (j = 0; j < G_N_ELEMENTS (match_levels) && !ppd_item; j++)
-            {
-              g_variant_get (array, "a(ss)", &iter);
-              while ((item = g_variant_iter_next_value (iter)) && !ppd_item)
-                {
-                  g_variant_get (item, "(ss)", &driver, &match);
-                  if (g_str_equal (match, match_levels[j]))
-                    {
-                      ppd_item = g_new0 (PPDName, 1);
-                      ppd_item->ppd_name = g_strdup (driver);
-
-                      if (g_strcmp0 (match, "exact-cmd") == 0)
-                        ppd_item->ppd_match_level = PPD_EXACT_CMD_MATCH;
-                      else if (g_strcmp0 (match, "exact") == 0)
-                        ppd_item->ppd_match_level = PPD_EXACT_MATCH;
-                      else if (g_strcmp0 (match, "close") == 0)
-                        ppd_item->ppd_match_level = PPD_CLOSE_MATCH;
-                      else if (g_strcmp0 (match, "generic") == 0)
-                        ppd_item->ppd_match_level = PPD_GENERIC_MATCH;
-                      else if (g_strcmp0 (match, "none") == 0)
-                        ppd_item->ppd_match_level = PPD_NO_MATCH;
-                    }
-
-                  g_free (driver);
-                  g_free (match);
-                  g_variant_unref (item);
-                }
-            }
-
-          g_variant_unref (array);
-        }
-    }
-
-  return ppd_item;
-}
-
-
-static void
-printer_add_async_scb3 (GObject      *source_object,
-                        GAsyncResult *res,
-                        gpointer      user_data)
-{
-  PpNewPrinter        *printer = (PpNewPrinter *) user_data;
-  PpNewPrinterPrivate *priv = printer->priv;
-  GVariant            *output;
-  PPDName             *ppd_item = NULL;
-  GError              *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      ppd_item = get_ppd_item_from_output (output);
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-    }
-
-  if ((!error ||
-      error->domain != G_IO_ERROR ||
-      error->code != G_IO_ERROR_CANCELLED) &&
-      ppd_item && ppd_item->ppd_name)
-    {
-      priv->ppd_name = g_strdup (ppd_item->ppd_name);
-      printer_add_real_async (printer);
-    }
-  else
-    {
-      _pp_new_printer_add_async_cb (FALSE, printer);
-    }
-
-  if (error)
-    {
-      g_error_free (error);
-    }
-
-  if (ppd_item)
-    {
-      g_free (ppd_item->ppd_name);
-      g_free (ppd_item);
-    }
-}
-
-static void
-install_printer_drivers_cb (GObject      *source_object,
-                            GAsyncResult *res,
-                            gpointer      user_data)
-{
-  PpNewPrinterPrivate *priv;
-  PpNewPrinter        *printer;
-  GVariant            *output;
-  GError              *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-    }
-
-  if (!error ||
-      error->domain != G_IO_ERROR ||
-      error->code != G_IO_ERROR_CANCELLED)
-    {
-      GDBusConnection *bus;
-      GError          *error = NULL;
-
-      printer = (PpNewPrinter *) user_data;
-      priv = printer->priv;
-
-      /* Try whether CUPS has a driver for the new printer */
-      bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
-      if (bus)
-        {
-          g_dbus_connection_call (bus,
-                                  SCP_BUS,
-                                  SCP_PATH,
-                                  SCP_IFACE,
-                                  "GetBestDrivers",
-                                  g_variant_new ("(sss)",
-                                                 priv->device_id,
-                                                 priv->make_and_model ? priv->make_and_model : "",
-                                                 priv->device_uri ? priv->device_uri : ""),
-                                  G_VARIANT_TYPE ("(a(ss))"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  DBUS_TIMEOUT_LONG,
-                                  priv->cancellable,
-                                  printer_add_async_scb3,
-                                  printer);
-        }
-      else
-        {
-          g_warning ("Failed to get system bus: %s", error->message);
-          g_error_free (error);
-          _pp_new_printer_add_async_cb (FALSE, printer);
-        }
-    }
-
-  if (error)
-    g_error_free (error);
-}
-
-static void
-printer_add_async_scb (GObject      *source_object,
-                       GAsyncResult *res,
-                       gpointer      user_data)
-{
-  PpNewPrinter        *printer = (PpNewPrinter *) user_data;
-  PpNewPrinterPrivate *priv = printer->priv;
-  GDBusConnection     *bus;
-  GVariantBuilder      array_builder;
-  GVariant            *output;
-  gboolean             cancelled = FALSE;
-  PPDName             *ppd_item = NULL;
-  GError              *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      ppd_item = get_ppd_item_from_output (output);
-      g_variant_unref (output);
-    }
-  else
-    {
-      cancelled = g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED);
-
-      if (!cancelled)
-        g_warning ("%s", error->message);
-
-      g_clear_error (&error);
-    }
-
-  if (!cancelled)
-    {
-      if (ppd_item == NULL || ppd_item->ppd_match_level < PPD_EXACT_MATCH)
-        {
-          bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
-          if (bus)
-            {
-              g_variant_builder_init (&array_builder, G_VARIANT_TYPE ("as"));
-              g_variant_builder_add (&array_builder, "s", priv->device_id);
-
-              g_dbus_connection_call (bus,
-                                      PACKAGE_KIT_BUS,
-                                      PACKAGE_KIT_PATH,
-                                      PACKAGE_KIT_MODIFY_IFACE,
-                                      "InstallPrinterDrivers",
-                                      g_variant_new ("(uass)",
-                                                     priv->window_id,
-                                                     &array_builder,
-                                                     "hide-finished"),
-                                      G_VARIANT_TYPE ("()"),
-                                      G_DBUS_CALL_FLAGS_NONE,
-                                      DBUS_TIMEOUT_LONG,
-                                      NULL,
-                                      install_printer_drivers_cb,
-                                      printer);
-            }
-          else
-            {
-              g_warning ("Failed to get session bus: %s", error->message);
-              g_error_free (error);
-              _pp_new_printer_add_async_cb (FALSE, printer);
-            }
-        }
-      else if (ppd_item && ppd_item->ppd_name)
-        {
-          priv->ppd_name = g_strdup (ppd_item->ppd_name);
-          printer_add_real_async (printer);
-        }
-      else
-        {
-          _pp_new_printer_add_async_cb (FALSE, printer);
-        }
-    }
-
-  if (ppd_item)
-    {
-      g_free (ppd_item->ppd_name);
-      g_free (ppd_item);
-    }
-}
-
-static void
-printer_add_async_scb4 (const gchar *ppd_filename,
-                        gpointer     user_data)
-{
-  PpNewPrinter        *printer = (PpNewPrinter *) user_data;
-  PpNewPrinterPrivate *priv = printer->priv;
-
-  priv->ppd_file_name = g_strdup (ppd_filename);
-  if (priv->ppd_file_name)
-    {
-      priv->unlink_ppd_file = TRUE;
-      printer_add_real_async (printer);
-    }
-  else
-    {
-      _pp_new_printer_add_async_cb (FALSE, printer);
-    }
-}
-
-static GList *
-glist_uniq (GList *list)
-{
-  GList *result = NULL;
-  GList *iter = NULL;
-  GList *tmp = NULL;
-
-  for (iter = list; iter; iter = iter->next)
-    {
-      if (tmp == NULL ||
-          g_strcmp0 ((gchar *) tmp->data, (gchar *) iter->data) != 0)
-        {
-          tmp = iter;
-          result = g_list_append (result, g_strdup (iter->data));
-        }
-    }
-
-  g_list_free_full (list, g_free);
-
-  return result;
-}
-
-typedef struct
-{
-  PpNewPrinter *new_printer;
-  GCancellable *cancellable;
-  gboolean      set_accept_jobs_finished;
-  gboolean      set_enabled_finished;
-  gboolean      autoconfigure_finished;
-  gboolean      set_media_size_finished;
-  gboolean      install_missing_executables_finished;
-} PCData;
-
-static void
-printer_configure_async_finish (PCData *data)
-{
-  PpNewPrinterPrivate *priv = data->new_printer->priv;
-
-  if (data->set_accept_jobs_finished &&
-      data->set_enabled_finished &&
-      (data->autoconfigure_finished || priv->is_network_device) &&
-      data->set_media_size_finished &&
-      data->install_missing_executables_finished)
-    {
-      _pp_new_printer_add_async_cb (TRUE, data->new_printer);
-
-      if (data->cancellable)
-        g_object_unref (data->cancellable);
-      g_free (data);
-    }
-}
-
-static void
-pao_cb (gboolean success,
-        gpointer user_data)
-{
-  PCData *data = (PCData *) user_data;
-
-  data->set_media_size_finished = TRUE;
-  printer_configure_async_finish (data);
-}
-
-static void
-printer_set_accepting_jobs_cb (GObject      *source_object,
-                               GAsyncResult *res,
-                               gpointer      user_data)
-{
-  GVariant *output;
-  PCData   *data = (PCData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  data->set_accept_jobs_finished = TRUE;
-  printer_configure_async_finish (data);
-}
-
-static void
-printer_set_enabled_cb (GObject      *source_object,
-                        GAsyncResult *res,
-                        gpointer      user_data)
-{
-  GVariant *output;
-  PCData   *data = (PCData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  data->set_enabled_finished = TRUE;
-  printer_configure_async_finish (data);
-}
-
-typedef struct
-{
-  GList        *executables;
-  GList        *packages;
-  guint         window_id;
-  gchar        *ppd_file_name;
-  GCancellable *cancellable;
-  gpointer      user_data;
-} IMEData;
-
-static void
-install_missing_executables_cb (IMEData *data)
-{
-  PCData *pc_data = (PCData *) data->user_data;
-
-  pc_data->install_missing_executables_finished = TRUE;
-  printer_configure_async_finish (pc_data);
-
-  if (data->ppd_file_name)
-    {
-      g_unlink (data->ppd_file_name);
-      g_clear_pointer (&data->ppd_file_name, g_free);
-    }
-
-  if (data->executables)
-    {
-      g_list_free_full (data->executables, g_free);
-      data->executables = NULL;
-    }
-
-  if (data->packages)
-    {
-      g_list_free_full (data->packages, g_free);
-      data->packages = NULL;
-    }
-
-  if (data->cancellable)
-    g_clear_object (&data->cancellable);
-
-  g_free (data);
-}
-
-static void
-install_package_names_cb (GObject      *source_object,
-                          GAsyncResult *res,
-                          gpointer      user_data)
-{
-  GVariant *output;
-  IMEData  *data = (IMEData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  install_missing_executables_cb (data);
-}
-
-
-static void
-search_files_cb (GObject      *source_object,
-                 GAsyncResult *res,
-                 gpointer      user_data)
-{
-  GVariant *output;
-  IMEData  *data = (IMEData *) user_data;
-  GError   *error = NULL;
-  GList    *item;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  if (output)
-    {
-      gboolean  installed;
-      gchar    *package;
-
-      g_variant_get (output,
-                     "(bs)",
-                     &installed,
-                     &package);
-
-      if (!installed)
-        data->packages = g_list_append (data->packages, g_strdup (package));
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  if (data->executables)
-    {
-      item = data->executables;
-      g_dbus_connection_call (G_DBUS_CONNECTION (source_object),
-                              PACKAGE_KIT_BUS,
-                              PACKAGE_KIT_PATH,
-                              PACKAGE_KIT_QUERY_IFACE,
-                              "SearchFile",
-                              g_variant_new ("(ss)",
-                                             (gchar *) item->data,
-                                             ""),
-                              G_VARIANT_TYPE ("(bs)"),
-                              G_DBUS_CALL_FLAGS_NONE,
-                              DBUS_TIMEOUT_LONG,
-                              data->cancellable,
-                              search_files_cb,
-                              data);
-
-      data->executables = g_list_remove_link (data->executables, item);
-      g_list_free_full (item, g_free);
-    }
-  else
-    {
-      GVariantBuilder  array_builder;
-      GList           *pkg_iter;
-
-      data->packages = g_list_sort (data->packages, (GCompareFunc) g_strcmp0);
-      data->packages = glist_uniq (data->packages);
-
-      if (data->packages)
-        {
-          g_variant_builder_init (&array_builder, G_VARIANT_TYPE ("as"));
-
-          for (pkg_iter = data->packages; pkg_iter; pkg_iter = pkg_iter->next)
-            g_variant_builder_add (&array_builder,
-                                   "s",
-                                   (gchar *) pkg_iter->data);
-
-          g_dbus_connection_call (G_DBUS_CONNECTION (source_object),
-                                  PACKAGE_KIT_BUS,
-                                  PACKAGE_KIT_PATH,
-                                  PACKAGE_KIT_MODIFY_IFACE,
-                                  "InstallPackageNames",
-                                  g_variant_new ("(uass)",
-                                                 data->window_id,
-                                                 &array_builder,
-                                                 "hide-finished"),
-                                  NULL,
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  DBUS_TIMEOUT_LONG,
-                                  data->cancellable,
-                                  install_package_names_cb,
-                                  data);
-
-          g_list_free_full (data->packages, g_free);
-          data->packages = NULL;
-        }
-      else
-        {
-          g_object_unref (source_object);
-          install_missing_executables_cb (data);
-        }
-    }
-}
-
-static void
-get_missing_executables_cb (GObject      *source_object,
-                            GAsyncResult *res,
-                            gpointer      user_data)
-{
-  GVariant *output;
-  IMEData  *data = (IMEData *) user_data;
-  GError   *error = NULL;
-  GList    *executables = NULL;
-  GList    *item;
-
-  if (data->ppd_file_name)
-    {
-      g_unlink (data->ppd_file_name);
-      g_clear_pointer (&data->ppd_file_name, g_free);
-    }
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-
-  if (output)
-    {
-      GVariant *array;
-
-      g_variant_get (output, "(@as)", &array);
-
-      if (array)
-        {
-          GVariantIter *iter;
-          GVariant     *item;
-          gchar        *executable;
-
-          g_variant_get (array, "as", &iter);
-          while ((item = g_variant_iter_next_value (iter)))
-            {
-              g_variant_get (item, "s", &executable);
-              executables = g_list_append (executables, executable);
-              g_variant_unref (item);
-            }
-
-          g_variant_unref (array);
-        }
-
-      g_variant_unref (output);
-    }
-  else if (error->domain == G_DBUS_ERROR &&
-           (error->code == G_DBUS_ERROR_SERVICE_UNKNOWN ||
-            error->code == G_DBUS_ERROR_UNKNOWN_METHOD))
-    {
-      g_warning ("Install system-config-printer which provides \
-DBus method \"MissingExecutables\" to find missing executables and filters.");
-      g_error_free (error);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  executables = g_list_sort (executables, (GCompareFunc) g_strcmp0);
-  executables = glist_uniq (executables);
-
-  if (executables)
-    {
-      data->executables = executables;
-
-      item = data->executables;
-      g_dbus_connection_call (g_object_ref (source_object),
-                              PACKAGE_KIT_BUS,
-                              PACKAGE_KIT_PATH,
-                              PACKAGE_KIT_QUERY_IFACE,
-                              "SearchFile",
-                              g_variant_new ("(ss)",
-                                             (gchar *) item->data,
-                                             ""),
-                              G_VARIANT_TYPE ("(bs)"),
-                              G_DBUS_CALL_FLAGS_NONE,
-                              DBUS_TIMEOUT_LONG,
-                              data->cancellable,
-                              search_files_cb,
-                              data);
-
-      data->executables = g_list_remove_link (data->executables, item);
-      g_list_free_full (item, g_free);
-    }
-  else
-    {
-      g_object_unref (source_object);
-      install_missing_executables_cb (data);
-    }
-}
-
-static void
-printer_get_ppd_cb (const gchar *ppd_filename,
-                    gpointer     user_data)
-{
-  GDBusConnection *bus;
-  IMEData         *data = (IMEData *) user_data;
-  GError          *error = NULL;
-
-  data->ppd_file_name = g_strdup (ppd_filename);
-  if (data->ppd_file_name)
-    {
-      bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
-      if (!bus)
-        {
-          g_warning ("%s", error->message);
-          g_error_free (error);
-        }
-      else
-        {
-          g_dbus_connection_call (bus,
-                                  SCP_BUS,
-                                  SCP_PATH,
-                                  SCP_IFACE,
-                                  "MissingExecutables",
-                                  g_variant_new ("(s)", data->ppd_file_name),
-                                  G_VARIANT_TYPE ("(as)"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  DBUS_TIMEOUT,
-                                  data->cancellable,
-                                  get_missing_executables_cb,
-                                  data);
-          return;
-        }
-    }
-
-  install_missing_executables_cb (data);
-}
-
-static void
-pp_maintenance_command_execute_cb (GObject      *source_object,
-                                   GAsyncResult *res,
-                                   gpointer      user_data)
-{
-  PpMaintenanceCommand *command = (PpMaintenanceCommand *) source_object;
-  GError               *error = NULL;
-  PCData               *data;
-  gboolean              result;
-
-  result = pp_maintenance_command_execute_finish (command, res, &error);
-  g_object_unref (source_object);
-
-  if (result)
-    {
-      data = (PCData *) user_data;
-
-      data->autoconfigure_finished = TRUE;
-      printer_configure_async_finish (data);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        {
-          data = (PCData *) user_data;
-
-          g_warning ("%s", error->message);
-
-          data->autoconfigure_finished = TRUE;
-          printer_configure_async_finish (data);
-        }
-
-      g_error_free (error);
-    }
-}
-
-static void
-printer_configure_async (PpNewPrinter *new_printer)
-{
-  PpNewPrinterPrivate  *priv = new_printer->priv;
-  GDBusConnection      *bus;
-  PCData               *data;
-  IMEData              *ime_data;
-  gchar               **values;
-  GError               *error = NULL;
-
-  data = g_new0 (PCData, 1);
-  data->new_printer = new_printer;
-  data->set_accept_jobs_finished = FALSE;
-  data->set_enabled_finished = FALSE;
-  data->autoconfigure_finished = FALSE;
-  data->set_media_size_finished = FALSE;
-  data->install_missing_executables_finished = FALSE;
-
-  /* Enable printer and make it accept jobs */
-  if (priv->name)
-    {
-      bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-      if (bus)
-        {
-          g_dbus_connection_call (bus,
-                                  MECHANISM_BUS,
-                                  "/",
-                                  MECHANISM_BUS,
-                                  "PrinterSetAcceptJobs",
-                                  g_variant_new ("(sbs)",
-                                                 priv->name,
-                                                 TRUE,
-                                                 ""),
-                                  G_VARIANT_TYPE ("(s)"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  -1,
-                                  NULL,
-                                  printer_set_accepting_jobs_cb,
-                                  data);
-
-          g_dbus_connection_call (g_object_ref (bus),
-                                  MECHANISM_BUS,
-                                  "/",
-                                  MECHANISM_BUS,
-                                  "PrinterSetEnabled",
-                                  g_variant_new ("(sb)",
-                                                 priv->name,
-                                                 TRUE),
-                                  G_VARIANT_TYPE ("(s)"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  -1,
-                                  NULL,
-                                  printer_set_enabled_cb,
-                                  data);
-        }
-      else
-        {
-          g_warning ("Failed to get system bus: %s", error->message);
-          g_error_free (error);
-          data->set_accept_jobs_finished = TRUE;
-          data->set_enabled_finished = TRUE;
-        }
-    }
-  else
-    {
-      data->set_accept_jobs_finished = TRUE;
-      data->set_enabled_finished = TRUE;
-    }
-
-  /* Run autoconfiguration of printer */
-  if (!priv->is_network_device)
-    {
-      PpMaintenanceCommand *command;
-      command = pp_maintenance_command_new (priv->name,
-                                            "autoconfigure",
-      /* Translators: Name of job which makes printer to autoconfigure itself */
-                                            _("Automatic configuration"));
-
-      pp_maintenance_command_execute_async (command,
-                                            NULL,
-                                            pp_maintenance_command_execute_cb,
-                                            data);
-    }
-
-  /* Set media size for printer */
-  values = g_new0 (gchar *, 2);
-  values[0] = g_strdup (get_paper_size_from_locale ());
-
-  printer_add_option_async (priv->name, "media", values, TRUE, NULL, pao_cb, data);
-
-  g_strfreev (values);
-
-  /* Install missing executables for printer */
-  ime_data = g_new0 (IMEData, 1);
-  ime_data->window_id = priv->window_id;
-  if (data->cancellable)
-    ime_data->cancellable = g_object_ref (data->cancellable);
-  ime_data->user_data = data;
-
-  printer_get_ppd_async (priv->name,
-                         NULL,
-                         0,
-                         printer_get_ppd_cb,
-                         ime_data);
-}
-
-static void
-_pp_new_printer_add_async (GSimpleAsyncResult *res,
-                           GObject            *object,
-                           GCancellable       *cancellable)
-{
-  PpNewPrinter        *printer = PP_NEW_PRINTER (object);
-  PpNewPrinterPrivate *priv = printer->priv;
-
-  priv->res = g_object_ref (res);
-  priv->cancellable = g_object_ref (cancellable);
-
-  if (priv->ppd_name || priv->ppd_file_name)
-    {
-      /* We have everything we need */
-      printer_add_real_async (printer);
-    }
-  else if (priv->device_id)
-    {
-      GDBusConnection *bus;
-      GError          *error = NULL;
-
-      /* Try whether CUPS has a driver for the new printer */
-      bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
-      if (bus)
-        {
-          g_dbus_connection_call (bus,
-                                  SCP_BUS,
-                                  SCP_PATH,
-                                  SCP_IFACE,
-                                  "GetBestDrivers",
-                                  g_variant_new ("(sss)",
-                                                 priv->device_id,
-                                                 priv->make_and_model ? priv->make_and_model : "",
-                                                 priv->device_uri ? priv->device_uri : ""),
-                                  G_VARIANT_TYPE ("(a(ss))"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  DBUS_TIMEOUT_LONG,
-                                  cancellable,
-                                  printer_add_async_scb,
-                                  printer);
-        }
-      else
-        {
-          g_warning ("Failed to get system bus: %s", error->message);
-          g_error_free (error);
-          _pp_new_printer_add_async_cb (FALSE, printer);
-        }
-    }
-  else if (priv->original_name && priv->host_name)
-    {
-      /* Try to get PPD from remote CUPS */
-      printer_get_ppd_async (priv->original_name,
-                             priv->host_name,
-                             priv->host_port,
-                             printer_add_async_scb4,
-                             printer);
-    }
-  else
-    {
-      _pp_new_printer_add_async_cb (FALSE, printer);
-    }
-}
-
-void
-pp_new_printer_add_async (PpNewPrinter        *printer,
-                          GCancellable        *cancellable,
-                          GAsyncReadyCallback  callback,
-                          gpointer             user_data)
-{
-  GSimpleAsyncResult *res;
-
-  res = g_simple_async_result_new (G_OBJECT (printer), callback, user_data, pp_new_printer_add_async);
-
-  g_simple_async_result_set_check_cancellable (res, cancellable);
-  _pp_new_printer_add_async (res, G_OBJECT (printer), cancellable);
-
-  g_object_unref (res);
-}
-
-gboolean
-pp_new_printer_add_finish (PpNewPrinter  *printer,
-                           GAsyncResult  *res,
-                           GError       **error)
-{
-  GSimpleAsyncResult *simple = G_SIMPLE_ASYNC_RESULT (res);
-
-  g_warn_if_fail (g_simple_async_result_get_source_tag (simple) == pp_new_printer_add_async);
-
-  if (g_simple_async_result_propagate_error (simple, error))
-    return FALSE;
-
-  return g_simple_async_result_get_op_res_gboolean (simple);
-}
diff --git a/panels/printers/pp-new-printer.h b/panels/printers/pp-new-printer.h
deleted file mode 100644
index 0bc86f3..0000000
--- a/panels/printers/pp-new-printer.h
+++ /dev/null
@@ -1,66 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_NEW_PRINTER_H__
-#define __PP_NEW_PRINTER_H__
-
-#include <glib-object.h>
-#include <gio/gio.h>
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_NEW_PRINTER         (pp_new_printer_get_type ())
-#define PP_NEW_PRINTER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), PP_TYPE_NEW_PRINTER, PpNewPrinter))
-#define PP_NEW_PRINTER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST((k), PP_TYPE_NEW_PRINTER, PpNewPrinterClass))
-#define PP_IS_NEW_PRINTER(o)        (G_TYPE_CHECK_INSTANCE_TYPE ((o), PP_TYPE_NEW_PRINTER))
-#define PP_IS_NEW_PRINTER_CLASS(k)  (G_TYPE_CHECK_CLASS_TYPE ((k), PP_TYPE_NEW_PRINTER))
-#define PP_NEW_PRINTER_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), PP_TYPE_NEW_PRINTER, PpNewPrinterClass))
-
-typedef struct _PpNewPrinter        PpNewPrinter;
-typedef struct _PpNewPrinterClass   PpNewPrinterClass;
-typedef struct _PpNewPrinterPrivate PpNewPrinterPrivate;
-
-struct _PpNewPrinter
-{
-  GObject              parent_instance;
-  PpNewPrinterPrivate *priv;
-};
-
-struct _PpNewPrinterClass
-{
-  GObjectClass parent_class;
-};
-
-GType         pp_new_printer_get_type   (void) G_GNUC_CONST;
-PpNewPrinter *pp_new_printer_new        (void);
-
-void          pp_new_printer_add_async  (PpNewPrinter         *host,
-                                         GCancellable         *cancellable,
-                                         GAsyncReadyCallback   callback,
-                                         gpointer              user_data);
-
-gboolean      pp_new_printer_add_finish (PpNewPrinter         *host,
-                                         GAsyncResult         *result,
-                                         GError              **error);
-
-G_END_DECLS
-
-#endif /* __PP_NEW_PRINTER_H__ */
diff --git a/panels/printers/pp-options-dialog.c b/panels/printers/pp-options-dialog.c
deleted file mode 100644
index 0cd4d6b..0000000
--- a/panels/printers/pp-options-dialog.c
+++ /dev/null
@@ -1,986 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "config.h"
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <sys/types.h>
-#include <sys/wait.h>
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <glib/gstdio.h>
-#include <gtk/gtk.h>
-
-#include <cups/cups.h>
-#include <cups/ppd.h>
-
-#include "pp-options-dialog.h"
-#include "pp-ppd-option-widget.h"
-#include "pp-ipp-option-widget.h"
-#include "pp-utils.h"
-
-struct _PpOptionsDialog {
-  GtkBuilder *builder;
-  GtkWidget  *parent;
-
-  GtkWidget  *dialog;
-
-  UserResponseCallback user_callback;
-  gpointer             user_data;
-
-  gchar       *printer_name;
-
-  gchar       *ppd_filename;
-  gboolean     ppd_filename_set;
-
-  cups_dest_t *destination;
-  gboolean     destination_set;
-
-  GHashTable  *ipp_attributes;
-  gboolean     ipp_attributes_set;
-
-  gboolean     populating_dialog;
-
-  GtkResponseType response;
-
-  gboolean sensitive;
-};
-
-static void pp_options_dialog_hide (PpOptionsDialog *dialog);
-
-enum
-{
-  CATEGORY_IDS_COLUMN = 0,
-  CATEGORY_NAMES_COLUMN
-};
-
-/* These lists come from Gtk+ */
-static const struct {
-  const char *keyword;
-  const char *translation;
-} ppd_option_translations[] = {
-  { "Duplex", N_("Two Sided") },
-  { "MediaType", N_("Paper Type") },
-  { "InputSlot", N_("Paper Source") },
-  { "OutputBin", N_("Output Tray") },
-  { "Resolution", N_("Resolution") },
-  { "PreFilter", N_("GhostScript pre-filtering") },
-};
-
-/* keep sorted when changing */
-static const char *page_setup_option_whitelist[] = {
-  "InputSlot",
-  "MediaType",
-  "OutputBin",
-  "PageSize",
-};
-
-/* keep sorted when changing */
-static const char *color_option_whitelist[] = {
-  "BRColorEnhancement",
-  "BRColorMatching",
-  "BRColorMatching",
-  "BRColorMode",
-  "BRGammaValue",
-  "BRImprovedGray",
-  "BlackSubstitution",
-  "ColorModel",
-  "HPCMYKInks",
-  "HPCSGraphics",
-  "HPCSImages",
-  "HPCSText",
-  "HPColorSmart",
-  "RPSBlackMode",
-  "RPSBlackOverPrint",
-  "Rcmyksimulation",
-};
-
-/* keep sorted when changing */
-static const char *color_group_whitelist[] = {
-  "Color",
-  "Color1",
-  "Color2",
-  "ColorBalance",
-  "ColorPage",
-  "ColorSettings1",
-  "ColorSettings2",
-  "ColorSettings3",
-  "ColorSettings4",
-  "EPColorSettings",
-  "FPColorWise1",
-  "FPColorWise2",
-  "FPColorWise3",
-  "FPColorWise4",
-  "FPColorWise5",
-  "HPCMYKInksPanel",
-  "HPColorOptions",
-  "HPColorOptionsPanel",
-  "HPColorQualityOptionsPanel",
-  "ManualColor",
-};
-
-/* keep sorted when changing */
-static const char *image_quality_option_whitelist[] = {
-  "BRDocument",
-  "BRHalfTonePattern",
-  "BRNormalPrt",
-  "BRPrintQuality",
-  "BitsPerPixel",
-  "Darkness",
-  "Dithering",
-  "EconoMode",
-  "Economode",
-  "HPEconoMode",
-  "HPEdgeControl",
-  "HPGraphicsHalftone",
-  "HPHalftone",
-  "HPImagingOptions",
-  "HPLJDensity",
-  "HPPhotoHalftone",
-  "HPPrintQualityOptions",
-  "HPResolutionOptions",
-  "OutputMode",
-  "REt",
-  "RPSBitsPerPixel",
-  "RPSDitherType",
-  "Resolution",
-  "ScreenLock",
-  "Smoothing",
-  "TonerSaveMode",
-  "UCRGCRForImage",
-};
-
-/* keep sorted when changing */
-static const char *image_quality_group_whitelist[] = {
-  "EPQualitySettings",
-  "FPImageQuality1",
-  "FPImageQuality2",
-  "FPImageQuality3",
-  "ImageQualityPage",
-  "Quality",
-};
-
-/* keep sorted when changing */
-static const char * finishing_option_whitelist[] = {
-  "BindColor",
-  "BindEdge",
-  "BindType",
-  "BindWhen",
-  "Booklet",
-  "FoldType",
-  "FoldWhen",
-  "HPStaplerOptions",
-  "Jog",
-  "Slipsheet",
-  "Sorter",
-  "StapleLocation",
-  "StapleOrientation",
-  "StapleWhen",
-  "StapleX",
-  "StapleY",
-};
-
-/* keep sorted when changing */
-static const char *job_group_whitelist[] = {
-  "JobHandling",
-  "JobLog",
-};
-
-/* keep sorted when changing */
-static const char *finishing_group_whitelist[] = {
-  "Booklet",
-  "BookletCover",
-  "BookletModeOptions",
-  "FPFinishing1",
-  "FPFinishing2",
-  "FPFinishing3",
-  "FPFinishing4",
-  "Finishing",
-  "FinishingOptions",
-  "FinishingPage",
-  "HPBookletPanel",
-  "HPFinishing",
-  "HPFinishingOptions",
-  "HPFinishingPanel",
-};
-
-/* keep sorted when changing */
-static const char *installable_options_group_whitelist[] = {
-  "InstallableOptions",
-};
-
-/* keep sorted when changing */
-static const char *page_setup_group_whitelist[] = {
-  "HPMarginAndLayout",
-  "OutputControl",
-  "PaperHandling",
-  "Paper",
-  "Source",
-};
-
-/* keep sorted when changing */
-static const char *ppd_option_blacklist[] = {
-  "Collate",
-  "Copies",
-  "Duplex",
-  "HPManualDuplexOrientation",
-  "HPManualDuplexSwitch",
-  "OutputOrder",
-  "PageRegion"
-};
-
-static int
-strptr_cmp (const void *a,
-	    const void *b)
-{
-  char **aa = (char **)a;
-  char **bb = (char **)b;
-  return strcmp (*aa, *bb);
-}
-
-static gboolean
-string_in_table (gchar       *str,
-		 const gchar *table[],
-		 gint         table_len)
-{
-  return bsearch (&str, table, table_len, sizeof (char *), (void *)strptr_cmp) != NULL;
-}
-
-#define STRING_IN_TABLE(_str, _table) (string_in_table (_str, _table, G_N_ELEMENTS (_table)))
-
-static gchar *
-ppd_option_name_translate (ppd_option_t *option)
-{
-  gint i;
-
-  for (i = 0; i < G_N_ELEMENTS (ppd_option_translations); i++)
-    {
-      if (g_strcmp0 (ppd_option_translations[i].keyword, option->keyword) == 0)
-	return g_strdup (_(ppd_option_translations[i].translation));
-    }
-
-  return g_strdup (option->text);
-}
-
-static gint
-grid_get_height (GtkWidget *grid)
-{
-  GList *children;
-  GList *child;
-  gint   height = 0;
-  gint   top_attach = 0;
-  gint   max = 0;
-
-  children = gtk_container_get_children (GTK_CONTAINER (grid));
-  for (child = children; child; child = g_list_next (child))
-    {
-      gtk_container_child_get (GTK_CONTAINER (grid), child->data,
-                               "top-attach", &top_attach,
-                               "height", &height,
-                               NULL);
-
-      if (height + top_attach > max)
-        max = height + top_attach;
-    }
-
-  g_list_free (children);
-
-  return max;
-}
-
-static gboolean
-grid_is_empty (GtkWidget *grid)
-{
-  GList *children;
-
-  children = gtk_container_get_children (GTK_CONTAINER (grid));
-  if (children)
-    {
-      g_list_free (children);
-      return FALSE;
-    }
-  else
-    {
-      return TRUE;
-    }
-}
-
-static GtkWidget *
-ipp_option_add (IPPAttribute *attr_supported,
-                IPPAttribute *attr_default,
-                const gchar  *option_name,
-                const gchar  *option_display_name,
-                const gchar  *printer_name,
-                GtkWidget    *grid,
-                gboolean      sensitive)
-{
-  GtkStyleContext *context;
-  GtkWidget       *widget;
-  GtkWidget       *label;
-  gint             position;
-
-  widget = (GtkWidget *) pp_ipp_option_widget_new (attr_supported,
-                                                   attr_default,
-                                                   option_name,
-                                                   printer_name);
-  if (widget)
-    {
-      gtk_widget_set_sensitive (widget, sensitive);
-      position = grid_get_height (grid);
-
-      label = gtk_label_new (option_display_name);
-      context = gtk_widget_get_style_context (label);
-      gtk_style_context_add_class (context, "dim-label-ucc");
-      gtk_misc_set_alignment (GTK_MISC (label), 1.0, 0.5);
-      gtk_widget_set_margin_left (label, 10);
-      gtk_grid_attach (GTK_GRID (grid), label, 0, position, 1, 1);
-
-      gtk_widget_set_margin_left (widget, 20);
-      gtk_grid_attach (GTK_GRID (grid), widget, 1, position, 1, 1);
-    }
-
-  return widget;
-}
-
-static GtkWidget *
-ppd_option_add (ppd_option_t  option,
-                const gchar  *printer_name,
-                GtkWidget    *grid,
-                gboolean      sensitive)
-{
-  GtkStyleContext *context;
-  GtkWidget       *widget;
-  GtkWidget       *label;
-  gint             position;
-
-  widget = (GtkWidget *) pp_ppd_option_widget_new (&option, printer_name);
-  if (widget)
-    {
-      gtk_widget_set_sensitive (widget, sensitive);
-      position = grid_get_height (grid);
-
-      label = gtk_label_new (ppd_option_name_translate (&option));
-      context = gtk_widget_get_style_context (label);
-      gtk_style_context_add_class (context, "dim-label-ucc");
-      gtk_misc_set_alignment (GTK_MISC (label), 1.0, 0.5);
-      gtk_widget_set_margin_left (label, 10);
-      gtk_grid_attach (GTK_GRID (grid), label, 0, position, 1, 1);
-
-      gtk_widget_set_margin_left (widget, 20);
-      gtk_grid_attach (GTK_GRID (grid), widget, 1, position, 1, 1);
-    }
-
-  return widget;
-}
-
-static GtkWidget *
-tab_grid_new ()
-{
-  GtkWidget *grid;
-
-  grid = gtk_grid_new ();
-  gtk_container_set_border_width (GTK_CONTAINER (grid), 20);
-  gtk_grid_set_row_spacing (GTK_GRID (grid), 15);
-
-  return grid;
-}
-
-static void
-tab_add (const gchar *tab_name,
-         GtkWidget   *options_notebook,
-         GtkTreeView *treeview,
-         GtkWidget   *grid)
-{
-  GtkListStore *store;
-  GtkTreeIter   iter;
-  GtkWidget    *scrolled_window;
-  gboolean      unref_store = FALSE;
-  gint          id;
-
-  if (!grid_is_empty (grid))
-    {
-      scrolled_window = gtk_scrolled_window_new (NULL, NULL);
-      gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_window),
-                                      GTK_POLICY_NEVER,
-                                      GTK_POLICY_AUTOMATIC);
-      gtk_scrolled_window_add_with_viewport (GTK_SCROLLED_WINDOW (scrolled_window),
-                                             grid);
-
-      id = gtk_notebook_append_page (GTK_NOTEBOOK (options_notebook),
-                                     scrolled_window,
-                                     NULL);
-
-      if (id >= 0)
-        {
-          store = GTK_LIST_STORE (gtk_tree_view_get_model (treeview));
-          if (!store)
-            {
-              store = gtk_list_store_new (2, G_TYPE_INT, G_TYPE_STRING);
-              unref_store = TRUE;
-            }
-
-          gtk_list_store_append (store, &iter);
-          gtk_list_store_set (store, &iter,
-                              CATEGORY_IDS_COLUMN, id,
-                              CATEGORY_NAMES_COLUMN, tab_name,
-                              -1);
-
-          if (unref_store)
-            {
-              gtk_tree_view_set_model (treeview, GTK_TREE_MODEL (store));
-              g_object_unref (store);
-            }
-        }
-    }
-  else
-    {
-      g_object_ref_sink (grid);
-      g_object_unref (grid);
-    }
-}
-
-static void
-category_selection_changed_cb (GtkTreeSelection *selection,
-                               gpointer          user_data)
-{
-  PpOptionsDialog *dialog = (PpOptionsDialog *) user_data;
-  GtkTreeModel    *model;
-  GtkTreeIter      iter;
-  GtkWidget       *options_notebook;
-  gint             id = -1;
-
-  if (gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      gtk_tree_model_get (model, &iter,
-			  CATEGORY_IDS_COLUMN, &id,
-			  -1);
-    }
-
-  if (id >= 0)
-    {
-      options_notebook = (GtkWidget*)
-        gtk_builder_get_object (dialog->builder, "options-notebook");
-
-      gtk_notebook_set_current_page (GTK_NOTEBOOK (options_notebook), id);
-    }
-}
-
-static void
-populate_options_real (PpOptionsDialog *dialog)
-{
-  GtkTreeSelection *selection;
-  GtkTreeModel     *model;
-  GtkTreeView      *treeview;
-  GtkTreeIter       iter;
-  ppd_file_t       *ppd_file;
-  GtkWidget        *notebook;
-  GtkWidget        *grid;
-  GtkWidget        *general_tab_grid = tab_grid_new ();
-  GtkWidget        *page_setup_tab_grid = tab_grid_new ();
-  GtkWidget        *installable_options_tab_grid = tab_grid_new ();
-  GtkWidget        *job_tab_grid = tab_grid_new ();
-  GtkWidget        *image_quality_tab_grid = tab_grid_new ();
-  GtkWidget        *color_tab_grid = tab_grid_new ();
-  GtkWidget        *finishing_tab_grid = tab_grid_new ();
-  GtkWidget        *advanced_tab_grid = tab_grid_new ();
-  GtkWidget        *widget;
-  gint              i, j;
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "options-spinner");
-  gtk_widget_hide (widget);
-  gtk_spinner_stop (GTK_SPINNER (widget));
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "progress-label");
-  gtk_widget_hide (widget);
-
-  treeview = (GtkTreeView *)
-    gtk_builder_get_object (dialog->builder, "options-categories-treeview");
-
-  notebook = (GtkWidget *)
-    gtk_builder_get_object (dialog->builder, "options-notebook");
-
-  if (dialog->ipp_attributes)
-    {
-      /* Add number-up option to Page Setup tab */
-      ipp_option_add (g_hash_table_lookup (dialog->ipp_attributes,
-                                           "number-up-supported"),
-                      g_hash_table_lookup (dialog->ipp_attributes,
-                                           "number-up-default"),
-                      "number-up",
-                      /* Translators: This option sets number of pages printed on one sheet */
-                      _("Pages per side"),
-                      dialog->printer_name,
-                      page_setup_tab_grid,
-                      dialog->sensitive);
-
-      /* Add sides option to Page Setup tab */
-      ipp_option_add (g_hash_table_lookup (dialog->ipp_attributes,
-                                           "sides-supported"),
-                      g_hash_table_lookup (dialog->ipp_attributes,
-                                           "sides-default"),
-                      "sides",
-                      /* Translators: This option sets whether to print on both sides of paper */
-                      _("Two-sided"),
-                      dialog->printer_name,
-                      page_setup_tab_grid,
-                      dialog->sensitive);
-
-      /* Add orientation-requested option to Page Setup tab */
-      ipp_option_add (g_hash_table_lookup (dialog->ipp_attributes,
-                                           "orientation-requested-supported"),
-                      g_hash_table_lookup (dialog->ipp_attributes,
-                                           "orientation-requested-default"),
-                      "orientation-requested",
-                      /* Translators: This option sets orientation of print (portrait, landscape...) */
-                      _("Orientation"),
-                      dialog->printer_name,
-                      page_setup_tab_grid,
-                      dialog->sensitive);
-    }
-
-  if (dialog->destination && dialog->ppd_filename)
-    {
-      ppd_file = ppdOpenFile (dialog->ppd_filename);
-      ppdLocalize (ppd_file);
-
-      if (ppd_file)
-        {
-          ppdMarkDefaults (ppd_file);
-          cupsMarkOptions (ppd_file,
-                           dialog->destination->num_options,
-                           dialog->destination->options);
-
-          for (i = 0; i < ppd_file->num_groups; i++)
-            {
-              for (j = 0; j < ppd_file->groups[i].num_options; j++)
-                {
-                  grid = NULL;
-
-                  if (STRING_IN_TABLE (ppd_file->groups[i].name,
-                                       color_group_whitelist))
-                    grid = color_tab_grid;
-                  else if (STRING_IN_TABLE (ppd_file->groups[i].name,
-                                            image_quality_group_whitelist))
-                    grid = image_quality_tab_grid;
-                  else if (STRING_IN_TABLE (ppd_file->groups[i].name,
-                                            job_group_whitelist))
-                    grid = job_tab_grid;
-                  else if (STRING_IN_TABLE (ppd_file->groups[i].name,
-                                            finishing_group_whitelist))
-                    grid = finishing_tab_grid;
-                  else if (STRING_IN_TABLE (ppd_file->groups[i].name,
-                                            installable_options_group_whitelist))
-                    grid = installable_options_tab_grid;
-                  else if (STRING_IN_TABLE (ppd_file->groups[i].name,
-                                            page_setup_group_whitelist))
-                    grid = page_setup_tab_grid;
-
-                  if (!STRING_IN_TABLE (ppd_file->groups[i].options[j].keyword,
-                                        ppd_option_blacklist))
-                    {
-                      if (!grid && STRING_IN_TABLE (ppd_file->groups[i].options[j].keyword,
-                                                    color_option_whitelist))
-                        grid = color_tab_grid;
-                      else if (!grid && STRING_IN_TABLE (ppd_file->groups[i].options[j].keyword,
-                                                         image_quality_option_whitelist))
-                        grid = image_quality_tab_grid;
-                      else if (!grid && STRING_IN_TABLE (ppd_file->groups[i].options[j].keyword,
-                                                         finishing_option_whitelist))
-                        grid = finishing_tab_grid;
-                      else if (!grid && STRING_IN_TABLE (ppd_file->groups[i].options[j].keyword,
-                                                         page_setup_option_whitelist))
-                        grid = page_setup_tab_grid;
-
-                      if (!grid)
-                        grid = advanced_tab_grid;
-
-                      ppd_option_add (ppd_file->groups[i].options[j],
-                                      dialog->printer_name,
-                                      grid,
-                                      dialog->sensitive);
-                    }
-                }
-            }
-
-          ppdClose (ppd_file);
-        }
-    }
-
-  dialog->ppd_filename_set = FALSE;
-  if (dialog->ppd_filename)
-    {
-      g_unlink (dialog->ppd_filename);
-      g_free (dialog->ppd_filename);
-      dialog->ppd_filename = NULL;
-    }
-
-  dialog->destination_set = FALSE;
-  if (dialog->destination)
-    {
-      cupsFreeDests (1, dialog->destination);
-      dialog->destination = NULL;
-    }
-
-  dialog->ipp_attributes_set = FALSE;
-  if (dialog->ipp_attributes)
-    {
-      g_hash_table_unref (dialog->ipp_attributes);
-      dialog->ipp_attributes = NULL;
-    }
-
-  /* Translators: "General" tab contains general printer options */
-  tab_add (C_("Printer Option Group", "General"), notebook, treeview, general_tab_grid);
-
-  /* Translators: "Page Setup" tab contains settings related to pages (page size, paper source, etc.) */
-  tab_add (C_("Printer Option Group", "Page Setup"), notebook, treeview, page_setup_tab_grid);
-
-  /* Translators: "Installable Options" tab contains settings of presence of installed options (amount of RAM, duplex unit, etc.) */
-  tab_add (C_("Printer Option Group", "Installable Options"), notebook, treeview, installable_options_tab_grid);
-
-  /* Translators: "Job" tab contains settings for jobs */
-  tab_add (C_("Printer Option Group", "Job"), notebook, treeview, job_tab_grid);
-
-  /* Translators: "Image Quality" tab contains settings for quality of output print (e.g. resolution) */
-  tab_add (C_("Printer Option Group", "Image Quality"), notebook, treeview, image_quality_tab_grid);
-
-  /* Translators: "Color" tab contains color settings (e.g. color printing) */
-  tab_add (C_("Printer Option Group", "Color"), notebook, treeview, color_tab_grid);
-
-  /* Translators: "Finishing" tab contains finishing settings (e.g. booklet printing) */
-  tab_add (C_("Printer Option Group", "Finishing"), notebook, treeview, finishing_tab_grid);
-
-  /* Translators: "Advanced" tab contains all others settings */
-  tab_add (C_("Printer Option Group", "Advanced"), notebook, treeview, advanced_tab_grid);
-
-  gtk_widget_show_all (GTK_WIDGET (notebook));
-
-  /* Select the first option group */
-  if ((selection = gtk_tree_view_get_selection (treeview)) != NULL)
-    {
-      g_signal_connect (selection,
-                        "changed",
-                        G_CALLBACK (category_selection_changed_cb), dialog);
-
-      if ((model = gtk_tree_view_get_model (treeview)) != NULL &&
-          gtk_tree_model_get_iter_first (model, &iter))
-        gtk_tree_selection_select_iter (selection, &iter);
-    }
-
-  dialog->populating_dialog = FALSE;
-  if (dialog->response != GTK_RESPONSE_NONE)
-    {
-      dialog->user_callback (GTK_DIALOG (dialog->dialog), dialog->response, dialog->user_data);
-    }
-}
-
-static void
-printer_get_ppd_cb (const gchar *ppd_filename,
-                    gpointer     user_data)
-{
-  PpOptionsDialog *dialog = (PpOptionsDialog *) user_data;
-
-  if (dialog->ppd_filename)
-    {
-      g_unlink (dialog->ppd_filename);
-      g_free (dialog->ppd_filename);
-    }
-
-  dialog->ppd_filename = g_strdup (ppd_filename);
-  dialog->ppd_filename_set = TRUE;
-
-  if (dialog->destination_set &&
-      dialog->ipp_attributes_set)
-    {
-      populate_options_real (dialog);
-    }
-}
-
-static void
-get_named_dest_cb (cups_dest_t *dest,
-                   gpointer     user_data)
-{
-  PpOptionsDialog *dialog = (PpOptionsDialog *) user_data;
-
-  if (dialog->destination)
-    cupsFreeDests (1, dialog->destination);
-
-  dialog->destination = dest;
-  dialog->destination_set = TRUE;
-
-  if (dialog->ppd_filename_set &&
-      dialog->ipp_attributes_set)
-    {
-      populate_options_real (dialog);
-    }
-}
-
-static void
-get_ipp_attributes_cb (GHashTable *table,
-                       gpointer    user_data)
-{
-  PpOptionsDialog *dialog = (PpOptionsDialog *) user_data;
-
-  if (dialog->ipp_attributes)
-    g_hash_table_unref (dialog->ipp_attributes);
-
-  dialog->ipp_attributes = table;
-  dialog->ipp_attributes_set = TRUE;
-
-  if (dialog->ppd_filename_set &&
-      dialog->destination_set)
-    {
-      populate_options_real (dialog);
-    }
-}
-
-static void
-populate_options (PpOptionsDialog *dialog)
-{
-  GtkTreeViewColumn  *column;
-  GtkCellRenderer    *renderer;
-  GtkTreeView        *treeview;
-  GtkWidget          *widget;
-  /*
-   * Options which we need to obtain through an IPP request
-   * to be able to fill the options dialog.
-   * *-supported - possible values of the option
-   * *-default - actual value of the option
-   */
-  const gchar        *attributes[] =
-    { "number-up-supported",
-      "number-up-default",
-      "sides-supported",
-      "sides-default",
-      "orientation-requested-supported",
-      "orientation-requested-default",
-      NULL};
-
-  treeview = (GtkTreeView *)
-    gtk_builder_get_object (dialog->builder, "options-categories-treeview");
-
-  renderer = gtk_cell_renderer_text_new ();
-
-  column = gtk_tree_view_column_new_with_attributes ("Categories", renderer,
-                                                     "text", CATEGORY_NAMES_COLUMN, NULL);
-  gtk_tree_view_column_set_expand (column, TRUE);
-  gtk_tree_view_append_column (treeview, column);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "options-spinner");
-  gtk_widget_show (widget);
-  gtk_spinner_start (GTK_SPINNER (widget));
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "progress-label");
-  gtk_widget_show (widget);
-
-  printer_get_ppd_async (dialog->printer_name,
-                         NULL,
-                         0,
-                         printer_get_ppd_cb,
-                         dialog);
-
-  get_named_dest_async (dialog->printer_name,
-                        get_named_dest_cb,
-                        dialog);
-
-  get_ipp_attributes_async (dialog->printer_name,
-                            (gchar **) attributes,
-                            get_ipp_attributes_cb,
-                            dialog);
-}
-
-/*
- * Modify padding of the content area of the GtkDialog
- * so it is aligned with the action area.
- */
-static void
-update_alignment_padding (GtkWidget     *widget,
-                          GtkAllocation *allocation,
-                          gpointer       user_data)
-{
-  PpOptionsDialog *dialog = (PpOptionsDialog*) user_data;
-  GtkAllocation    allocation1, allocation2;
-  GtkWidget       *action_area;
-  GtkWidget       *content_area;
-  gint             offset_left, offset_right;
-  guint            padding_left, padding_right,
-                   padding_top, padding_bottom;
-
-  action_area = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "dialog-action-area1");
-  gtk_widget_get_allocation (action_area, &allocation2);
-
-  content_area = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "content-alignment");
-  gtk_widget_get_allocation (content_area, &allocation1);
-
-  offset_left = allocation2.x - allocation1.x;
-  offset_right = (allocation1.x + allocation1.width) -
-                 (allocation2.x + allocation2.width);
-
-  gtk_alignment_get_padding  (GTK_ALIGNMENT (content_area),
-                              &padding_top, &padding_bottom,
-                              &padding_left, &padding_right);
-  if (allocation1.x >= 0 && allocation2.x >= 0)
-    {
-      if (offset_left > 0 && offset_left != padding_left)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (content_area),
-                                   padding_top, padding_bottom,
-                                   offset_left, padding_right);
-
-      gtk_alignment_get_padding  (GTK_ALIGNMENT (content_area),
-                                  &padding_top, &padding_bottom,
-                                  &padding_left, &padding_right);
-      if (offset_right > 0 && offset_right != padding_right)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (content_area),
-                                   padding_top, padding_bottom,
-                                   padding_left, offset_right);
-    }
-}
-
-static void
-options_dialog_response_cb (GtkDialog *_dialog,
-                            gint       response_id,
-                            gpointer   user_data)
-{
-  PpOptionsDialog *dialog = (PpOptionsDialog*) user_data;
-
-  pp_options_dialog_hide (dialog);
-  dialog->response = response_id;
-
-  if (!dialog->populating_dialog)
-    dialog->user_callback (GTK_DIALOG (dialog->dialog), response_id, dialog->user_data);
-}
-
-PpOptionsDialog *
-pp_options_dialog_new (GtkWindow            *parent,
-                       UserResponseCallback  user_callback,
-                       gpointer              user_data,
-                       gchar                *printer_name,
-                       gboolean              sensitive)
-{
-  PpOptionsDialog *dialog;
-  GtkWidget       *widget;
-  GError          *error = NULL;
-  gchar           *objects[] = { "options-dialog", NULL };
-  guint            builder_result;
-  gchar           *title;
-
-  dialog = g_new0 (PpOptionsDialog, 1);
-
-  dialog->builder = gtk_builder_new ();
-  dialog->parent = GTK_WIDGET (parent);
-
-  builder_result = gtk_builder_add_objects_from_file (dialog->builder,
-                                                      DATADIR"/options-dialog.ui",
-                                                      objects, &error);
-
-  if (builder_result == 0)
-    {
-      g_warning ("Could not load ui: %s", error->message);
-      g_error_free (error);
-      return NULL;
-    }
-
-  dialog->dialog = (GtkWidget *) gtk_builder_get_object (dialog->builder, "options-dialog");
-  gtk_window_set_transient_for (GTK_WINDOW (dialog->dialog), GTK_WINDOW (parent));
-
-  dialog->user_callback = user_callback;
-  dialog->user_data = user_data;
-
-  dialog->printer_name = g_strdup (printer_name);
-
-  dialog->ppd_filename = NULL;
-  dialog->ppd_filename_set = FALSE;
-
-  dialog->destination = NULL;
-  dialog->destination_set = FALSE;
-
-  dialog->ipp_attributes = NULL;
-  dialog->ipp_attributes_set = FALSE;
-
-  dialog->response = GTK_RESPONSE_NONE;
-
-  dialog->sensitive = sensitive;
-
-  /* connect signals */
-  g_signal_connect (dialog->dialog, "response", G_CALLBACK (options_dialog_response_cb), dialog);
-  g_signal_connect (dialog->dialog, "size-allocate", G_CALLBACK (update_alignment_padding), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "options-title");
-  /* Translators: Options of given printer (e.g. "MyPrinter Options") */
-  title = g_strdup_printf (_("%s Options"), printer_name);
-  gtk_label_set_label (GTK_LABEL (widget), title);
-  g_free (title);
-
-  gtk_widget_show_all (GTK_WIDGET (dialog->dialog));
-
-  dialog->populating_dialog = TRUE;
-  populate_options (dialog);
-
-  return dialog;
-}
-
-void
-pp_options_dialog_free (PpOptionsDialog *dialog)
-{
-  gtk_widget_destroy (GTK_WIDGET (dialog->dialog));
-  dialog->dialog = NULL;
-
-  g_object_unref (dialog->builder);
-  dialog->builder = NULL;
-
-  g_free (dialog->printer_name);
-  dialog->printer_name = NULL;
-
-  if (dialog->ppd_filename)
-    {
-      g_unlink (dialog->ppd_filename);
-      g_free (dialog->ppd_filename);
-      dialog->ppd_filename = NULL;
-    }
-
-  if (dialog->destination)
-    {
-      cupsFreeDests (1, dialog->destination);
-      dialog->destination = NULL;
-    }
-
-  if (dialog->ipp_attributes)
-    {
-      g_hash_table_unref (dialog->ipp_attributes);
-      dialog->ipp_attributes = NULL;
-    }
-
-  g_free (dialog);
-}
-
-static void
-pp_options_dialog_hide (PpOptionsDialog *dialog)
-{
-  gtk_widget_hide (GTK_WIDGET (dialog->dialog));
-}
diff --git a/panels/printers/pp-options-dialog.h b/panels/printers/pp-options-dialog.h
deleted file mode 100644
index 0571aa5..0000000
--- a/panels/printers/pp-options-dialog.h
+++ /dev/null
@@ -1,41 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_OPTIONS_DIALOG_H__
-#define __PP_OPTIONS_DIALOG_H__
-
-#include <gtk/gtk.h>
-#include "pp-utils.h"
-
-G_BEGIN_DECLS
-
-typedef struct _PpOptionsDialog PpOptionsDialog;
-
-PpOptionsDialog *pp_options_dialog_new  (GtkWindow            *parent,
-                                         UserResponseCallback  user_callback,
-                                         gpointer              user_data,
-                                         gchar                *printer_name,
-                                         gboolean              sensitive);
-void             pp_options_dialog_free (PpOptionsDialog      *dialog);
-
-G_END_DECLS
-
-#endif
diff --git a/panels/printers/pp-ppd-option-widget.c b/panels/printers/pp-ppd-option-widget.c
deleted file mode 100644
index c2c09ef..0000000
--- a/panels/printers/pp-ppd-option-widget.c
+++ /dev/null
@@ -1,626 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "config.h"
-#include <stdlib.h>
-#include <string.h>
-#include <stdio.h>
-#include <ctype.h>
-#include <glib/gi18n-lib.h>
-#include <glib/gstdio.h>
-
-#include "pp-ppd-option-widget.h"
-#include "pp-utils.h"
-
-#define PP_PPD_OPTION_WIDGET_GET_PRIVATE(o)  \
-  (G_TYPE_INSTANCE_GET_PRIVATE ((o), PP_TYPE_PPD_OPTION_WIDGET, PpPPDOptionWidgetPrivate))
-
-static void pp_ppd_option_widget_finalize (GObject *object);
-
-static gboolean construct_widget   (PpPPDOptionWidget *widget);
-static void     update_widget      (PpPPDOptionWidget *widget);
-static void     update_widget_real (PpPPDOptionWidget *widget);
-
-struct PpPPDOptionWidgetPrivate
-{
-  GtkWidget *switch_button;
-  GtkWidget *combo;
-  GtkWidget *image;
-  GtkWidget *box;
-
-  ppd_option_t *option;
-
-  gchar *printer_name;
-  gchar *option_name;
-
-  cups_dest_t *destination;
-  gboolean     destination_set;
-
-  gchar    *ppd_filename;
-  gboolean  ppd_filename_set;
-};
-
-G_DEFINE_TYPE (PpPPDOptionWidget, pp_ppd_option_widget, GTK_TYPE_BOX)
-
-/* This list comes from Gtk+ */
-static const struct {
-  const char *keyword;
-  const char *choice;
-  const char *translation;
-} ppd_choice_translations[] = {
-  { "Duplex", "None", N_("One Sided") },
-  /* Translators: this is an option of "Two Sided" */
-  { "Duplex", "DuplexNoTumble", N_("Long Edge (Standard)") },
-  /* Translators: this is an option of "Two Sided" */
-  { "Duplex", "DuplexTumble", N_("Short Edge (Flip)") },
-  /* Translators: this is an option of "Paper Source" */
-  { "InputSlot", "Auto", N_("Auto Select") },
-  /* Translators: this is an option of "Paper Source" */
-  { "InputSlot", "AutoSelect", N_("Auto Select") },
-  /* Translators: this is an option of "Paper Source" */
-  { "InputSlot", "Default", N_("Printer Default") },
-  /* Translators: this is an option of "Paper Source" */
-  { "InputSlot", "None", N_("Printer Default") },
-  /* Translators: this is an option of "Paper Source" */
-  { "InputSlot", "PrinterDefault", N_("Printer Default") },
-  /* Translators: this is an option of "Paper Source" */
-  { "InputSlot", "Unspecified", N_("Auto Select") },
-  /* Translators: this is an option of "Resolution" */
-  { "Resolution", "default", N_("Printer Default") },
-  /* Translators: this is an option of "GhostScript" */
-  { "PreFilter", "EmbedFonts", N_("Embed GhostScript fonts only") },
-  /* Translators: this is an option of "GhostScript" */
-  { "PreFilter", "Level1", N_("Convert to PS level 1") },
-  /* Translators: this is an option of "GhostScript" */
-  { "PreFilter", "Level2", N_("Convert to PS level 2") },
-  /* Translators: this is an option of "GhostScript" */
-  { "PreFilter", "No", N_("No pre-filtering") },
-};
-
-static ppd_option_t *
-cups_option_copy (ppd_option_t *option)
-{
-  ppd_option_t *result;
-  gint          i;
-
-  result = g_new0 (ppd_option_t, 1);
-
-  *result = *option;
-
-  result->choices = g_new (ppd_choice_t, result->num_choices);
-  for (i = 0; i < result->num_choices; i++)
-    {
-      result->choices[i] = option->choices[i];
-      result->choices[i].code = g_strdup (option->choices[i].code);
-      result->choices[i].option = result;
-    }
-
-  return result;
-}
-
-static void
-cups_option_free (ppd_option_t *option)
-{
-  gint i;
-
-  if (option)
-    {
-      for (i = 0; i < option->num_choices; i++)
-        g_free (option->choices[i].code);
-
-      g_free (option->choices);
-      g_free (option);
-    }
-}
-
-static void
-pp_ppd_option_widget_class_init (PpPPDOptionWidgetClass *class)
-{
-  GObjectClass *object_class;
-
-  object_class = G_OBJECT_CLASS (class);
-
-  object_class->finalize = pp_ppd_option_widget_finalize;
-
-  g_type_class_add_private (class, sizeof (PpPPDOptionWidgetPrivate));
-}
-
-static void
-pp_ppd_option_widget_init (PpPPDOptionWidget *widget)
-{
-  PpPPDOptionWidgetPrivate *priv;
-
-  priv = widget->priv = PP_PPD_OPTION_WIDGET_GET_PRIVATE (widget);
-
-  priv->switch_button = NULL;
-  priv->combo = NULL;
-  priv->image = NULL;
-  priv->box = NULL;
-
-  priv->printer_name = NULL;
-  priv->option_name = NULL;
-
-  priv->destination = NULL;
-  priv->destination_set = FALSE;
-
-  priv->ppd_filename = NULL;
-  priv->ppd_filename_set = FALSE;
-}
-
-static void
-pp_ppd_option_widget_finalize (GObject *object)
-{
-  PpPPDOptionWidget        *widget = PP_PPD_OPTION_WIDGET (object);
-  PpPPDOptionWidgetPrivate *priv = widget->priv;
-
-  if (priv)
-    {
-      if (priv->option)
-        {
-          cups_option_free (priv->option);
-          priv->option = NULL;
-        }
-
-      if (priv->printer_name)
-        {
-          g_free (priv->printer_name);
-          priv->printer_name = NULL;
-        }
-
-      if (priv->option_name)
-        {
-          g_free (priv->printer_name);
-          priv->printer_name = NULL;
-        }
-
-      if (priv->destination)
-        {
-          cupsFreeDests (1, priv->destination);
-          priv->destination = NULL;
-        }
-
-      if (priv->ppd_filename)
-        {
-          g_unlink (priv->ppd_filename);
-          g_free (priv->ppd_filename);
-          priv->ppd_filename = NULL;
-        }
-    }
-
-  G_OBJECT_CLASS (pp_ppd_option_widget_parent_class)->finalize (object);
-}
-
-static const gchar *
-ppd_choice_translate (ppd_choice_t *choice)
-{
-  const gchar *keyword = choice->option->keyword;
-  gint         i;
-
-  for (i = 0; i < G_N_ELEMENTS (ppd_choice_translations); i++)
-    {
-      if (g_strcmp0 (ppd_choice_translations[i].keyword, keyword) == 0 &&
-	  g_strcmp0 (ppd_choice_translations[i].choice, choice->choice) == 0)
-	return _(ppd_choice_translations[i].translation);
-    }
-
-  return choice->text;
-}
-
-GtkWidget *
-pp_ppd_option_widget_new (ppd_option_t *option,
-                          const gchar  *printer_name)
-{
-  PpPPDOptionWidgetPrivate *priv;
-  PpPPDOptionWidget        *widget = NULL;
-
-  if (option && printer_name)
-    {
-      widget = g_object_new (PP_TYPE_PPD_OPTION_WIDGET, "orientation", GTK_ORIENTATION_HORIZONTAL, NULL);
-
-      priv = PP_PPD_OPTION_WIDGET_GET_PRIVATE (widget);
-
-      priv->printer_name = g_strdup (printer_name);
-      priv->option = cups_option_copy (option);
-      priv->option_name = g_strdup (option->keyword);
-
-      if (construct_widget (widget))
-        {
-          update_widget_real (widget);
-        }
-      else
-        {
-          g_object_ref_sink (widget);
-          g_object_unref (widget);
-          widget = NULL;
-        }
-    }
-
-  return (GtkWidget *) widget;
-}
-
-enum {
-  NAME_COLUMN,
-  VALUE_COLUMN,
-  N_COLUMNS
-};
-
-static GtkWidget *
-combo_box_new (void)
-{
-  GtkCellRenderer *cell;
-  GtkListStore    *store;
-  GtkWidget       *combo_box;
-
-  combo_box = gtk_combo_box_new ();
-
-  store = gtk_list_store_new (N_COLUMNS, G_TYPE_STRING, G_TYPE_STRING);
-  gtk_combo_box_set_model (GTK_COMBO_BOX (combo_box), GTK_TREE_MODEL (store));
-  g_object_unref (store);
-
-  cell = gtk_cell_renderer_text_new ();
-  gtk_cell_layout_pack_start (GTK_CELL_LAYOUT (combo_box), cell, TRUE);
-  gtk_cell_layout_set_attributes (GTK_CELL_LAYOUT (combo_box), cell,
-                                  "text", NAME_COLUMN,
-                                  NULL);
-
-  return combo_box;
-}
-
-static void
-combo_box_append (GtkWidget   *combo,
-                  const gchar *display_text,
-                  const gchar *value)
-{
-  GtkTreeModel *model;
-  GtkListStore *store;
-  GtkTreeIter   iter;
-
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo));
-  store = GTK_LIST_STORE (model);
-
-  gtk_list_store_append (store, &iter);
-  gtk_list_store_set (store, &iter,
-                      NAME_COLUMN, display_text,
-                      VALUE_COLUMN, value,
-                      -1);
-}
-
-struct ComboSet {
-  GtkComboBox *combo;
-  const gchar *value;
-};
-
-static gboolean
-set_cb (GtkTreeModel *model,
-        GtkTreePath  *path,
-        GtkTreeIter  *iter,
-        gpointer      data)
-{
-  struct ComboSet *set_data = data;
-  gboolean         found;
-  char            *value;
-
-  gtk_tree_model_get (model, iter, VALUE_COLUMN, &value, -1);
-  found = (strcmp (value, set_data->value) == 0);
-  g_free (value);
-
-  if (found)
-    gtk_combo_box_set_active_iter (set_data->combo, iter);
-
-  return found;
-}
-
-static void
-combo_box_set (GtkWidget   *combo,
-               const gchar *value)
-{
-  struct ComboSet  set_data;
-  GtkTreeModel    *model;
-
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo));
-
-  set_data.combo = GTK_COMBO_BOX (combo);
-  set_data.value = value;
-  gtk_tree_model_foreach (model, set_cb, &set_data);
-}
-
-static char *
-combo_box_get (GtkWidget *combo)
-{
-  GtkTreeModel *model;
-  GtkTreeIter   iter;
-  gchar        *value = NULL;
-
-  model = gtk_combo_box_get_model (GTK_COMBO_BOX (combo));
-
-  if (gtk_combo_box_get_active_iter (GTK_COMBO_BOX (combo), &iter))
-     gtk_tree_model_get (model, &iter, VALUE_COLUMN, &value, -1);
-
-  return value;
-}
-
-static void
-printer_add_option_async_cb (gboolean success,
-                             gpointer user_data)
-{
-  update_widget (user_data);
-}
-
-static void
-switch_changed_cb (GtkWidget         *switch_button,
-                   GParamSpec        *pspec,
-                   PpPPDOptionWidget *widget)
-{
-  PpPPDOptionWidgetPrivate  *priv = widget->priv;
-  gchar                    **values;
-
-  values = g_new0 (gchar *, 2);
-
-  if (gtk_switch_get_active (GTK_SWITCH (switch_button)))
-    values[0] = g_strdup ("True");
-  else
-    values[0] = g_strdup ("False");
-
-  printer_add_option_async (priv->printer_name,
-                            priv->option_name,
-                            values,
-                            FALSE,
-                            NULL,
-                            printer_add_option_async_cb,
-                            widget);
-
-  g_strfreev (values);
-}
-
-static void
-combo_changed_cb (GtkWidget         *combo,
-                  PpPPDOptionWidget *widget)
-{
-  PpPPDOptionWidgetPrivate  *priv = widget->priv;
-  gchar                    **values;
-
-  values = g_new0 (gchar *, 2);
-  values[0] = combo_box_get (combo);
-
-  printer_add_option_async (priv->printer_name,
-                            priv->option_name,
-                            values,
-                            FALSE,
-                            NULL,
-                            printer_add_option_async_cb,
-                            widget);
-
-  g_strfreev (values);
-}
-
-static gboolean
-construct_widget (PpPPDOptionWidget *widget)
-{
-  PpPPDOptionWidgetPrivate *priv = widget->priv;
-  gint                      i;
-
-  /* Don't show options which has only one choice */
-  if (priv->option && priv->option->num_choices > 1)
-    {
-      switch (priv->option->ui)
-        {
-          case PPD_UI_BOOLEAN:
-              priv->switch_button = gtk_switch_new ();
-              g_signal_connect (priv->switch_button, "notify::active", G_CALLBACK (switch_changed_cb), widget);
-              gtk_box_pack_start (GTK_BOX (widget), priv->switch_button, FALSE, FALSE, 0);
-              break;
-
-          case PPD_UI_PICKONE:
-              priv->combo = combo_box_new ();
-
-              for (i = 0; i < priv->option->num_choices; i++)
-                {
-                  combo_box_append (priv->combo,
-                                    ppd_choice_translate (&priv->option->choices[i]),
-                                    priv->option->choices[i].choice);
-                }
-
-              gtk_box_pack_start (GTK_BOX (widget), priv->combo, FALSE, FALSE, 0);
-              g_signal_connect (priv->combo, "changed", G_CALLBACK (combo_changed_cb), widget);
-              break;
-
-          case PPD_UI_PICKMANY:
-              priv->combo = combo_box_new ();
-
-              for (i = 0; i < priv->option->num_choices; i++)
-                {
-                  combo_box_append (priv->combo,
-                                    ppd_choice_translate (&priv->option->choices[i]),
-                                    priv->option->choices[i].choice);
-                }
-
-              gtk_box_pack_start (GTK_BOX (widget), priv->combo, TRUE, TRUE, 0);
-              g_signal_connect (priv->combo, "changed", G_CALLBACK (combo_changed_cb), widget);
-              break;
-
-          default:
-              break;
-        }
-
-      priv->image = gtk_image_new_from_icon_name ("dialog-warning-symbolic", GTK_ICON_SIZE_MENU);
-      if (!priv->image)
-        priv->image = gtk_image_new_from_icon_name ("dialog-warning", GTK_ICON_SIZE_MENU);
-      gtk_box_pack_start (GTK_BOX (widget), priv->image, FALSE, FALSE, 0);
-      gtk_widget_set_no_show_all (GTK_WIDGET (priv->image), TRUE);
-
-      return TRUE;
-    }
-  else
-    {
-      return FALSE;
-    }
-}
-
-static void
-update_widget_real (PpPPDOptionWidget *widget)
-{
-  PpPPDOptionWidgetPrivate *priv = widget->priv;
-  ppd_option_t             *option = NULL, *iter;
-  ppd_file_t               *ppd_file;
-  gchar                    *value = NULL;
-  gint                      i;
-
-  if (priv->option)
-    {
-      option = cups_option_copy (priv->option);
-      cups_option_free (priv->option);
-      priv->option = NULL;
-    }
-  else if (priv->ppd_filename)
-    {
-      ppd_file = ppdOpenFile (priv->ppd_filename);
-      ppdLocalize (ppd_file);
-
-      if (ppd_file)
-        {
-          ppdMarkDefaults (ppd_file);
-          cupsMarkOptions (ppd_file,
-                           priv->destination->num_options,
-                           priv->destination->options);
-
-          for (iter = ppdFirstOption(ppd_file); iter; iter = ppdNextOption(ppd_file))
-            {
-              if (g_str_equal (iter->keyword, priv->option_name))
-                {
-                  option = cups_option_copy (iter);
-                  break;
-                }
-            }
-
-          ppdClose (ppd_file);
-        }
-
-      g_unlink (priv->ppd_filename);
-      g_free (priv->ppd_filename);
-      priv->ppd_filename = NULL;
-    }
-
-  if (option)
-    {
-      for (i = 0; i < option->num_choices; i++)
-        if (option->choices[i].marked)
-          value = g_strdup (option->choices[i].choice);
-
-      if (value == NULL)
-        value = g_strdup (option->defchoice);
-
-      if (value)
-        {
-          switch (option->ui)
-            {
-              case PPD_UI_BOOLEAN:
-                g_signal_handlers_block_by_func (priv->switch_button, switch_changed_cb, widget);
-                if (g_ascii_strcasecmp (value, "True") == 0)
-                  gtk_switch_set_active (GTK_SWITCH (priv->switch_button), TRUE);
-                else
-                  gtk_switch_set_active (GTK_SWITCH (priv->switch_button), FALSE);
-                g_signal_handlers_unblock_by_func (priv->switch_button, switch_changed_cb, widget);
-                break;
-
-              case PPD_UI_PICKONE:
-                g_signal_handlers_block_by_func (priv->combo, combo_changed_cb, widget);
-                combo_box_set (priv->combo, value);
-                g_signal_handlers_unblock_by_func (priv->combo, combo_changed_cb, widget);
-                break;
-
-              case PPD_UI_PICKMANY:
-                g_signal_handlers_block_by_func (priv->combo, combo_changed_cb, widget);
-                combo_box_set (priv->combo, value);
-                g_signal_handlers_unblock_by_func (priv->combo, combo_changed_cb, widget);
-                break;
-
-              default:
-                break;
-            }
-
-          g_free (value);
-        }
-
-      if (option->conflicted)
-        gtk_widget_show (priv->image);
-      else
-        gtk_widget_hide (priv->image);
-    }
-
-  cups_option_free (option);
-}
-
-static void
-get_named_dest_cb (cups_dest_t *dest,
-                   gpointer     user_data)
-{
-  PpPPDOptionWidget        *widget = (PpPPDOptionWidget *) user_data;
-  PpPPDOptionWidgetPrivate *priv = widget->priv;
-
-  if (priv->destination)
-    cupsFreeDests (1, priv->destination);
-
-  priv->destination = dest;
-  priv->destination_set = TRUE;
-
-  if (priv->ppd_filename_set)
-    {
-      update_widget_real (widget);
-    }
-}
-
-static void
-printer_get_ppd_cb (const gchar *ppd_filename,
-                    gpointer     user_data)
-{
-  PpPPDOptionWidget        *widget = (PpPPDOptionWidget *) user_data;
-  PpPPDOptionWidgetPrivate *priv = widget->priv;
-
-  if (priv->ppd_filename)
-    {
-      g_unlink (priv->ppd_filename);
-      g_free (priv->ppd_filename);
-    }
-
-  priv->ppd_filename = g_strdup (ppd_filename);
-  priv->ppd_filename_set = TRUE;
-
-  if (priv->destination_set)
-    {
-      update_widget_real (widget);
-    }
-}
-
-static void
-update_widget (PpPPDOptionWidget *widget)
-{
-  PpPPDOptionWidgetPrivate *priv = widget->priv;
-
-  get_named_dest_async (priv->printer_name,
-                        get_named_dest_cb,
-                        widget);
-
-  printer_get_ppd_async (priv->printer_name,
-                         NULL,
-                         0,
-                         printer_get_ppd_cb,
-                         widget);
-}
diff --git a/panels/printers/pp-ppd-option-widget.h b/panels/printers/pp-ppd-option-widget.h
deleted file mode 100644
index 1d8a225..0000000
--- a/panels/printers/pp-ppd-option-widget.h
+++ /dev/null
@@ -1,63 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_PPD_OPTION_WIDGET_H__
-#define __PP_PPD_OPTION_WIDGET_H__
-
-#include <gtk/gtk.h>
-#include <cups/cups.h>
-#include <cups/ppd.h>
-
-G_BEGIN_DECLS
-
-#define PP_TYPE_PPD_OPTION_WIDGET                  (pp_ppd_option_widget_get_type ())
-#define PP_PPD_OPTION_WIDGET(obj)                  (G_TYPE_CHECK_INSTANCE_CAST ((obj), PP_TYPE_PPD_OPTION_WIDGET, PpPPDOptionWidget))
-#define PP_PPD_OPTION_WIDGET_CLASS(klass)          (G_TYPE_CHECK_CLASS_CAST ((klass),  PP_TYPE_PPD_OPTION_WIDGET, PpPPDOptionWidgetClass))
-#define PP_IS_PPD_OPTION_WIDGET(obj)               (G_TYPE_CHECK_INSTANCE_TYPE ((obj), PP_TYPE_PPD_OPTION_WIDGET))
-#define PP_IS_PPD_OPTION_WIDGET_CLASS(klass)       (G_TYPE_CHECK_CLASS_TYPE ((klass),  PP_TYPE_PPD_OPTION_WIDGET))
-#define PP_PPD_OPTION_WIDGET_GET_CLASS(obj)        (G_TYPE_INSTANCE_GET_CLASS ((obj),  PP_TYPE_PPD_OPTION_WIDGET, PpPPDOptionWidgetClass))
-
-typedef struct _PpPPDOptionWidget         PpPPDOptionWidget;
-typedef struct _PpPPDOptionWidgetClass    PpPPDOptionWidgetClass;
-typedef struct PpPPDOptionWidgetPrivate   PpPPDOptionWidgetPrivate;
-
-struct _PpPPDOptionWidget
-{
-  GtkHBox parent_instance;
-
-  PpPPDOptionWidgetPrivate *priv;
-};
-
-struct _PpPPDOptionWidgetClass
-{
-  GtkHBoxClass parent_class;
-
-  void (*changed) (PpPPDOptionWidget *widget);
-};
-
-GType	     pp_ppd_option_widget_get_type (void) G_GNUC_CONST;
-
-GtkWidget   *pp_ppd_option_widget_new      (ppd_option_t *source,
-                                            const gchar  *printer_name);
-
-G_END_DECLS
-
-#endif /* __PP_PPD_OPTION_WIDGET_H__ */
diff --git a/panels/printers/pp-ppd-selection-dialog.c b/panels/printers/pp-ppd-selection-dialog.c
deleted file mode 100644
index 0798df8..0000000
--- a/panels/printers/pp-ppd-selection-dialog.c
+++ /dev/null
@@ -1,444 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#include "config.h"
-
-#include <unistd.h>
-#include <stdlib.h>
-#include <sys/types.h>
-#include <sys/wait.h>
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <glib/gstdio.h>
-#include <gtk/gtk.h>
-
-#include <cups/cups.h>
-#include <cups/ppd.h>
-
-#include "pp-ppd-selection-dialog.h"
-
-static void pp_ppd_selection_dialog_hide (PpPPDSelectionDialog *dialog);
-
-enum
-{
-  PPD_NAMES_COLUMN = 0,
-  PPD_DISPLAY_NAMES_COLUMN
-};
-
-enum
-{
-  PPD_MANUFACTURERS_NAMES_COLUMN = 0,
-  PPD_MANUFACTURERS_DISPLAY_NAMES_COLUMN
-};
-
-
-struct _PpPPDSelectionDialog {
-  GtkBuilder *builder;
-  GtkWidget  *parent;
-  GtkWidget  *dialog;
-
-  UserResponseCallback user_callback;
-  gpointer             user_data;
-
-  gchar           *ppd_name;
-  GtkResponseType  response;
-  gchar           *manufacturer;
-
-  PPDList *list;
-};
-
-static void
-manufacturer_selection_changed_cb (GtkTreeSelection *selection,
-                                   gpointer          user_data)
-{
-  PpPPDSelectionDialog *dialog = (PpPPDSelectionDialog *) user_data;
-  GtkListStore         *store;
-  GtkTreeModel         *model;
-  GtkTreeIter           iter;
-  GtkTreeView          *models_treeview;
-  gchar                *manufacturer_name = NULL;
-  gint                  i, index;
-
-  if (gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      gtk_tree_model_get (model, &iter,
-			  PPD_MANUFACTURERS_NAMES_COLUMN, &manufacturer_name,
-			  -1);
-    }
-
-  if (manufacturer_name)
-    {
-      index = -1;
-      for (i = 0; i < dialog->list->num_of_manufacturers; i++)
-        {
-          if (g_strcmp0 (manufacturer_name,
-                         dialog->list->manufacturers[i]->manufacturer_name) == 0)
-            {
-              index = i;
-              break;
-            }
-        }
-
-      if (index >= 0)
-        {
-          models_treeview = (GtkTreeView*)
-            gtk_builder_get_object (dialog->builder, "ppd-selection-models-treeview");
-
-          store = gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_STRING);
-
-          for (i = 0; i < dialog->list->manufacturers[index]->num_of_ppds; i++)
-            {
-              gtk_list_store_append (store, &iter);
-              gtk_list_store_set (store, &iter,
-                                  PPD_NAMES_COLUMN, dialog->list->manufacturers[index]->ppds[i]->ppd_name,
-                                  PPD_DISPLAY_NAMES_COLUMN, dialog->list->manufacturers[index]->ppds[i]->ppd_display_name,
-                                  -1);
-            }
-
-          gtk_tree_view_set_model (models_treeview, GTK_TREE_MODEL (store));
-          g_object_unref (store);
-        }
-
-      g_free (manufacturer_name);
-    }
-}
-
-static void
-model_selection_changed_cb (GtkTreeSelection *selection,
-                            gpointer          user_data)
-{
-  PpPPDSelectionDialog *dialog = (PpPPDSelectionDialog *) user_data;
-  GtkTreeModel         *model;
-  GtkTreeIter           iter;
-  GtkWidget            *widget;
-  gchar                *model_name = NULL;
-
-  if (gtk_tree_selection_get_selected (selection, &model, &iter))
-    {
-      gtk_tree_model_get (model, &iter,
-                          PPD_NAMES_COLUMN, &model_name,
-			  -1);
-    }
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "ppd-selection-select-button");
-
-  if (model_name)
-    {
-      gtk_widget_set_sensitive (widget, TRUE);
-      g_free (model_name);
-    }
-  else
-    {
-      gtk_widget_set_sensitive (widget, FALSE);
-    }
-}
-
-static void
-fill_ppds_list (PpPPDSelectionDialog *dialog)
-{
-  GtkTreeSelection *selection;
-  GtkListStore     *store;
-  GtkTreePath      *path;
-  GtkTreeView      *treeview;
-  GtkTreeIter       iter;
-  GtkTreeIter      *preselect_iter = NULL;
-  GtkWidget        *widget;
-  gint              i;
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "ppd-spinner");
-  gtk_widget_hide (widget);
-  gtk_spinner_stop (GTK_SPINNER (widget));
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "progress-label");
-  gtk_widget_hide (widget);
-
-  treeview = (GtkTreeView*)
-    gtk_builder_get_object (dialog->builder, "ppd-selection-manufacturers-treeview");
-
-  if (dialog->list)
-    {
-      store = gtk_list_store_new (2, G_TYPE_STRING, G_TYPE_STRING);
-
-      for (i = 0; i < dialog->list->num_of_manufacturers; i++)
-        {
-          gtk_list_store_append (store, &iter);
-          gtk_list_store_set (store, &iter,
-                              PPD_MANUFACTURERS_NAMES_COLUMN, dialog->list->manufacturers[i]->manufacturer_name,
-                              PPD_MANUFACTURERS_DISPLAY_NAMES_COLUMN, dialog->list->manufacturers[i]->manufacturer_display_name,
-                              -1);
-
-          if (g_strcmp0 (dialog->manufacturer,
-                         dialog->list->manufacturers[i]->manufacturer_display_name) == 0)
-            {
-              preselect_iter = gtk_tree_iter_copy (&iter);
-            }
-        }
-
-      gtk_tree_view_set_model (treeview, GTK_TREE_MODEL (store));
-
-      if (preselect_iter &&
-          (selection = gtk_tree_view_get_selection (treeview)) != NULL)
-        {
-          gtk_tree_selection_select_iter (selection, preselect_iter);
-          path = gtk_tree_model_get_path (GTK_TREE_MODEL (store), preselect_iter);
-          gtk_tree_view_scroll_to_cell (treeview, path, NULL, TRUE, 0.5, 0.0);
-          gtk_tree_path_free (path);
-          gtk_tree_iter_free (preselect_iter);
-        }
-
-      g_object_unref (store);
-    }
-}
-
-static void
-populate_dialog (PpPPDSelectionDialog *dialog)
-{
-  GtkTreeViewColumn *column;
-  GtkCellRenderer   *renderer;
-  GtkTreeView       *manufacturers_treeview;
-  GtkTreeView       *models_treeview;
-  GtkWidget         *widget;
-
-  manufacturers_treeview = (GtkTreeView*)
-    gtk_builder_get_object (dialog->builder, "ppd-selection-manufacturers-treeview");
-
-  renderer = gtk_cell_renderer_text_new ();
-
-  /* Translators: Name of column showing printer manufacturers */
-  column = gtk_tree_view_column_new_with_attributes (_("Manufacturers"), renderer,
-                                                     "text", PPD_MANUFACTURERS_DISPLAY_NAMES_COLUMN, NULL);
-  gtk_tree_view_column_set_expand (column, TRUE);
-  gtk_tree_view_append_column (manufacturers_treeview, column);
-
-
-  models_treeview = (GtkTreeView*)
-    gtk_builder_get_object (dialog->builder, "ppd-selection-models-treeview");
-
-  renderer = gtk_cell_renderer_text_new ();
-
-  /* Translators: Name of column showing printer drivers */
-  column = gtk_tree_view_column_new_with_attributes (_("Drivers"), renderer,
-                                                     "text", PPD_DISPLAY_NAMES_COLUMN, NULL);
-  gtk_tree_view_column_set_expand (column, TRUE);
-  gtk_tree_view_append_column (models_treeview, column);
-
-
-  g_signal_connect (gtk_tree_view_get_selection (models_treeview),
-                    "changed", G_CALLBACK (model_selection_changed_cb), dialog);
-
-  g_signal_connect (gtk_tree_view_get_selection (manufacturers_treeview),
-                    "changed", G_CALLBACK (manufacturer_selection_changed_cb), dialog);
-
-  gtk_widget_show_all (dialog->dialog);
-
-  if (!dialog->list)
-    {
-      widget = (GtkWidget*)
-        gtk_builder_get_object (dialog->builder, "ppd-spinner");
-      gtk_widget_show (widget);
-      gtk_spinner_start (GTK_SPINNER (widget));
-
-      widget = (GtkWidget*)
-        gtk_builder_get_object (dialog->builder, "progress-label");
-      gtk_widget_show (widget);
-    }
-  else
-    {
-      fill_ppds_list (dialog);
-    }
-}
-
-static void
-ppd_selection_dialog_response_cb (GtkDialog *dialog,
-                                  gint       response_id,
-                                  gpointer   user_data)
-{
-  PpPPDSelectionDialog *ppd_selection_dialog = (PpPPDSelectionDialog*) user_data;
-  GtkTreeSelection     *selection;
-  GtkTreeModel         *model;
-  GtkTreeView          *models_treeview;
-  GtkTreeIter           iter;
-
-  pp_ppd_selection_dialog_hide (ppd_selection_dialog);
-
-  ppd_selection_dialog->response = response_id;
-  if (response_id == GTK_RESPONSE_OK)
-    {
-      models_treeview = (GtkTreeView*)
-        gtk_builder_get_object (ppd_selection_dialog->builder, "ppd-selection-models-treeview");
-
-      if (models_treeview)
-        {
-          selection = gtk_tree_view_get_selection (models_treeview);
-
-          if (selection)
-            {
-              if (gtk_tree_selection_get_selected (selection, &model, &iter))
-                {
-                  gtk_tree_model_get (model, &iter,
-                                      PPD_NAMES_COLUMN, &ppd_selection_dialog->ppd_name,
-            			  -1);
-                }
-            }
-        }
-    }
-
-  ppd_selection_dialog->user_callback (GTK_DIALOG (ppd_selection_dialog->dialog),
-                                       response_id,
-                                       ppd_selection_dialog->user_data);
-}
-
-static void
-update_alignment_padding (GtkWidget     *widget,
-                          GtkAllocation *allocation,
-                          gpointer       user_data)
-{
-  PpPPDSelectionDialog *dialog = (PpPPDSelectionDialog*) user_data;
-  GtkAllocation         allocation2;
-  GtkWidget            *action_area;
-  gint                  offset_left, offset_right;
-  guint                 padding_left, padding_right,
-                        padding_top, padding_bottom;
-
-  action_area = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "dialog-action-area1");
-  gtk_widget_get_allocation (action_area, &allocation2);
-
-  offset_left = allocation2.x - allocation->x;
-  offset_right = (allocation->x + allocation->width) -
-                 (allocation2.x + allocation2.width);
-
-  gtk_alignment_get_padding  (GTK_ALIGNMENT (widget),
-                              &padding_top, &padding_bottom,
-                              &padding_left, &padding_right);
-  if (allocation->x >= 0 && allocation2.x >= 0)
-    {
-      if (offset_left > 0 && offset_left != padding_left)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (widget),
-                                   padding_top, padding_bottom,
-                                   offset_left, padding_right);
-
-      gtk_alignment_get_padding  (GTK_ALIGNMENT (widget),
-                                  &padding_top, &padding_bottom,
-                                  &padding_left, &padding_right);
-      if (offset_right > 0 && offset_right != padding_right)
-        gtk_alignment_set_padding (GTK_ALIGNMENT (widget),
-                                   padding_top, padding_bottom,
-                                   padding_left, offset_right);
-    }
-}
-
-PpPPDSelectionDialog *
-pp_ppd_selection_dialog_new (GtkWindow            *parent,
-                             PPDList              *ppd_list,
-                             gchar                *manufacturer,
-                             UserResponseCallback  user_callback,
-                             gpointer              user_data)
-{
-  PpPPDSelectionDialog *dialog;
-  GtkWidget            *widget;
-  GError               *error = NULL;
-  gchar                *objects[] = { "ppd-selection-dialog", NULL };
-  guint                 builder_result;
-
-  dialog = g_new0 (PpPPDSelectionDialog, 1);
-
-  dialog->builder = gtk_builder_new ();
-  dialog->parent = GTK_WIDGET (parent);
-
-  builder_result = gtk_builder_add_objects_from_file (dialog->builder,
-                                                      DATADIR"/ppd-selection-dialog.ui",
-                                                      objects, &error);
-
-  if (builder_result == 0)
-    {
-      g_warning ("Could not load ui: %s", error->message);
-      g_error_free (error);
-      return NULL;
-    }
-
-  dialog->dialog = (GtkWidget *) gtk_builder_get_object (dialog->builder, "ppd-selection-dialog");
-  dialog->user_callback = user_callback;
-  dialog->user_data = user_data;
-
-  dialog->response = GTK_RESPONSE_NONE;
-  dialog->list = ppd_list_copy (ppd_list);
-
-  dialog->manufacturer = get_standard_manufacturers_name (manufacturer);
-
-  /* connect signals */
-  g_signal_connect (dialog->dialog, "delete-event", G_CALLBACK (gtk_widget_hide_on_delete), NULL);
-  g_signal_connect (dialog->dialog, "response", G_CALLBACK (ppd_selection_dialog_response_cb), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "content-alignment");
-  g_signal_connect (widget, "size-allocate", G_CALLBACK (update_alignment_padding), dialog);
-
-  widget = (GtkWidget*)
-    gtk_builder_get_object (dialog->builder, "ppd-spinner");
-  gtk_spinner_start (GTK_SPINNER (widget));
-
-  populate_dialog (dialog);
-
-  gtk_window_set_transient_for (GTK_WINDOW (dialog->dialog), GTK_WINDOW (parent));
-  gtk_window_present (GTK_WINDOW (dialog->dialog));
-  gtk_widget_show_all (GTK_WIDGET (dialog->dialog));
-
-  return dialog;
-}
-
-void
-pp_ppd_selection_dialog_free (PpPPDSelectionDialog *dialog)
-{
-  gtk_widget_destroy (GTK_WIDGET (dialog->dialog));
-
-  g_object_unref (dialog->builder);
-
-  g_free (dialog->ppd_name);
-
-  g_free (dialog->manufacturer);
-
-  g_free (dialog);
-}
-
-gchar *
-pp_ppd_selection_dialog_get_ppd_name (PpPPDSelectionDialog *dialog)
-{
-  return g_strdup (dialog->ppd_name);
-}
-
-void
-pp_ppd_selection_dialog_set_ppd_list (PpPPDSelectionDialog *dialog,
-                                      PPDList              *list)
-{
-  dialog->list = list;
-  fill_ppds_list (dialog);
-}
-
-static void
-pp_ppd_selection_dialog_hide (PpPPDSelectionDialog *dialog)
-{
-  gtk_widget_hide (GTK_WIDGET (dialog->dialog));
-}
diff --git a/panels/printers/pp-ppd-selection-dialog.h b/panels/printers/pp-ppd-selection-dialog.h
deleted file mode 100644
index 159519e..0000000
--- a/panels/printers/pp-ppd-selection-dialog.h
+++ /dev/null
@@ -1,44 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2012  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- * Author: Marek Kasik <mkasik@redhat.com>
- */
-
-#ifndef __PP_PPD_SELECTION_DIALOG_H__
-#define __PP_PPD_SELECTION_DIALOG_H__
-
-#include <gtk/gtk.h>
-#include "pp-utils.h"
-
-G_BEGIN_DECLS
-
-typedef struct _PpPPDSelectionDialog PpPPDSelectionDialog;
-
-PpPPDSelectionDialog *pp_ppd_selection_dialog_new          (GtkWindow                 *parent,
-                                                            PPDList                   *ppd_list,
-                                                            gchar                     *manufacturer,
-                                                            UserResponseCallback       user_callback,
-                                                            gpointer                   user_data);
-gchar                *pp_ppd_selection_dialog_get_ppd_name (PpPPDSelectionDialog      *dialog);
-void                  pp_ppd_selection_dialog_set_ppd_list (PpPPDSelectionDialog      *dialog,
-                                                            PPDList                   *list);
-void                  pp_ppd_selection_dialog_free         (PpPPDSelectionDialog      *dialog);
-
-G_END_DECLS
-
-#endif
diff --git a/panels/printers/pp-utils.c b/panels/printers/pp-utils.c
deleted file mode 100644
index 54cbeda..0000000
--- a/panels/printers/pp-utils.c
+++ /dev/null
@@ -1,3960 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2009-2010  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#include "config.h"
-
-#include <glib.h>
-#include <glib/gi18n.h>
-#include <glib/gstdio.h>
-#include <gtk/gtk.h>
-#include <cups/cups.h>
-#include <cups/ppd.h>
-
-#include "pp-utils.h"
-
-#define DBUS_TIMEOUT      120000
-#define DBUS_TIMEOUT_LONG 600000
-
-#if (CUPS_VERSION_MAJOR > 1) || (CUPS_VERSION_MINOR > 5)
-#define HAVE_CUPS_1_6 1
-#endif
-
-#ifndef HAVE_CUPS_1_6
-#define ippGetCount(attr)     attr->num_values
-#define ippGetGroupTag(attr)  attr->group_tag
-#define ippGetValueTag(attr)  attr->value_tag
-#define ippGetName(attr)      attr->name
-#define ippGetStatusCode(ipp) ipp->request.status.status_code
-#define ippGetInteger(attr, element) attr->values[element].integer
-#define ippGetString(attr, element, language) attr->values[element].string.text
-#define ippGetBoolean(attr, element) attr->values[element].boolean
-
-static int
-ippGetRange (ipp_attribute_t *attr,
-             int element,
-             int *upper)
-{
-  *upper = attr->values[element].range.upper;
-  return (attr->values[element].range.lower);
-}
-
-static ipp_attribute_t *
-ippFirstAttribute (ipp_t *ipp)
-{
-  if (!ipp)
-    return (NULL);
-  return (ipp->current = ipp->attrs);
-}
-
-static ipp_attribute_t *
-ippNextAttribute (ipp_t *ipp)
-{
-  if (!ipp || !ipp->current)
-    return (NULL);
-  return (ipp->current = ipp->current->next);
-}
-#endif
-
-
-gchar *
-get_tag_value (const gchar *tag_string, const gchar *tag_name)
-{
-  gchar **tag_string_splitted = NULL;
-  gchar  *tag_value = NULL;
-  gint    tag_name_length;
-  gint    i;
-
-  if (tag_string && tag_name)
-    {
-      tag_name_length = strlen (tag_name);
-      tag_string_splitted = g_strsplit (tag_string, ";", 0);
-      if (tag_string_splitted)
-        {
-          for (i = 0; i < g_strv_length (tag_string_splitted); i++)
-            if (g_ascii_strncasecmp (tag_string_splitted[i], tag_name, tag_name_length) == 0)
-              if (strlen (tag_string_splitted[i]) > tag_name_length + 1)
-                tag_value = g_strdup (tag_string_splitted[i] + tag_name_length + 1);
-
-          g_strfreev (tag_string_splitted);
-        }
-    }
-
-  return tag_value;
-}
-
-
-/*
- * Normalize given string so that it is lowercase, doesn't
- * have trailing or leading whitespaces and digits doesn't
- * neighbour with alphabetic.
- * (see cupshelpers/ppds.py from system-config-printer)
- */
-static gchar *
-normalize (const gchar *input_string)
-{
-  gchar *tmp = NULL;
-  gchar *res = NULL;
-  gchar *result = NULL;
-  gint   i, j = 0, k = -1;
-
-  if (input_string)
-    {
-      tmp = g_strstrip (g_ascii_strdown (input_string, -1));
-      if (tmp)
-        {
-          res = g_new (gchar, 2 * strlen (tmp));
-
-          for (i = 0; i < strlen (tmp); i++)
-            {
-              if ((g_ascii_isalpha (tmp[i]) && k >= 0 && g_ascii_isdigit (res[k])) ||
-                  (g_ascii_isdigit (tmp[i]) && k >= 0 && g_ascii_isalpha (res[k])))
-                {
-                  res[j] = ' ';
-                  k = j++;
-                  res[j] = tmp[i];
-                  k = j++;
-                }
-              else
-                {
-                  if (g_ascii_isspace (tmp[i]) || !g_ascii_isalnum (tmp[i]))
-                    {
-                      if (!(k >= 0 && res[k] == ' '))
-                        {
-                          res[j] = ' ';
-                          k = j++;
-                        }
-                    }
-                  else
-                    {
-                      res[j] = tmp[i];
-                      k = j++;
-                    }
-                }
-            }
-
-          res[j] = '\0';
-
-          result = g_strdup (res);
-          g_free (tmp);
-          g_free (res);
-        }
-    }
-
-  return result;
-}
-
-
-char *
-get_dest_attr (const char *dest_name,
-               const char *attr)
-{
-  cups_dest_t *dests;
-  int          num_dests;
-  cups_dest_t *dest;
-  const char  *value;
-  char        *ret;
-
-  if (dest_name == NULL)
-          return NULL;
-
-  ret = NULL;
-
-  num_dests = cupsGetDests (&dests);
-  if (num_dests < 1) {
-          g_debug ("Unable to get printer destinations");
-          return NULL;
-  }
-
-  dest = cupsGetDest (dest_name, NULL, num_dests, dests);
-  if (dest == NULL) {
-          g_debug ("Unable to find a printer named '%s'", dest_name);
-          goto out;
-  }
-
-  value = cupsGetOption (attr, dest->num_options, dest->options);
-  if (value == NULL) {
-          g_debug ("Unable to get %s for '%s'", attr, dest_name);
-          goto out;
-  }
-  ret = g_strdup (value);
-out:
-  cupsFreeDests (num_dests, dests);
-
-  return ret;
-}
-
-gchar *
-get_ppd_attribute (const gchar *ppd_file_name,
-                   const gchar *attribute_name)
-{
-  ppd_file_t *ppd_file = NULL;
-  ppd_attr_t *ppd_attr = NULL;
-  gchar *result = NULL;
-
-  if (ppd_file_name)
-    {
-      ppd_file = ppdOpenFile (ppd_file_name);
-
-      if (ppd_file)
-        {
-          ppd_attr = ppdFindAttr (ppd_file, attribute_name, NULL);
-          if (ppd_attr != NULL)
-            result = g_strdup (ppd_attr->value);
-          ppdClose (ppd_file);
-        }
-    }
-
-  return result;
-}
-
-/* Cancels subscription of given id */
-void
-cancel_cups_subscription (gint id)
-{
-  http_t *http;
-  ipp_t  *request;
-
-  if (id >= 0 &&
-      ((http = httpConnectEncrypt (cupsServer (), ippPort (),
-                                  cupsEncryption ())) != NULL)) {
-    request = ippNewRequest (IPP_CANCEL_SUBSCRIPTION);
-    ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                 "printer-uri", NULL, "/");
-    ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-                 "requesting-user-name", NULL, cupsUser ());
-    ippAddInteger (request, IPP_TAG_OPERATION, IPP_TAG_INTEGER,
-                  "notify-subscription-id", id);
-    ippDelete (cupsDoRequest (http, request, "/"));
-    httpClose (http);
-  }
-}
-
-/* Returns id of renewed subscription or new id */
-gint
-renew_cups_subscription (gint id,
-                         const char * const *events,
-                         gint num_events,
-                         gint lease_duration)
-{
-  ipp_attribute_t              *attr = NULL;
-  http_t                       *http;
-  ipp_t                        *request;
-  ipp_t                        *response = NULL;
-  gint                          result = -1;
-
-  if ((http = httpConnectEncrypt (cupsServer (), ippPort (),
-                                  cupsEncryption ())) == NULL) {
-    g_debug ("Connection to CUPS server \'%s\' failed.", cupsServer ());
-  }
-  else {
-    if (id >= 0) {
-      request = ippNewRequest (IPP_RENEW_SUBSCRIPTION);
-      ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                   "printer-uri", NULL, "/");
-      ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-                   "requesting-user-name", NULL, cupsUser ());
-      ippAddInteger (request, IPP_TAG_OPERATION, IPP_TAG_INTEGER,
-                    "notify-subscription-id", id);
-      ippAddInteger (request, IPP_TAG_SUBSCRIPTION, IPP_TAG_INTEGER,
-                    "notify-lease-duration", lease_duration);
-      response = cupsDoRequest (http, request, "/");
-      if (response != NULL &&
-          ippGetStatusCode (response) <= IPP_OK_CONFLICT) {
-        if ((attr = ippFindAttribute (response, "notify-lease-duration",
-                                      IPP_TAG_INTEGER)) == NULL)
-          g_debug ("No notify-lease-duration in response!\n");
-        else
-          if (ippGetInteger (attr, 0) == lease_duration)
-            result = id;
-      }
-    }
-
-    if (result < 0) {
-      request = ippNewRequest (IPP_CREATE_PRINTER_SUBSCRIPTION);
-      ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                    "printer-uri", NULL, "/");
-      ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_NAME,
-                    "requesting-user-name", NULL, cupsUser ());
-      ippAddStrings (request, IPP_TAG_SUBSCRIPTION, IPP_TAG_KEYWORD,
-                     "notify-events", num_events, NULL, events);
-      ippAddString (request, IPP_TAG_SUBSCRIPTION, IPP_TAG_KEYWORD,
-                    "notify-pull-method", NULL, "ippget");
-      ippAddString (request, IPP_TAG_SUBSCRIPTION, IPP_TAG_URI,
-                    "notify-recipient-uri", NULL, "dbus://");
-      ippAddInteger (request, IPP_TAG_SUBSCRIPTION, IPP_TAG_INTEGER,
-                     "notify-lease-duration", lease_duration);
-      response = cupsDoRequest (http, request, "/");
-
-      if (response != NULL &&
-          ippGetStatusCode (response) <= IPP_OK_CONFLICT) {
-        if ((attr = ippFindAttribute (response, "notify-subscription-id",
-                                      IPP_TAG_INTEGER)) == NULL)
-          g_debug ("No notify-subscription-id in response!\n");
-        else
-          result = ippGetInteger (attr, 0);
-      }
-    }
-
-    if (response)
-      ippDelete (response);
-
-    httpClose (http);
-  }
-
-  return result;
-}
-
-/*  Set default destination in ~/.cups/lpoptions.
- *  Unset default destination if "dest" is NULL.
- */
-void
-set_local_default_printer (const gchar *printer_name)
-{
-  cups_dest_t *dests = NULL;
-  int          num_dests = 0;
-  int          i;
-
-  num_dests = cupsGetDests (&dests);
-
-  for (i = 0; i < num_dests; i ++)
-    {
-      if (printer_name && g_strcmp0 (dests[i].name, printer_name) == 0)
-        dests[i].is_default = 1;
-      else
-        dests[i].is_default = 0;
-    }
-
-  cupsSetDests (num_dests, dests);
-}
-
-/*
- * This function does something which should be provided by CUPS...
- * It returns FALSE if the renaming fails.
- */
-gboolean
-printer_rename (const gchar *old_name,
-                const gchar *new_name)
-{
-  ipp_attribute_t  *attr = NULL;
-  cups_ptype_t      printer_type = 0;
-  cups_dest_t      *dests = NULL;
-  cups_dest_t      *dest = NULL;
-  cups_job_t       *jobs = NULL;
-  GDBusConnection  *bus;
-  const char       *printer_location = NULL;
-  const char       *printer_info = NULL;
-  const char       *printer_uri = NULL;
-  const char       *device_uri = NULL;
-  const char       *job_sheets = NULL;
-  gboolean          result = FALSE;
-  gboolean          accepting = TRUE;
-  gboolean          printer_paused = FALSE;
-  gboolean          default_printer = FALSE;
-  gboolean          printer_shared = FALSE;
-  GError           *error = NULL;
-  http_t           *http;
-  gchar            *ppd_link;
-  gchar            *ppd_filename = NULL;
-  gchar           **sheets = NULL;
-  gchar           **users_allowed = NULL;
-  gchar           **users_denied = NULL;
-  gchar           **member_names = NULL;
-  gchar            *start_sheet = NULL;
-  gchar            *end_sheet = NULL;
-  gchar            *error_policy = NULL;
-  gchar            *op_policy = NULL;
-  ipp_t            *request;
-  ipp_t            *response;
-  gint              i;
-  int               num_dests = 0;
-  int               num_jobs = 0;
-  static const char * const requested_attrs[] = {
-    "printer-error-policy",
-    "printer-op-policy",
-    "requesting-user-name-allowed",
-    "requesting-user-name-denied",
-    "member-names"};
-
-  if (old_name == NULL ||
-      old_name[0] == '\0' ||
-      new_name == NULL ||
-      new_name[0] == '\0' ||
-      g_strcmp0 (old_name, new_name) == 0)
-    return FALSE;
-
-  num_dests = cupsGetDests (&dests);
-
-  dest = cupsGetDest (new_name, NULL, num_dests, dests);
-  if (dest)
-    {
-      cupsFreeDests (num_dests, dests);
-      return FALSE;
-    }
-
-  num_jobs = cupsGetJobs (&jobs, old_name, 0, CUPS_WHICHJOBS_ACTIVE);
-  cupsFreeJobs (num_jobs, jobs);
-  if (num_jobs > 1)
-    {
-      g_warning ("There are queued jobs on printer %s!", old_name);
-      cupsFreeDests (num_dests, dests);
-      return FALSE;
-    }
-
-  /*
-   * Gather some informations about the original printer
-   */
-  dest = cupsGetDest (old_name, NULL, num_dests, dests);
-  if (dest)
-    {
-      for (i = 0; i < dest->num_options; i++)
-        {
-          if (g_strcmp0 (dest->options[i].name, "printer-is-accepting-jobs") == 0)
-            accepting = g_strcmp0 (dest->options[i].value, "true") == 0;
-          else if (g_strcmp0 (dest->options[i].name, "printer-is-shared") == 0)
-            printer_shared = g_strcmp0 (dest->options[i].value, "true") == 0;
-          else if (g_strcmp0 (dest->options[i].name, "device-uri") == 0)
-            device_uri = dest->options[i].value;
-          else if (g_strcmp0 (dest->options[i].name, "printer-uri-supported") == 0)
-            printer_uri = dest->options[i].value;
-          else if (g_strcmp0 (dest->options[i].name, "printer-info") == 0)
-            printer_info = dest->options[i].value;
-          else if (g_strcmp0 (dest->options[i].name, "printer-location") == 0)
-            printer_location = dest->options[i].value;
-          else if (g_strcmp0 (dest->options[i].name, "printer-state") == 0)
-            printer_paused = g_strcmp0 (dest->options[i].value, "5") == 0;
-          else if (g_strcmp0 (dest->options[i].name, "job-sheets") == 0)
-            job_sheets = dest->options[i].value;
-          else if (g_strcmp0 (dest->options[i].name, "printer-type") == 0)
-            printer_type = atoi (dest->options[i].value);
-        }
-      default_printer = dest->is_default;
-    }
-  cupsFreeDests (num_dests, dests);
-
-  if (accepting)
-    {
-      printer_set_accepting_jobs (old_name, FALSE, NULL);
-
-      num_jobs = cupsGetJobs (&jobs, old_name, 0, CUPS_WHICHJOBS_ACTIVE);
-      cupsFreeJobs (num_jobs, jobs);
-      if (num_jobs > 1)
-        {
-          printer_set_accepting_jobs (old_name, accepting, NULL);
-          g_warning ("There are queued jobs on printer %s!", old_name);
-          return FALSE;
-        }
-    }
-
-
-  /*
-   * Gather additional informations about the original printer
-   */
-  if ((http = httpConnectEncrypt (cupsServer (), ippPort (),
-                                  cupsEncryption ())) != NULL)
-    {
-      request = ippNewRequest (IPP_GET_PRINTER_ATTRIBUTES);
-      ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                    "printer-uri", NULL, printer_uri);
-      ippAddStrings (request, IPP_TAG_OPERATION, IPP_TAG_KEYWORD,
-                     "requested-attributes", G_N_ELEMENTS (requested_attrs), NULL, requested_attrs);
-      response = cupsDoRequest (http, request, "/");
-
-      if (response)
-        {
-          if (ippGetStatusCode (response) <= IPP_OK_CONFLICT)
-            {
-              attr = ippFindAttribute (response, "printer-error-policy", IPP_TAG_NAME);
-              if (attr)
-                error_policy = g_strdup (ippGetString (attr, 0, NULL));
-
-              attr = ippFindAttribute (response, "printer-op-policy", IPP_TAG_NAME);
-              if (attr)
-                op_policy = g_strdup (ippGetString (attr, 0, NULL));
-
-              attr = ippFindAttribute (response, "requesting-user-name-allowed", IPP_TAG_NAME);
-              if (attr && ippGetCount (attr) > 0)
-                {
-                  users_allowed = g_new0 (gchar *, ippGetCount (attr) + 1);
-                  for (i = 0; i < ippGetCount (attr); i++)
-                    users_allowed[i] = g_strdup (ippGetString (attr, i, NULL));
-                }
-
-              attr = ippFindAttribute (response, "requesting-user-name-denied", IPP_TAG_NAME);
-              if (attr && ippGetCount (attr) > 0)
-                {
-                  users_denied = g_new0 (gchar *, ippGetCount (attr) + 1);
-                  for (i = 0; i < ippGetCount (attr); i++)
-                    users_denied[i] = g_strdup (ippGetString (attr, i, NULL));
-                }
-
-              attr = ippFindAttribute (response, "member-names", IPP_TAG_NAME);
-              if (attr && ippGetCount (attr) > 0)
-                {
-                  member_names = g_new0 (gchar *, ippGetCount (attr) + 1);
-                  for (i = 0; i < ippGetCount (attr); i++)
-                    member_names[i] = g_strdup (ippGetString (attr, i, NULL));
-                }
-            }
-          ippDelete (response);
-        }
-      httpClose (http);
-    }
-
-  if (job_sheets)
-    {
-      sheets = g_strsplit (job_sheets, ",", 0);
-      if (g_strv_length (sheets) > 1)
-        {
-          start_sheet = sheets[0];
-          end_sheet = sheets[1];
-        }
-    }
-
-  ppd_link = g_strdup (cupsGetPPD (old_name));
-  if (ppd_link)
-    {
-      ppd_filename = g_file_read_link (ppd_link, NULL);
-
-      if (!ppd_filename)
-        ppd_filename = g_strdup (ppd_link);
-    }
-
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-   }
-  else
-    {
-      if (printer_type & CUPS_PRINTER_CLASS)
-        {
-          if (member_names)
-            for (i = 0; i < g_strv_length (member_names); i++)
-              class_add_printer (new_name, member_names[i]);
-        }
-      else
-        {
-          GVariant *output;
-
-          output = g_dbus_connection_call_sync (bus,
-                                                MECHANISM_BUS,
-                                                "/",
-                                                MECHANISM_BUS,
-                                                "PrinterAddWithPpdFile",
-                                                g_variant_new ("(sssss)",
-                                                               new_name,
-                                                               device_uri ? device_uri : "",
-                                                               ppd_filename ? ppd_filename : "",
-                                                               printer_info ? printer_info : "",
-                                                               printer_location ? printer_location : ""),
-                                                G_VARIANT_TYPE ("(s)"),
-                                                G_DBUS_CALL_FLAGS_NONE,
-                                                -1,
-                                                NULL,
-                                                &error);
-          g_object_unref (bus);
-
-          if (output)
-            {
-              const gchar *ret_error;
-
-              g_variant_get (output, "(&s)", &ret_error);
-              if (ret_error[0] != '\0')
-                g_warning ("cups-pk-helper: rename of printer %s to %s failed: %s", old_name, new_name, ret_error);
-
-              g_variant_unref (output);
-            }
-          else
-            {
-              g_warning ("%s", error->message);
-              g_error_free (error);
-            }
-        }
-    }
-
-  if (ppd_link)
-    {
-      g_unlink (ppd_link);
-      g_free (ppd_link);
-      g_free (ppd_filename);
-    }
-
-  num_dests = cupsGetDests (&dests);
-  dest = cupsGetDest (new_name, NULL, num_dests, dests);
-  if (dest)
-    {
-      printer_set_accepting_jobs (new_name, accepting, NULL);
-      printer_set_enabled (new_name, !printer_paused);
-      printer_set_shared (new_name, printer_shared);
-      printer_set_job_sheets (new_name, start_sheet, end_sheet);
-      printer_set_policy (new_name, op_policy, FALSE);
-      printer_set_policy (new_name, error_policy, TRUE);
-      printer_set_users (new_name, users_allowed, TRUE);
-      printer_set_users (new_name, users_denied, FALSE);
-      if (default_printer)
-        printer_set_default (new_name);
-
-      printer_delete (old_name);
-
-      result = TRUE;
-    }
-  else
-    printer_set_accepting_jobs (old_name, accepting, NULL);
-
-  cupsFreeDests (num_dests, dests);
-  g_free (op_policy);
-  g_free (error_policy);
-  if (sheets)
-    g_strfreev (sheets);
-  if (users_allowed)
-    g_strfreev (users_allowed);
-  if (users_denied)
-    g_strfreev (users_denied);
-
-  return result;
-}
-
-gboolean
-printer_set_location (const gchar *printer_name,
-                      const gchar *location)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name || !location)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterSetLocation",
-                                        g_variant_new ("(ss)", printer_name, location),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of location for printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_accepting_jobs (const gchar *printer_name,
-                            gboolean     accepting_jobs,
-                            const gchar *reason)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterSetAcceptJobs",
-                                        g_variant_new ("(sbs)",
-                                                       printer_name,
-                                                       accepting_jobs,
-                                                       reason ? reason : ""),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of acceptance of jobs for printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_enabled (const gchar *printer_name,
-                     gboolean     enabled)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterSetEnabled",
-                                        g_variant_new ("(sb)", printer_name, enabled),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of enablement of printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_delete (const gchar *printer_name)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterDelete",
-                                        g_variant_new ("(s)", printer_name),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: removing of printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_default (const gchar *printer_name)
-{
-  GDBusConnection *bus;
-  const char *cups_server;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name)
-    return TRUE;
-
-  cups_server = cupsServer ();
-  if (g_ascii_strncasecmp (cups_server, "localhost", 9) == 0 ||
-      g_ascii_strncasecmp (cups_server, "127.0.0.1", 9) == 0 ||
-      g_ascii_strncasecmp (cups_server, "::1", 3) == 0 ||
-      cups_server[0] == '/')
-    {
-      /* Clean .cups/lpoptions before setting
-       * default printer on local CUPS server.
-       */
-      set_local_default_printer (NULL);
-
-      bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-      if (!bus)
-        {
-          g_warning ("Failed to get system bus: %s", error->message);
-          g_error_free (error);
-        }
-      else
-        {
-          output = g_dbus_connection_call_sync (bus,
-                                                MECHANISM_BUS,
-                                                "/",
-                                                MECHANISM_BUS,
-                                                "PrinterSetDefault",
-                                                g_variant_new ("(s)", printer_name),
-                                                G_VARIANT_TYPE ("(s)"),
-                                                G_DBUS_CALL_FLAGS_NONE,
-                                                -1,
-                                                NULL,
-                                                &error);
-          g_object_unref (bus);
-
-          if (output)
-            {
-              const gchar *ret_error;
-
-              g_variant_get (output, "(&s)", &ret_error);
-              if (ret_error[0] != '\0')
-                g_warning ("cups-pk-helper: setting default printer to %s failed: %s", printer_name, ret_error);
-              else
-                result = TRUE;
-
-              g_variant_unref (output);
-            }
-          else
-            {
-              g_warning ("%s", error->message);
-              g_error_free (error);
-            }
-        }
-    }
-  else
-    /* Store default printer to .cups/lpoptions
-     * if we are connected to a remote CUPS server.
-     */
-    {
-      set_local_default_printer (printer_name);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_shared (const gchar *printer_name,
-                    gboolean     shared)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterSetShared",
-                                        g_variant_new ("(sb)", printer_name, shared),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of sharing of printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_job_sheets (const gchar *printer_name,
-                        const gchar *start_sheet,
-                        const gchar *end_sheet)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  GError     *error = NULL;
-  gboolean    result = FALSE;
-
-  if (!printer_name || !start_sheet || !end_sheet)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterSetJobSheets",
-                                        g_variant_new ("(sss)", printer_name, start_sheet, end_sheet),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of job sheets for printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_policy (const gchar *printer_name,
-                    const gchar *policy,
-                    gboolean     error_policy)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean   result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name || !policy)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  if (error_policy)
-    output = g_dbus_connection_call_sync (bus,
-                                          MECHANISM_BUS,
-                                          "/",
-                                          MECHANISM_BUS,
-                                          "PrinterSetErrorPolicy",
-                                          g_variant_new ("(ss)", printer_name, policy),
-                                          G_VARIANT_TYPE ("(s)"),
-                                          G_DBUS_CALL_FLAGS_NONE,
-                                          -1,
-                                          NULL,
-                                          &error);
-  else
-    output = g_dbus_connection_call_sync (bus,
-                                          MECHANISM_BUS,
-                                          "/",
-                                          MECHANISM_BUS,
-                                          "PrinterSetOpPolicy",
-                                          g_variant_new ("(ss)", printer_name, policy),
-                                          G_VARIANT_TYPE ("(s)"),
-                                          G_DBUS_CALL_FLAGS_NONE,
-                                          -1,
-                                          NULL,
-                                          &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of a policy for printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_set_users (const gchar  *printer_name,
-                   gchar       **users,
-                   gboolean      allowed)
-{
-  GDBusConnection *bus;
-  GVariantBuilder array_builder;
-  gint        i;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!printer_name || !users)
-    return TRUE;
-  
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  g_variant_builder_init (&array_builder, G_VARIANT_TYPE ("as"));
-  for (i = 0; users[i]; i++)
-    g_variant_builder_add (&array_builder, "s", users[i]);
-
-  if (allowed)
-    output = g_dbus_connection_call_sync (bus,
-                                          MECHANISM_BUS,
-                                          "/",
-                                          MECHANISM_BUS,
-                                          "PrinterSetUsersAllowed",
-                                          g_variant_new ("(sas)", printer_name, &array_builder),
-                                          G_VARIANT_TYPE ("(s)"),
-                                          G_DBUS_CALL_FLAGS_NONE,
-                                          -1,
-                                          NULL,
-                                          &error);
-  else
-    output = g_dbus_connection_call_sync (bus,
-                                          MECHANISM_BUS,
-                                          "/",
-                                          MECHANISM_BUS,
-                                          "PrinterSetUsersDenied",
-                                          g_variant_new ("(sas)", printer_name, &array_builder),
-                                          G_VARIANT_TYPE ("(s)"),
-                                          G_DBUS_CALL_FLAGS_NONE,
-                                          -1,
-                                          NULL,
-                                          &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of access list for printer %s failed: %s", printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-class_add_printer (const gchar *class_name,
-                   const gchar *printer_name)
-{
-  GDBusConnection *bus;
-  GVariant   *output;
-  gboolean    result = FALSE;
-  GError     *error = NULL;
-
-  if (!class_name || !printer_name)
-    return TRUE;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return TRUE;
-   }
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "ClassAddPrinter",
-                                        g_variant_new ("(ss)", class_name, printer_name),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: adding of printer %s to class %s failed: %s", printer_name, class_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  return result;
-}
-
-gboolean
-printer_is_local (cups_ptype_t  printer_type,
-                  const gchar  *device_uri)
-{
-  gboolean result = TRUE;
-  char     scheme[HTTP_MAX_URI];
-  char     username[HTTP_MAX_URI];
-  char     hostname[HTTP_MAX_URI];
-  char     resource[HTTP_MAX_URI];
-  int      port;
-
-  if (printer_type &
-      (CUPS_PRINTER_DISCOVERED |
-       CUPS_PRINTER_REMOTE |
-       CUPS_PRINTER_IMPLICIT))
-    result = FALSE;
-
-  if (device_uri == NULL || !result)
-    return result;
-
-  httpSeparateURI (HTTP_URI_CODING_ALL, device_uri,
-		   scheme, sizeof (scheme), 
-		   username, sizeof (username),
-		   hostname, sizeof (hostname),
-		   &port,
-		   resource, sizeof (resource));
-
-  if (g_str_equal (scheme, "ipp") ||
-      g_str_equal (scheme, "smb") ||
-      g_str_equal (scheme, "socket") ||
-      g_str_equal (scheme, "lpd"))
-    result = FALSE;
-
-  return result;
-}
-
-gchar*
-printer_get_hostname (cups_ptype_t  printer_type,
-                      const gchar  *device_uri,
-                      const gchar  *printer_uri)
-{
-  gboolean  local = TRUE;
-  gchar    *result = NULL;
-  char      scheme[HTTP_MAX_URI];
-  char      username[HTTP_MAX_URI];
-  char      hostname[HTTP_MAX_URI];
-  char      resource[HTTP_MAX_URI];
-  int       port;
-
-  if (device_uri == NULL)
-    return result;
-
-  if (printer_type & (CUPS_PRINTER_DISCOVERED |
-                      CUPS_PRINTER_REMOTE |
-                      CUPS_PRINTER_IMPLICIT))
-    {
-      if (printer_uri)
-        {
-          httpSeparateURI (HTTP_URI_CODING_ALL, printer_uri,
-                           scheme, sizeof (scheme),
-                           username, sizeof (username),
-                           hostname, sizeof (hostname),
-                           &port,
-                           resource, sizeof (resource));
-
-          if (hostname[0] != '\0')
-            result = g_strdup (hostname);
-        }
-
-      local = FALSE;
-    }
-
-  if (result == NULL && device_uri)
-    {
-      httpSeparateURI (HTTP_URI_CODING_ALL, device_uri,
-                       scheme, sizeof (scheme),
-                       username, sizeof (username),
-                       hostname, sizeof (hostname),
-                       &port,
-                       resource, sizeof (resource));
-
-      if (g_str_equal (scheme, "ipp") ||
-          g_str_equal (scheme, "smb") ||
-          g_str_equal (scheme, "socket") ||
-          g_str_equal (scheme, "lpd"))
-        {
-          if (hostname[0] != '\0')
-            result = g_strdup (hostname);
-
-          local = FALSE;
-        }
-    }
-
-  if (local)
-    result = g_strdup ("localhost");
-
-  return result;
-}
-
-/* Returns default media size for current locale */
-const gchar *
-get_paper_size_from_locale ()
-{
-  if (g_str_equal (gtk_paper_size_get_default (), GTK_PAPER_NAME_LETTER))
-    return "na-letter";
-  else
-    return "iso-a4";
-}
-
-/* Set default media size according to the locale */
-void
-printer_set_default_media_size (const gchar *printer_name)
-{
-  GVariantBuilder  array_builder;
-  GDBusConnection *bus;
-  GVariant        *output;
-  GError          *error = NULL;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     return;
-   }
-
-  g_variant_builder_init (&array_builder, G_VARIANT_TYPE ("as"));
-  g_variant_builder_add (&array_builder, "s", get_paper_size_from_locale ());
-
-  output = g_dbus_connection_call_sync (bus,
-                                        MECHANISM_BUS,
-                                        "/",
-                                        MECHANISM_BUS,
-                                        "PrinterAddOption",
-                                        g_variant_new ("(ssas)",
-                                                       printer_name,
-                                                       "media",
-                                                       &array_builder),
-                                        G_VARIANT_TYPE ("(s)"),
-                                        G_DBUS_CALL_FLAGS_NONE,
-                                        -1,
-                                        NULL,
-                                        &error);
-
-  g_object_unref (bus);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of media size for printer %s failed: %s", printer_name, ret_error);
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (!(error->domain == G_DBUS_ERROR &&
-            (error->code == G_DBUS_ERROR_SERVICE_UNKNOWN ||
-             error->code == G_DBUS_ERROR_UNKNOWN_METHOD)))
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-}
-
-
-typedef struct
-{
-  gchar        *printer_name;
-  gchar       **attributes_names;
-  GHashTable   *result;
-  GIACallback   callback;
-  gpointer      user_data;
-  GMainContext *context;
-} GIAData;
-
-static gboolean
-get_ipp_attributes_idle_cb (gpointer user_data)
-{
-  GIAData *data = (GIAData *) user_data;
-
-  data->callback (data->result, data->user_data);
-
-  return FALSE;
-}
-
-static void
-get_ipp_attributes_data_free (gpointer user_data)
-{
-  GIAData *data = (GIAData *) user_data;
-
-  if (data->context)
-    g_main_context_unref (data->context);
-  g_free (data->printer_name);
-  if (data->attributes_names)
-    g_strfreev (data->attributes_names);
-  g_free (data);
-}
-
-static void
-get_ipp_attributes_cb (gpointer user_data)
-{
-  GIAData *data = (GIAData *) user_data;
-  GSource *idle_source;
-
-  idle_source = g_idle_source_new ();
-  g_source_set_callback (idle_source,
-                         get_ipp_attributes_idle_cb,
-                         data,
-                         get_ipp_attributes_data_free);
-  g_source_attach (idle_source, data->context);
-  g_source_unref (idle_source);
-}
-
-static void
-ipp_attribute_free2 (gpointer attr)
-{
-  IPPAttribute *attribute = (IPPAttribute *) attr;
-  ipp_attribute_free (attribute);
-}
-
-static gpointer
-get_ipp_attributes_func (gpointer user_data)
-{
-  ipp_attribute_t  *attr = NULL;
-  GIAData          *data = (GIAData *) user_data;
-  ipp_t            *request;
-  ipp_t            *response = NULL;
-  gchar            *printer_uri;
-  char            **requested_attrs = NULL;
-  gint              i, j, length = 0;
-
-  printer_uri = g_strdup_printf ("ipp://localhost/printers/%s", data->printer_name);
-
-  if (data->attributes_names)
-    {
-      length = g_strv_length (data->attributes_names);
-
-      requested_attrs = g_new0 (char *, length);
-      for (i = 0; data->attributes_names[i]; i++)
-        requested_attrs[i] = g_strdup (data->attributes_names[i]);
-
-      request = ippNewRequest (IPP_GET_PRINTER_ATTRIBUTES);
-      ippAddString (request, IPP_TAG_OPERATION, IPP_TAG_URI,
-                    "printer-uri", NULL, printer_uri);
-      ippAddStrings (request, IPP_TAG_OPERATION, IPP_TAG_KEYWORD,
-                     "requested-attributes", length, NULL, (const char **) requested_attrs);
-      response = cupsDoRequest (CUPS_HTTP_DEFAULT, request, "/");
-    }
-
-  if (response)
-    {
-      if (ippGetStatusCode (response) <= IPP_OK_CONFLICT)
-        {
-          for (j = 0; j < length; j++)
-            {
-              attr = ippFindAttribute (response, requested_attrs[j], IPP_TAG_ZERO);
-              if (attr && ippGetCount (attr) > 0 && ippGetValueTag (attr) != IPP_TAG_NOVALUE)
-                {
-                  IPPAttribute *attribute;
-
-                  attribute = g_new0 (IPPAttribute, 1);
-                  attribute->attribute_name = g_strdup (requested_attrs[j]);
-                  attribute->attribute_values = g_new0 (IPPAttributeValue, ippGetCount (attr));
-                  attribute->num_of_values = ippGetCount (attr);
-
-                  if (ippGetValueTag (attr) == IPP_TAG_INTEGER ||
-                      ippGetValueTag (attr) == IPP_TAG_ENUM)
-                    {
-                      attribute->attribute_type = IPP_ATTRIBUTE_TYPE_INTEGER;
-
-                      for (i = 0; i < ippGetCount (attr); i++)
-                        attribute->attribute_values[i].integer_value = ippGetInteger (attr, i);
-                    }
-                  else if (ippGetValueTag (attr) == IPP_TAG_NAME ||
-                           ippGetValueTag (attr) == IPP_TAG_STRING ||
-                           ippGetValueTag (attr) == IPP_TAG_TEXT ||
-                           ippGetValueTag (attr) == IPP_TAG_URI ||
-                           ippGetValueTag (attr) == IPP_TAG_KEYWORD ||
-                           ippGetValueTag (attr) == IPP_TAG_URISCHEME)
-                    {
-                      attribute->attribute_type = IPP_ATTRIBUTE_TYPE_STRING;
-
-                      for (i = 0; i < ippGetCount (attr); i++)
-                        attribute->attribute_values[i].string_value = g_strdup (ippGetString (attr, i, NULL));
-                    }
-                  else if (ippGetValueTag (attr) == IPP_TAG_RANGE)
-                    {
-                      attribute->attribute_type = IPP_ATTRIBUTE_TYPE_RANGE;
-
-                      for (i = 0; i < ippGetCount (attr); i++)
-                        {
-                          attribute->attribute_values[i].lower_range =
-                            ippGetRange (attr, i, &(attribute->attribute_values[i].upper_range));
-                        }
-                    }
-                  else if (ippGetValueTag (attr) == IPP_TAG_BOOLEAN)
-                    {
-                      attribute->attribute_type = IPP_ATTRIBUTE_TYPE_BOOLEAN;
-
-                      for (i = 0; i < ippGetCount (attr); i++)
-                        attribute->attribute_values[i].boolean_value = ippGetBoolean (attr, i);
-                    }
-
-                  if (!data->result)
-                    data->result = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, ipp_attribute_free2);
-
-                  g_hash_table_insert (data->result, g_strdup (requested_attrs[j]), attribute);
-                }
-            }
-        }
-
-      ippDelete (response);
-    }
-
-
-  for (i = 0; i < length; i++)
-    g_free (requested_attrs[i]);
-  g_free (requested_attrs);
-
-  g_free (printer_uri);
-
-  get_ipp_attributes_cb (data);
-
-  return NULL;
-}
-
-void
-get_ipp_attributes_async (const gchar  *printer_name,
-                          gchar       **attributes_names,
-                          GIACallback   callback,
-                          gpointer      user_data)
-{
-  GIAData *data;
-  GThread *thread;
-  GError  *error = NULL;
-
-  data = g_new0 (GIAData, 1);
-  data->printer_name = g_strdup (printer_name);
-  data->attributes_names = g_strdupv (attributes_names);
-  data->callback = callback;
-  data->user_data = user_data;
-  data->context = g_main_context_ref_thread_default ();
-
-  thread = g_thread_try_new ("get-ipp-attributes",
-                             get_ipp_attributes_func,
-                             data,
-                             &error);
-
-  if (!thread)
-    {
-      g_warning ("%s", error->message);
-      callback (NULL, user_data);
-
-      g_error_free (error);
-      get_ipp_attributes_data_free (data);
-    }
-  else
-    {
-      g_thread_unref (thread);
-    }
-}
-
-IPPAttribute *
-ipp_attribute_copy (IPPAttribute *attr)
-{
-  IPPAttribute *result = NULL;
-  gint          i;
-
-  if (attr)
-    {
-      result = g_new0 (IPPAttribute, 1);
-
-      *result = *attr;
-      result->attribute_name = g_strdup (attr->attribute_name);
-      result->attribute_values = g_new0 (IPPAttributeValue, attr->num_of_values);
-      for (i = 0; i < attr->num_of_values; i++)
-        {
-          result->attribute_values[i] = attr->attribute_values[i];
-          if (attr->attribute_values[i].string_value)
-            result->attribute_values[i].string_value = g_strdup (attr->attribute_values[i].string_value);
-        }
-    }
-
-  return result;
-}
-
-void
-ipp_attribute_free (IPPAttribute *attr)
-{
-  gint i;
-
-  if (attr)
-    {
-      for (i = 0; i < attr->num_of_values; i++)
-        g_free (attr->attribute_values[i].string_value);
-
-      g_free (attr->attribute_values);
-      g_free (attr->attribute_name);
-      g_free (attr);
-    }
-}
-
-
-
-typedef struct
-{
-  gchar        *printer_name;
-  gchar        *ppd_copy;
-  GCancellable *cancellable;
-  PSPCallback   callback;
-  gpointer      user_data;
-} PSPData;
-
-static void
-printer_set_ppd_async_dbus_cb (GObject      *source_object,
-                               GAsyncResult *res,
-                               gpointer      user_data)
-{
-  GVariant *output;
-  gboolean  result = FALSE;
-  PSPData  *data = (PSPData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of driver for printer %s failed: %s", data->printer_name, ret_error);
-      else
-        result = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  /* Don't call callback if cancelled */
-  if (!data->cancellable ||
-      !g_cancellable_is_cancelled (data->cancellable))
-    data->callback (g_strdup (data->printer_name),
-                    result,
-                    data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-
-  if (data->ppd_copy)
-    {
-      g_unlink (data->ppd_copy);
-      g_free (data->ppd_copy);
-    }
-
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-/*
- * Set ppd for given printer.
- * Don't use this for classes, just for printers.
- */
-void
-printer_set_ppd_async (const gchar  *printer_name,
-                       const gchar  *ppd_name,
-                       GCancellable *cancellable,
-                       PSPCallback   callback,
-                       gpointer      user_data)
-{
-  GDBusConnection *bus;
-  PSPData         *data;
-  GError          *error = NULL;
-
-  data = g_new0 (PSPData, 1);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-  data->printer_name = g_strdup (printer_name);
-
-  if (printer_name == NULL ||
-      printer_name[0] == '\0')
-    {
-      goto out;
-    }
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get system bus: %s", error->message);
-      g_error_free (error);
-      goto out;
-    }
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          "PrinterAdd",
-                          g_variant_new ("(sssss)",
-                                         printer_name,
-                                         "",
-                                         ppd_name,
-                                         "",
-                                         ""),
-                          G_VARIANT_TYPE ("(s)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          -1,
-                          data->cancellable,
-                          printer_set_ppd_async_dbus_cb,
-                          data);
-
-  return;
-
-out:
-  callback (g_strdup (printer_name), FALSE, user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-static void
-printer_set_ppd_file_async_scb (GObject      *source_object,
-                                GAsyncResult *res,
-                                gpointer      user_data)
-{
-  GDBusConnection *bus;
-  gboolean         success;
-  PSPData         *data = (PSPData *) user_data;
-  GError          *error = NULL;
-
-  success = g_file_copy_finish (G_FILE (source_object),
-                                res,
-                                &error);
-  g_object_unref (source_object);
-
-  if (!success)
-    {
-      g_warning ("%s", error->message);
-      g_error_free (error);
-      goto out;
-    }
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get system bus: %s", error->message);
-      g_error_free (error);
-      goto out;
-    }
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          "PrinterAddWithPpdFile",
-                          g_variant_new ("(sssss)",
-                                         data->printer_name,
-                                         "",
-                                         data->ppd_copy,
-                                         "",
-                                         ""),
-                          G_VARIANT_TYPE ("(s)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          -1,
-                          data->cancellable,
-                          printer_set_ppd_async_dbus_cb,
-                          data);
-
-  return;
-
-out:
-  data->callback (g_strdup (data->printer_name), FALSE, data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->printer_name);
-  g_free (data->ppd_copy);
-  g_free (data);
-}
-
-/*
- * Set ppd for given printer.
- * Don't use this for classes, just for printers.
- */
-void
-printer_set_ppd_file_async (const gchar  *printer_name,
-                            const gchar  *ppd_filename,
-                            GCancellable *cancellable,
-                            PSPCallback   callback,
-                            gpointer      user_data)
-{
-  GFileIOStream *stream;
-  PSPData       *data;
-  GFile         *source_ppd_file;
-  GFile         *destination_ppd_file;
-
-  data = g_new0 (PSPData, 1);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-  data->printer_name = g_strdup (printer_name);
-
-  if (printer_name == NULL ||
-      printer_name[0] == '\0')
-    {
-      goto out;
-    }
-
-  /*
-   * We need to copy the PPD to temp directory at first.
-   * This is needed because of SELinux.
-   */
-  source_ppd_file = g_file_new_for_path (ppd_filename);
-  destination_ppd_file = g_file_new_tmp ("g-c-c-XXXXXX.ppd", &stream, NULL);
-  g_object_unref (stream);
-  data->ppd_copy = g_strdup (g_file_get_path (destination_ppd_file));
-
-  g_file_copy_async (source_ppd_file,
-                     destination_ppd_file,
-                     G_FILE_COPY_OVERWRITE,
-                     G_PRIORITY_DEFAULT,
-                     cancellable,
-                     NULL,
-                     NULL,
-                     printer_set_ppd_file_async_scb,
-                     data);
-
-  g_object_unref (destination_ppd_file);
-
-  return;
-
-out:
-  callback (g_strdup (printer_name), FALSE, user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-
-
-typedef void (*GPACallback) (gchar    **attribute_values,
-                             gpointer   user_data);
-
-typedef struct
-{
-  gchar         *attribute_name;
-  gchar        **ppds_names;
-  gchar        **result;
-  GPACallback    callback;
-  gpointer       user_data;
-  GMainContext  *context;
-} GPAData;
-
-static gboolean
-get_ppds_attribute_idle_cb (gpointer user_data)
-{
-  GPAData *data = (GPAData *) user_data;
-
-  data->callback (data->result, data->user_data);
-
-  return FALSE;
-}
-
-static void
-get_ppds_attribute_data_free (gpointer user_data)
-{
-  GPAData *data = (GPAData *) user_data;
-
-  if (data->context)
-    g_main_context_unref (data->context);
-  g_free (data->attribute_name);
-  g_strfreev (data->ppds_names);
-  g_free (data);
-}
-
-static void
-get_ppds_attribute_cb (gpointer user_data)
-{
-  GPAData *data = (GPAData *) user_data;
-  GSource *idle_source;
-
-  idle_source = g_idle_source_new ();
-  g_source_set_callback (idle_source,
-                         get_ppds_attribute_idle_cb,
-                         data,
-                         get_ppds_attribute_data_free);
-  g_source_attach (idle_source, data->context);
-  g_source_unref (idle_source);
-}
-
-static gpointer
-get_ppds_attribute_func (gpointer user_data)
-{
-  ppd_file_t  *ppd_file;
-  ppd_attr_t  *ppd_attr;
-  GPAData     *data = (GPAData *) user_data;
-  gchar       *ppd_filename;
-  gint         i;
-
-  data->result = g_new0 (gchar *, g_strv_length (data->ppds_names) + 1);
-  for (i = 0; data->ppds_names[i]; i++)
-    {
-      ppd_filename = g_strdup (cupsGetServerPPD (CUPS_HTTP_DEFAULT, data->ppds_names[i]));
-      if (ppd_filename)
-        {
-          ppd_file = ppdOpenFile (ppd_filename);
-          if (ppd_file)
-            {
-              ppd_attr = ppdFindAttr (ppd_file, data->attribute_name, NULL);
-              if (ppd_attr != NULL)
-                data->result[i] = g_strdup (ppd_attr->value);
-
-              ppdClose (ppd_file);
-            }
-
-          g_unlink (ppd_filename);
-          g_free (ppd_filename);
-        }
-    }
-
-  get_ppds_attribute_cb (data);
-
-  return NULL;
-}
-
-/*
- * Get values of requested PPD attribute for given PPDs.
- */
-static void
-get_ppds_attribute_async (gchar       **ppds_names,
-                          gchar        *attribute_name,
-                          GPACallback   callback,
-                          gpointer      user_data)
-{
-  GPAData *data;
-  GThread *thread;
-  GError  *error = NULL;
-
-  if (!ppds_names || !attribute_name)
-    {
-      callback (NULL, user_data);
-      return;
-    }
-
-  data = g_new0 (GPAData, 1);
-  data->ppds_names = g_strdupv (ppds_names);
-  data->attribute_name = g_strdup (attribute_name);
-  data->callback = callback;
-  data->user_data = user_data;
-  data->context = g_main_context_ref_thread_default ();
-
-  thread = g_thread_try_new ("get-ppds-attribute",
-                             get_ppds_attribute_func,
-                             data,
-                             &error);
-
-  if (!thread)
-    {
-      g_warning ("%s", error->message);
-      callback (NULL, user_data);
-
-      g_error_free (error);
-      get_ppds_attribute_data_free (data);
-    }
-  else
-    {
-      g_thread_unref (thread);
-    }
-}
-
-
-
-typedef void (*GDACallback) (gchar    *device_id,
-                             gchar    *device_make_and_model,
-                             gchar    *device_uri,
-                             gpointer  user_data);
-
-typedef struct
-{
-  gchar        *printer_name;
-  gchar        *device_uri;
-  GCancellable *cancellable;
-  GList        *backend_list;
-  GDACallback   callback;
-  gpointer      user_data;
-} GDAData;
-
-typedef struct
-{
-  gchar         *printer_name;
-  gint           count;
-  PPDName      **result;
-  GCancellable  *cancellable;
-  GPNCallback    callback;
-  gpointer       user_data;
-} GPNData;
-
-static void
-get_ppd_names_async_cb (gchar    **attribute_values,
-                        gpointer   user_data)
-{
-  GPNData *data = (GPNData *) user_data;
-  gint     i;
-
-  if (g_cancellable_is_cancelled (data->cancellable))
-    {
-      g_strfreev (attribute_values);
-
-      for (i = 0; data->result[i]; i++)
-        {
-          g_free (data->result[i]->ppd_name);
-          g_free (data->result[i]);
-        }
-
-      g_free (data->result);
-      data->result = NULL;
-
-      goto out;
-    }
-
-  if (attribute_values)
-    {
-      for (i = 0; attribute_values[i]; i++)
-        data->result[i]->ppd_display_name = attribute_values[i];
-
-      g_free (attribute_values);
-    }
-
-out:
-  data->callback (data->result,
-                  data->printer_name,
-                  g_cancellable_is_cancelled (data->cancellable),
-                  data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-static void
-get_ppd_names_async_dbus_scb (GObject      *source_object,
-                              GAsyncResult *res,
-                              gpointer      user_data)
-{
-  GVariant  *output;
-  PPDName   *ppd_item;
-  PPDName  **result = NULL;
-  GPNData   *data = (GPNData *) user_data;
-  GError    *error = NULL;
-  GList     *driver_list = NULL;
-  GList     *iter;
-  gint       i, j, n = 0;
-  static const char * const match_levels[] = {
-             "exact-cmd",
-             "exact",
-             "close",
-             "generic",
-             "none"};
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      GVariant *array;
-
-      g_variant_get (output, "(@a(ss))",
-                     &array);
-
-      if (array)
-        {
-          GVariantIter *iter;
-          GVariant     *item;
-          gchar        *driver;
-          gchar        *match;
-
-          for (j = 0; j < G_N_ELEMENTS (match_levels) && n < data->count; j++)
-            {
-              g_variant_get (array,
-                             "a(ss)",
-                             &iter);
-
-              while ((item = g_variant_iter_next_value (iter)))
-                {
-                  g_variant_get (item,
-                                 "(ss)",
-                                 &driver,
-                                 &match);
-
-                  if (g_str_equal (match, match_levels[j]) && n < data->count)
-                    {
-                      ppd_item = g_new0 (PPDName, 1);
-                      ppd_item->ppd_name = g_strdup (driver);
-
-                      if (g_strcmp0 (match, "exact-cmd") == 0)
-                        ppd_item->ppd_match_level = PPD_EXACT_CMD_MATCH;
-                      else if (g_strcmp0 (match, "exact") == 0)
-                        ppd_item->ppd_match_level = PPD_EXACT_MATCH;
-                      else if (g_strcmp0 (match, "close") == 0)
-                        ppd_item->ppd_match_level = PPD_CLOSE_MATCH;
-                      else if (g_strcmp0 (match, "generic") == 0)
-                        ppd_item->ppd_match_level = PPD_GENERIC_MATCH;
-                      else if (g_strcmp0 (match, "none") == 0)
-                        ppd_item->ppd_match_level = PPD_NO_MATCH;
-
-                      driver_list = g_list_append (driver_list, ppd_item);
-
-                      n++;
-                    }
-
-                  g_free (driver);
-                  g_free (match);
-                  g_variant_unref (item);
-                }
-            }
-
-          g_variant_unref (array);
-        }
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  if (n > 0)
-    {
-      result = g_new0 (PPDName *, n + 1);
-      i = 0;
-      for (iter = driver_list; iter; iter = iter->next)
-        {
-          result[i] = iter->data;
-          i++;
-        }
-    }
-
-  if (result)
-    {
-      gchar **ppds_names;
-
-      data->result = result;
-
-      ppds_names = g_new0 (gchar *, n + 1);
-      for (i = 0; i < n; i++)
-        ppds_names[i] = g_strdup (result[i]->ppd_name);
-
-      get_ppds_attribute_async (ppds_names,
-                                "NickName",
-                                get_ppd_names_async_cb,
-                                data);
-
-      g_strfreev (ppds_names);
-    }
-  else
-    {
-      data->callback (NULL,
-                      data->printer_name,
-                      g_cancellable_is_cancelled (data->cancellable),
-                      data->user_data);
-
-      if (data->cancellable)
-        g_object_unref (data->cancellable);
-      g_free (data->printer_name);
-      g_free (data);
-    }
-}
-
-static void
-get_device_attributes_cb (gchar    *device_id,
-                          gchar    *device_make_and_model,
-                          gchar    *device_uri,
-                          gpointer  user_data)
-{
-  GDBusConnection *bus;
-  GError          *error = NULL;
-  GPNData         *data = (GPNData *) user_data;
-
-  if (g_cancellable_is_cancelled (data->cancellable))
-    goto out;
-
-  if (!device_id || !device_make_and_model || !device_uri)
-    goto out;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SESSION, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get system bus: %s", error->message);
-      g_error_free (error);
-      goto out;
-    }
-
-  g_dbus_connection_call (bus,
-                          SCP_BUS,
-                          SCP_PATH,
-                          SCP_IFACE,
-                          "GetBestDrivers",
-                          g_variant_new ("(sss)",
-                                         device_id,
-                                         device_make_and_model,
-                                         device_uri),
-                          G_VARIANT_TYPE ("(a(ss))"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          DBUS_TIMEOUT_LONG,
-                          data->cancellable,
-                          get_ppd_names_async_dbus_scb,
-                          data);
-
-  return;
-
-out:
-  data->callback (NULL,
-                  data->printer_name,
-                  g_cancellable_is_cancelled (data->cancellable),
-                  data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-static void
-get_device_attributes_async_dbus_cb (GObject      *source_object,
-                                     GAsyncResult *res,
-                                     gpointer      user_data)
-
-{
-  GVariant *output;
-  GDAData  *data = (GDAData *) user_data;
-  GError   *error = NULL;
-  GList    *tmp;
-  gchar    *device_id = NULL;
-  gchar    *device_make_and_model = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      const gchar *ret_error;
-      GVariant    *devices_variant = NULL;
-
-      g_variant_get (output, "(&s@a{ss})",
-                     &ret_error,
-                     &devices_variant);
-
-      if (ret_error[0] != '\0')
-        {
-          g_warning ("cups-pk-helper: getting of attributes for printer %s failed: %s", data->printer_name, ret_error);
-        }
-
-      if (devices_variant)
-        {
-          GVariantIter *iter;
-          GVariant     *item;
-          gint          index = -1;
-
-          if (data->device_uri)
-            {
-              gchar *key;
-              gchar *value;
-              gchar *number;
-              gchar *endptr;
-              gchar *suffix;
-
-              g_variant_get (devices_variant,
-                             "a{ss}",
-                             &iter);
-
-              while ((item = g_variant_iter_next_value (iter)))
-                {
-                  g_variant_get (item,
-                                 "{ss}",
-                                 &key,
-                                 &value);
-
-                  if (g_str_equal (value, data->device_uri))
-                    {
-                      number = g_strrstr (key, ":");
-                      if (number != NULL)
-                        {
-                          number++;
-                          index = g_ascii_strtoll (number, &endptr, 10);
-                          if (index == 0 && endptr == (number))
-                            index = -1;
-                        }
-                    }
-
-                  g_free (key);
-                  g_free (value);
-                  g_variant_unref (item);
-                }
-
-              suffix = g_strdup_printf (":%d", index);
-
-              g_variant_get (devices_variant,
-                             "a{ss}",
-                             &iter);
-
-              while ((item = g_variant_iter_next_value (iter)))
-                {
-                  gchar *key;
-                  gchar *value;
-
-                  g_variant_get (item,
-                                 "{ss}",
-                                 &key,
-                                 &value);
-
-                  if (g_str_has_suffix (key, suffix))
-                    {
-                      if (g_str_has_prefix (key, "device-id"))
-                        {
-                          device_id = g_strdup (value);
-                        }
-
-                      if (g_str_has_prefix (key, "device-make-and-model"))
-                        {
-                          device_make_and_model = g_strdup (value);
-                        }
-                    }
-
-                  g_free (key);
-                  g_free (value);
-                  g_variant_unref (item);
-                }
-
-              g_free (suffix);
-            }
-
-          g_variant_unref (devices_variant);
-        }
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  if (!device_id || !device_make_and_model)
-    {
-      GVariantBuilder include_scheme_builder;
-
-      g_free (device_id);
-      g_free (device_make_and_model);
-
-      device_id = NULL;
-      device_make_and_model = NULL;
-
-      if (data->backend_list && !g_cancellable_is_cancelled (data->cancellable))
-        {
-          g_variant_builder_init (&include_scheme_builder, G_VARIANT_TYPE ("as"));
-          g_variant_builder_add (&include_scheme_builder, "s", data->backend_list->data);
-
-          tmp = data->backend_list;
-          data->backend_list = g_list_remove_link (data->backend_list, tmp);
-          g_list_free_full (tmp, g_free);
-
-          g_dbus_connection_call (G_DBUS_CONNECTION (g_object_ref (source_object)),
-                                  MECHANISM_BUS,
-                                  "/",
-                                  MECHANISM_BUS,
-                                  "DevicesGet",
-                                  g_variant_new ("(iiasas)",
-                                                 0,
-                                                 0,
-                                                 &include_scheme_builder,
-                                                 NULL),
-                                  G_VARIANT_TYPE ("(sa{ss})"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  DBUS_TIMEOUT,
-                                  data->cancellable,
-                                  get_device_attributes_async_dbus_cb,
-                                  user_data);
-          return;
-        }
-    }
-
-  g_object_unref (source_object);
-
-  if (data->backend_list)
-    {
-      g_list_free_full (data->backend_list, g_free);
-      data->backend_list = NULL;
-    }
-
-  data->callback (device_id,
-                  device_make_and_model,
-                  data->device_uri,
-                  data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->device_uri);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-static void
-get_device_attributes_async_scb (GHashTable *result,
-                                 gpointer    user_data)
-{
-  GDBusConnection *bus;
-  GVariantBuilder  include_scheme_builder;
-  IPPAttribute    *attr;
-  GDAData         *data = (GDAData *) user_data;
-  GError          *error = NULL;
-  GList           *tmp;
-  gint             i;
-  const gchar     *backends[] =
-    {"hpfax", "ncp", "beh", "bluetooth", "snmp",
-     "dnssd", "hp", "ipp", "lpd", "parallel",
-     "serial", "socket", "usb", NULL};
-
-  if (result)
-    {
-      attr = g_hash_table_lookup (result, "device-uri");
-      if (attr && attr->attribute_type == IPP_ATTRIBUTE_TYPE_STRING &&
-          attr->num_of_values > 0)
-      data->device_uri = g_strdup (attr->attribute_values[0].string_value);
-      g_hash_table_unref (result);
-    }
-
-  if (g_cancellable_is_cancelled (data->cancellable))
-    goto out;
-
-  if (!data->device_uri)
-    goto out;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get system bus: %s", error->message);
-      g_error_free (error);
-      goto out;
-    }
-
-  for (i = 0; backends[i]; i++)
-    data->backend_list = g_list_prepend (data->backend_list, g_strdup (backends[i]));
-
-  g_variant_builder_init (&include_scheme_builder, G_VARIANT_TYPE ("as"));
-  g_variant_builder_add (&include_scheme_builder, "s", data->backend_list->data);
-
-  tmp = data->backend_list;
-  data->backend_list = g_list_remove_link (data->backend_list, tmp);
-  g_list_free_full (tmp, g_free);
-
-  g_dbus_connection_call (g_object_ref (bus),
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          "DevicesGet",
-                          g_variant_new ("(iiasas)",
-                                         0,
-                                         0,
-                                         &include_scheme_builder,
-                                         NULL),
-                          G_VARIANT_TYPE ("(sa{ss})"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          DBUS_TIMEOUT,
-                          data->cancellable,
-                          get_device_attributes_async_dbus_cb,
-                          data);
-
-  return;
-
-out:
-  data->callback (NULL, NULL, NULL, data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data->device_uri);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-/*
- * Get device-id, device-make-and-model and device-uri for given printer.
- */
-static void
-get_device_attributes_async (const gchar  *printer_name,
-                             GCancellable *cancellable,
-                             GDACallback   callback,
-                             gpointer      user_data)
-{
-  GDAData  *data;
-  gchar   **attributes;
-
-  if (!printer_name)
-   {
-     callback (NULL, NULL, NULL, user_data);
-     return;
-   }
-
-  data = g_new0 (GDAData, 1);
-  data->printer_name = g_strdup (printer_name);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-
-  attributes = g_new0 (gchar *, 2);
-  attributes[0] = g_strdup ("device-uri");
-
-  get_ipp_attributes_async (printer_name,
-                            attributes,
-                            get_device_attributes_async_scb,
-                            data);
-
-  g_strfreev (attributes);
-}
-
-/*
- * Return "count" best matching driver names for given printer.
- */
-void
-get_ppd_names_async (gchar        *printer_name,
-                     gint          count,
-                     GCancellable *cancellable,
-                     GPNCallback   callback,
-                     gpointer      user_data)
-{
-  GPNData *data;
-
-  if (!printer_name)
-    {
-      callback (NULL, NULL, TRUE, user_data);
-      return;
-    }
-
-  data = g_new0 (GPNData, 1);
-  data->printer_name = g_strdup (printer_name);
-  data->count = count;
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-
-  /*
-   * We have to find out device-id for this printer at first.
-   */
-  get_device_attributes_async (printer_name,
-                               cancellable,
-                               get_device_attributes_cb,
-                               data);
-}
-
-typedef struct
-{
-  PPDList      *result;
-  GCancellable *cancellable;
-  GAPCallback   callback;
-  gpointer      user_data;
-  GMainContext *context;
-} GAPData;
-
-static gboolean
-get_all_ppds_idle_cb (gpointer user_data)
-{
-  GAPData *data = (GAPData *) user_data;
-
-  /* Don't call callback if cancelled */
-  if (data->cancellable &&
-      g_cancellable_is_cancelled (data->cancellable))
-    {
-      ppd_list_free (data->result);
-      data->result = NULL;
-    }
-  else
-    {
-      data->callback (data->result, data->user_data);
-    }
-
-  return FALSE;
-}
-
-static void
-get_all_ppds_data_free (gpointer user_data)
-{
-  GAPData *data = (GAPData *) user_data;
-
-  if (data->context)
-    g_main_context_unref (data->context);
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data);
-}
-
-static void
-get_all_ppds_cb (gpointer user_data)
-{
-  GAPData *data = (GAPData *) user_data;
-  GSource *idle_source;
-
-  idle_source = g_idle_source_new ();
-  g_source_set_callback (idle_source,
-                         get_all_ppds_idle_cb,
-                         data,
-                         get_all_ppds_data_free);
-  g_source_attach (idle_source, data->context);
-  g_source_unref (idle_source);
-}
-
-static const struct {
-  const char *normalized_name;
-  const char *display_name;
-} manufacturers_names[] = {
-  { "alps", "Alps" },
-  { "anitech", "Anitech" },
-  { "apple", "Apple" },
-  { "apollo", "Apollo" },
-  { "brother", "Brother" },
-  { "canon", "Canon" },
-  { "citizen", "Citizen" },
-  { "citoh", "Citoh" },
-  { "compaq", "Compaq" },
-  { "dec", "DEC" },
-  { "dell", "Dell" },
-  { "dnp", "DNP" },
-  { "dymo", "Dymo" },
-  { "epson", "Epson" },
-  { "fujifilm", "Fujifilm" },
-  { "fujitsu", "Fujitsu" },
-  { "gelsprinter", "Ricoh" },
-  { "generic", "Generic" },
-  { "genicom", "Genicom" },
-  { "gestetner", "Gestetner" },
-  { "hewlett packard", "Hewlett-Packard" },
-  { "heidelberg", "Heidelberg" },
-  { "hitachi", "Hitachi" },
-  { "hp", "Hewlett-Packard" },
-  { "ibm", "IBM" },
-  { "imagen", "Imagen" },
-  { "imagistics", "Imagistics" },
-  { "infoprint", "InfoPrint" },
-  { "infotec", "Infotec" },
-  { "intellitech", "Intellitech" },
-  { "kodak", "Kodak" },
-  { "konica minolta", "Minolta" },
-  { "kyocera", "Kyocera" },
-  { "kyocera mita", "Kyocera" },
-  { "lanier", "Lanier" },
-  { "lexmark international", "Lexmark" },
-  { "lexmark", "Lexmark" },
-  { "minolta", "Minolta" },
-  { "minolta qms", "Minolta" },
-  { "mitsubishi", "Mitsubishi" },
-  { "nec", "NEC" },
-  { "nrg", "NRG" },
-  { "oce", "Oce" },
-  { "oki", "Oki" },
-  { "oki data corp", "Oki" },
-  { "olivetti", "Olivetti" },
-  { "olympus", "Olympus" },
-  { "panasonic", "Panasonic" },
-  { "pcpi", "PCPI" },
-  { "pentax", "Pentax" },
-  { "qms", "QMS" },
-  { "raven", "Raven" },
-  { "raw", "Raw" },
-  { "ricoh", "Ricoh" },
-  { "samsung", "Samsung" },
-  { "savin", "Savin" },
-  { "seiko", "Seiko" },
-  { "sharp", "Sharp" },
-  { "shinko", "Shinko" },
-  { "sipix", "SiPix" },
-  { "sony", "Sony" },
-  { "star", "Star" },
-  { "tally", "Tally" },
-  { "tektronix", "Tektronix" },
-  { "texas instruments", "Texas Instruments" },
-  { "toshiba", "Toshiba" },
-  { "toshiba tec corp.", "Toshiba" },
-  { "xante", "Xante" },
-  { "xerox", "Xerox" },
-  { "zebra", "Zebra" },
-};
-
-static gpointer
-get_all_ppds_func (gpointer user_data)
-{
-  ipp_attribute_t *attr;
-  GHashTable      *ppds_hash = NULL;
-  GHashTable      *manufacturers_hash = NULL;
-  GAPData         *data = (GAPData *) user_data;
-  PPDName         *item;
-  ipp_t           *request;
-  ipp_t           *response;
-  GList           *list;
-  const gchar     *ppd_make_and_model;
-  const gchar     *ppd_device_id;
-  const gchar     *ppd_name;
-  const gchar     *ppd_product;
-  const gchar     *ppd_make;
-  gchar           *mfg;
-  gchar           *mfg_normalized;
-  gchar           *mdl;
-  gchar           *manufacturer_display_name;
-  gint             i, j;
-
-  request = ippNewRequest (CUPS_GET_PPDS);
-  response = cupsDoRequest (CUPS_HTTP_DEFAULT, request, "/");
-
-  if (response &&
-      ippGetStatusCode (response) <= IPP_OK_CONFLICT)
-    {
-      /*
-       * This hash contains names of manufacturers as keys and
-       * values are GLists of PPD names.
-       */
-      ppds_hash = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, NULL);
-
-      /*
-       * This hash contains all possible names of manufacturers as keys
-       * and values are just first occurences of their equivalents.
-       * This is for mapping of e.g. "Hewlett Packard" and "HP" to the same name
-       * (the one which comes first).
-       */
-      manufacturers_hash = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
-
-      for (i = 0; i < G_N_ELEMENTS (manufacturers_names); i++)
-        {
-          g_hash_table_insert (manufacturers_hash,
-                               g_strdup (manufacturers_names[i].normalized_name),
-                               g_strdup (manufacturers_names[i].display_name));
-        }
-
-      for (attr = ippFirstAttribute (response); attr != NULL; attr = ippNextAttribute (response))
-        {
-          while (attr != NULL && ippGetGroupTag (attr) != IPP_TAG_PRINTER)
-            attr = ippNextAttribute (response);
-
-          if (attr == NULL)
-            break;
-
-          ppd_device_id = NULL;
-          ppd_make_and_model = NULL;
-          ppd_name = NULL;
-          ppd_product = NULL;
-          ppd_make = NULL;
-          mfg = NULL;
-          mfg_normalized = NULL;
-          mdl = NULL;
-
-          while (attr != NULL && ippGetGroupTag (attr) == IPP_TAG_PRINTER)
-            {
-              if (g_strcmp0 (ippGetName (attr), "ppd-device-id") == 0 &&
-                  ippGetValueTag (attr) == IPP_TAG_TEXT)
-                ppd_device_id = ippGetString (attr, 0, NULL);
-              else if (g_strcmp0 (ippGetName (attr), "ppd-make-and-model") == 0 &&
-                       ippGetValueTag (attr) == IPP_TAG_TEXT)
-                ppd_make_and_model = ippGetString (attr, 0, NULL);
-              else if (g_strcmp0 (ippGetName (attr), "ppd-name") == 0 &&
-                       ippGetValueTag (attr) == IPP_TAG_NAME)
-                ppd_name = ippGetString (attr, 0, NULL);
-              else if (g_strcmp0 (ippGetName (attr), "ppd-product") == 0 &&
-                       ippGetValueTag (attr) == IPP_TAG_TEXT)
-                ppd_product = ippGetString (attr, 0, NULL);
-              else if (g_strcmp0 (ippGetName (attr), "ppd-make") == 0 &&
-                       ippGetValueTag (attr) == IPP_TAG_TEXT)
-                ppd_make = ippGetString (attr, 0, NULL);
-
-              attr = ippNextAttribute (response);
-            }
-
-          /* Get manufacturer's name */
-          if (ppd_device_id && ppd_device_id[0] != '\0')
-            {
-              mfg = get_tag_value (ppd_device_id, "mfg");
-              if (!mfg)
-                mfg = get_tag_value (ppd_device_id, "manufacturer");
-              mfg_normalized = normalize (mfg);
-            }
-
-          if (!mfg &&
-              ppd_make &&
-              ppd_make[0] != '\0')
-            {
-              mfg = g_strdup (ppd_make);
-              mfg_normalized = normalize (ppd_make);
-            }
-
-          /* Get model */
-          if (ppd_make_and_model &&
-              ppd_make_and_model[0] != '\0')
-            {
-              mdl = g_strdup (ppd_make_and_model);
-            }
-
-          if (!mdl &&
-              ppd_product &&
-              ppd_product[0] != '\0')
-            {
-              mdl = g_strdup (ppd_product);
-            }
-
-          if (!mdl &&
-              ppd_device_id &&
-              ppd_device_id[0] != '\0')
-            {
-              mdl = get_tag_value (ppd_device_id, "mdl");
-              if (!mdl)
-                mdl = get_tag_value (ppd_device_id, "model");
-            }
-
-          if (ppd_name && ppd_name[0] != '\0' &&
-              mdl && mdl[0] != '\0' &&
-              mfg && mfg[0] != '\0')
-            {
-              manufacturer_display_name = g_hash_table_lookup (manufacturers_hash, mfg_normalized);
-              if (!manufacturer_display_name)
-                {
-                  g_hash_table_insert (manufacturers_hash, g_strdup (mfg_normalized), g_strdup (mfg));
-                }
-              else
-                {
-                  g_free (mfg_normalized);
-                  mfg_normalized = normalize (manufacturer_display_name);
-                }
-
-              item = g_new0 (PPDName, 1);
-              item->ppd_name = g_strdup (ppd_name);
-              item->ppd_display_name = g_strdup (mdl);
-              item->ppd_match_level = -1;
-
-              list = g_hash_table_lookup (ppds_hash, mfg_normalized);
-              if (list)
-                {
-                  list = g_list_append (list, item);
-                }
-              else
-                {
-                  list = g_list_append (list, item);
-                  g_hash_table_insert (ppds_hash, g_strdup (mfg_normalized), list);
-                }
-            }
-
-          g_free (mdl);
-          g_free (mfg);
-          g_free (mfg_normalized);
-
-          if (attr == NULL)
-            break;
-        }
-    }
-
-  if (response)
-    ippDelete(response);
-
-  if (ppds_hash &&
-      manufacturers_hash)
-    {
-      GHashTableIter  iter;
-      gpointer        key;
-      gpointer        value;
-      GList          *ppd_item;
-      GList          *sort_list = NULL;
-      GList          *list_iter;
-      gchar          *name;
-
-      data->result = g_new0 (PPDList, 1);
-      data->result->num_of_manufacturers = g_hash_table_size (ppds_hash);
-      data->result->manufacturers = g_new0 (PPDManufacturerItem *, data->result->num_of_manufacturers);
-
-      g_hash_table_iter_init (&iter, ppds_hash);
-      while (g_hash_table_iter_next (&iter, &key, &value))
-        {
-          sort_list = g_list_append (sort_list, g_strdup (key));
-        }
-
-      /* Sort list of manufacturers */
-      sort_list = g_list_sort (sort_list, (GCompareFunc) g_strcmp0);
-
-      /*
-       * Fill resulting list of lists (list of manufacturers where
-       * each item contains list of PPD names)
-       */
-      i = 0;
-      for (list_iter = sort_list; list_iter; list_iter = list_iter->next)
-        {
-          name = (gchar *) list_iter->data;
-          value = g_hash_table_lookup (ppds_hash, name);
-
-          data->result->manufacturers[i] = g_new0 (PPDManufacturerItem, 1);
-          data->result->manufacturers[i]->manufacturer_name = g_strdup (name);
-          data->result->manufacturers[i]->manufacturer_display_name = g_strdup (g_hash_table_lookup (manufacturers_hash, name));
-          data->result->manufacturers[i]->num_of_ppds = g_list_length ((GList *) value);
-          data->result->manufacturers[i]->ppds = g_new0 (PPDName *, data->result->manufacturers[i]->num_of_ppds);
-
-          for (ppd_item = (GList *) value, j = 0; ppd_item; ppd_item = ppd_item->next, j++)
-            {
-              data->result->manufacturers[i]->ppds[j] = ppd_item->data;
-            }
-
-          g_list_free ((GList *) value);
-
-          i++;
-        }
-
-      g_list_free_full (sort_list, g_free);
-      g_hash_table_destroy (ppds_hash);
-      g_hash_table_destroy (manufacturers_hash);
-    }
-
-  get_all_ppds_cb (data);
-
-  return NULL;
-}
-
-/*
- * Get names of all installed PPDs sorted by manufacturers names.
- */
-void
-get_all_ppds_async (GCancellable *cancellable,
-                    GAPCallback   callback,
-                    gpointer      user_data)
-{
-  GAPData *data;
-  GThread *thread;
-  GError  *error = NULL;
-
-  data = g_new0 (GAPData, 1);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-  data->context = g_main_context_ref_thread_default ();
-
-  thread = g_thread_try_new ("get-all-ppds",
-                             get_all_ppds_func,
-                             data,
-                             &error);
-
-  if (!thread)
-    {
-      g_warning ("%s", error->message);
-      callback (NULL, user_data);
-
-      g_error_free (error);
-      get_all_ppds_data_free (data);
-    }
-  else
-    {
-      g_thread_unref (thread);
-    }
-}
-
-PPDList *
-ppd_list_copy (PPDList *list)
-{
-  PPDList *result = NULL;
-  gint     i, j;
-
-  if (list)
-    {
-      result = g_new0 (PPDList, 1);
-      result->num_of_manufacturers = list->num_of_manufacturers;
-      result->manufacturers = g_new0 (PPDManufacturerItem *, list->num_of_manufacturers);
-
-      for (i = 0; i < result->num_of_manufacturers; i++)
-        {
-          result->manufacturers[i] = g_new0 (PPDManufacturerItem, 1);
-          result->manufacturers[i]->num_of_ppds = list->manufacturers[i]->num_of_ppds;
-          result->manufacturers[i]->ppds = g_new0 (PPDName *, result->manufacturers[i]->num_of_ppds);
-
-          result->manufacturers[i]->manufacturer_display_name =
-            g_strdup (list->manufacturers[i]->manufacturer_display_name);
-
-          result->manufacturers[i]->manufacturer_name =
-            g_strdup (list->manufacturers[i]->manufacturer_name);
-
-          for (j = 0; j < result->manufacturers[i]->num_of_ppds; j++)
-            {
-              result->manufacturers[i]->ppds[j] = g_new0 (PPDName, 1);
-
-              result->manufacturers[i]->ppds[j]->ppd_display_name =
-                g_strdup (list->manufacturers[i]->ppds[j]->ppd_display_name);
-
-              result->manufacturers[i]->ppds[j]->ppd_name =
-                g_strdup (list->manufacturers[i]->ppds[j]->ppd_name);
-
-              result->manufacturers[i]->ppds[j]->ppd_match_level =
-                list->manufacturers[i]->ppds[j]->ppd_match_level;
-            }
-        }
-    }
-
-  return result;
-}
-
-void
-ppd_list_free (PPDList *list)
-{
-  gint i, j;
-
-  if (list)
-    {
-      for (i = 0; i < list->num_of_manufacturers; i++)
-        {
-          for (j = 0; j < list->manufacturers[i]->num_of_ppds; j++)
-            {
-              g_free (list->manufacturers[i]->ppds[j]->ppd_name);
-              g_free (list->manufacturers[i]->ppds[j]->ppd_display_name);
-              g_free (list->manufacturers[i]->ppds[j]);
-            }
-
-          g_free (list->manufacturers[i]->manufacturer_name);
-          g_free (list->manufacturers[i]->manufacturer_display_name);
-          g_free (list->manufacturers[i]->ppds);
-          g_free (list->manufacturers[i]);
-        }
-
-      g_free (list->manufacturers);
-      g_free (list);
-    }
-}
-
-gchar *
-get_standard_manufacturers_name (gchar *name)
-{
-  gchar *normalized_name;
-  gchar *result = NULL;
-  gint   i;
-
-  if (name)
-    {
-      normalized_name = normalize (name);
-
-      for (i = 0; i < G_N_ELEMENTS (manufacturers_names); i++)
-        {
-          if (g_strcmp0 (manufacturers_names[i].normalized_name, normalized_name) == 0)
-            {
-              result = g_strdup (manufacturers_names[i].display_name);
-              break;
-            }
-        }
-
-      g_free (normalized_name);
-    }
-
-  return result;
-}
-
-typedef struct
-{
-  gchar        *printer_name;
-  gchar        *host_name;
-  gint          port;
-  gchar        *result;
-  PGPCallback   callback;
-  gpointer      user_data;
-  GMainContext *context;
-} PGPData;
-
-static gboolean
-printer_get_ppd_idle_cb (gpointer user_data)
-{
-  PGPData *data = (PGPData *) user_data;
-
-  data->callback (data->result, data->user_data);
-
-  return FALSE;
-}
-
-static void
-printer_get_ppd_data_free (gpointer user_data)
-{
-  PGPData *data = (PGPData *) user_data;
-
-  if (data->context)
-    g_main_context_unref (data->context);
-  g_free (data->result);
-  g_free (data->printer_name);
-  g_free (data->host_name);
-  g_free (data);
-}
-
-static void
-printer_get_ppd_cb (gpointer user_data)
-{
-  PGPData *data = (PGPData *) user_data;
-  GSource *idle_source;
-
-  idle_source = g_idle_source_new ();
-  g_source_set_callback (idle_source,
-                         printer_get_ppd_idle_cb,
-                         data,
-                         printer_get_ppd_data_free);
-  g_source_attach (idle_source, data->context);
-  g_source_unref (idle_source);
-}
-
-static gpointer
-printer_get_ppd_func (gpointer user_data)
-{
-  PGPData *data = (PGPData *) user_data;
-
-  if (data->host_name)
-    {
-      http_t *http;
-
-      http = httpConnect (data->host_name, data->port);
-      if (http)
-        {
-          data->result = g_strdup (cupsGetPPD2 (http, data->printer_name));
-          httpClose (http);
-        }
-    }
-  else
-    {
-      data->result = g_strdup (cupsGetPPD (data->printer_name));
-    }
-
-  printer_get_ppd_cb (data);
-
-  return NULL;
-}
-
-void
-printer_get_ppd_async (const gchar *printer_name,
-                       const gchar *host_name,
-                       gint         port,
-                       PGPCallback  callback,
-                       gpointer     user_data)
-{
-  PGPData *data;
-  GThread *thread;
-  GError  *error = NULL;
-
-  data = g_new0 (PGPData, 1);
-  data->printer_name = g_strdup (printer_name);
-  data->host_name = g_strdup (host_name);
-  data->port = port;
-  data->callback = callback;
-  data->user_data = user_data;
-  data->context = g_main_context_ref_thread_default ();
-
-  thread = g_thread_try_new ("printer-get-ppd",
-                             printer_get_ppd_func,
-                             data,
-                             &error);
-
-  if (!thread)
-    {
-      g_warning ("%s", error->message);
-      callback (NULL, user_data);
-
-      g_error_free (error);
-      printer_get_ppd_data_free (data);
-    }
-  else
-    {
-      g_thread_unref (thread);
-    }
-}
-
-typedef struct
-{
-  gchar        *printer_name;
-  cups_dest_t  *result;
-  GNDCallback   callback;
-  gpointer      user_data;
-  GMainContext *context;
-} GNDData;
-
-static gboolean
-get_named_dest_idle_cb (gpointer user_data)
-{
-  GNDData *data = (GNDData *) user_data;
-
-  data->callback (data->result, data->user_data);
-
-  return FALSE;
-}
-
-static void
-get_named_dest_data_free (gpointer user_data)
-{
-  GNDData *data = (GNDData *) user_data;
-
-  if (data->context)
-    g_main_context_unref (data->context);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-static void
-get_named_dest_cb (gpointer user_data)
-{
-  GNDData *data = (GNDData *) user_data;
-  GSource *idle_source;
-
-  idle_source = g_idle_source_new ();
-  g_source_set_callback (idle_source,
-                         get_named_dest_idle_cb,
-                         data,
-                         get_named_dest_data_free);
-  g_source_attach (idle_source, data->context);
-  g_source_unref (idle_source);
-}
-
-static gpointer
-get_named_dest_func (gpointer user_data)
-{
-  GNDData *data = (GNDData *) user_data;
-
-  data->result = cupsGetNamedDest (CUPS_HTTP_DEFAULT, data->printer_name, NULL);
-
-  get_named_dest_cb (data);
-
-  return NULL;
-}
-
-void
-get_named_dest_async (const gchar *printer_name,
-                      GNDCallback  callback,
-                      gpointer     user_data)
-{
-  GNDData *data;
-  GThread *thread;
-  GError  *error = NULL;
-
-  data = g_new0 (GNDData, 1);
-  data->printer_name = g_strdup (printer_name);
-  data->callback = callback;
-  data->user_data = user_data;
-  data->context = g_main_context_ref_thread_default ();
-
-  thread = g_thread_try_new ("get-named-dest",
-                             get_named_dest_func,
-                             data,
-                             &error);
-
-  if (!thread)
-    {
-      g_warning ("%s", error->message);
-      callback (NULL, user_data);
-
-      g_error_free (error);
-      get_named_dest_data_free (data);
-    }
-  else
-    {
-      g_thread_unref (thread);
-    }
-}
-
-typedef struct
-{
-  GCancellable *cancellable;
-  PAOCallback   callback;
-  gpointer      user_data;
-} PAOData;
-
-static void
-printer_add_option_async_dbus_cb (GObject      *source_object,
-                                  GAsyncResult *res,
-                                  gpointer      user_data)
-{
-  GVariant *output;
-  gboolean  success = FALSE;
-  PAOData  *data = (PAOData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      const gchar *ret_error;
-
-      g_variant_get (output, "(&s)", &ret_error);
-      if (ret_error[0] != '\0')
-        g_warning ("cups-pk-helper: setting of an option failed: %s", ret_error);
-      else
-        success = TRUE;
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  data->callback (success, data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data);
-}
-
-void
-printer_add_option_async (const gchar   *printer_name,
-                          const gchar   *option_name,
-                          gchar        **values,
-                          gboolean       set_default,
-                          GCancellable  *cancellable,
-                          PAOCallback    callback,
-                          gpointer       user_data)
-{
-  GVariantBuilder  array_builder;
-  GDBusConnection *bus;
-  PAOData         *data;
-  GError          *error = NULL;
-  gint             i;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     callback (FALSE, user_data);
-     return;
-   }
-
-  g_variant_builder_init (&array_builder, G_VARIANT_TYPE ("as"));
-  if (values)
-    {
-      for (i = 0; values[i]; i++)
-        g_variant_builder_add (&array_builder, "s", values[i]);
-    }
-
-  data = g_new0 (PAOData, 1);
-  data->cancellable = cancellable;
-  data->callback = callback;
-  data->user_data = user_data;
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          set_default ? "PrinterAddOptionDefault" :
-                                        "PrinterAddOption",
-                          g_variant_new ("(ssas)",
-                                         printer_name,
-                                         option_name,
-                                         &array_builder),
-                          G_VARIANT_TYPE ("(s)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          DBUS_TIMEOUT,
-                          cancellable,
-                          printer_add_option_async_dbus_cb,
-                          data);
-}
-
-typedef struct
-{
-  GCancellable *cancellable;
-  GCDCallback   callback;
-  gpointer      user_data;
-  GList        *backend_list;
-} GCDData;
-
-static gint
-get_suffix_index (gchar *string)
-{
-  gchar *number;
-  gchar *endptr;
-  gint   index = -1;
-
-  number = g_strrstr (string, ":");
-  if (number)
-    {
-      number++;
-      index = g_ascii_strtoll (number, &endptr, 10);
-      if (index == 0 && endptr == number)
-        index = -1;
-    }
-
-  return index;
-}
-
-static void
-get_cups_devices_async_dbus_cb (GObject      *source_object,
-                                GAsyncResult *res,
-                                gpointer      user_data)
-
-{
-  PpPrintDevice **devices = NULL;
-  GVariant       *output;
-  GCDData        *data = (GCDData *) user_data;
-  GError         *error = NULL;
-  GList          *result = NULL;
-  gint            num_of_devices = 0;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-
-  if (output)
-    {
-      const gchar *ret_error;
-      GVariant    *devices_variant = NULL;
-
-      g_variant_get (output, "(&s@a{ss})",
-                     &ret_error,
-                     &devices_variant);
-
-      if (ret_error[0] != '\0')
-        {
-          g_warning ("cups-pk-helper: getting of CUPS devices failed: %s", ret_error);
-        }
-
-      if (devices_variant)
-        {
-          GVariantIter *iter;
-          GVariant     *item;
-          gchar        *key;
-          gchar        *value;
-          gint          index = -1, max_index = -1, i;
-
-          g_variant_get (devices_variant, "a{ss}", &iter);
-          while ((item = g_variant_iter_next_value (iter)))
-            {
-              g_variant_get (item, "{ss}", &key, &value);
-
-              index = get_suffix_index (key);
-              if (index > max_index)
-                max_index = index;
-
-              g_free (key);
-              g_free (value);
-              g_variant_unref (item);
-            }
-
-          if (max_index >= 0)
-            {
-              num_of_devices = max_index + 1;
-              devices = g_new0 (PpPrintDevice *, num_of_devices);
-
-              g_variant_get (devices_variant, "a{ss}", &iter);
-              while ((item = g_variant_iter_next_value (iter)))
-                {
-                  g_variant_get (item, "{ss}", &key, &value);
-
-                  index = get_suffix_index (key);
-                  if (index >= 0)
-                    {
-                      if (!devices[index])
-                        devices[index] = g_new0 (PpPrintDevice, 1);
-
-                      if (g_str_has_prefix (key, "device-class"))
-                        devices[index]->device_class = g_strdup (value);
-                      else if (g_str_has_prefix (key, "device-id"))
-                        devices[index]->device_id = g_strdup (value);
-                      else if (g_str_has_prefix (key, "device-info"))
-                        devices[index]->device_info = g_strdup (value);
-                      else if (g_str_has_prefix (key, "device-make-and-model"))
-                        {
-                          devices[index]->device_make_and_model = g_strdup (value);
-                          devices[index]->device_name = g_strdup (value);
-                        }
-                      else if (g_str_has_prefix (key, "device-uri"))
-                        devices[index]->device_uri = g_strdup (value);
-                      else if (g_str_has_prefix (key, "device-location"))
-                        devices[index]->device_location = g_strdup (value);
-
-                      devices[index]->acquisition_method = ACQUISITION_METHOD_DEFAULT_CUPS_SERVER;
-                    }
-
-                  g_free (key);
-                  g_free (value);
-                  g_variant_unref (item);
-                }
-
-              for (i = 0; i < num_of_devices; i++)
-                result = g_list_append (result, devices[i]);
-
-              g_free (devices);
-            }
-
-          g_variant_unref (devices_variant);
-        }
-
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (error->domain != G_IO_ERROR ||
-          error->code != G_IO_ERROR_CANCELLED)
-        g_warning ("%s", error->message);
-      g_error_free (error);
-
-      data->callback (result,
-                      TRUE,
-                      g_cancellable_is_cancelled (data->cancellable),
-                      data->user_data);
-
-      g_list_free_full (data->backend_list, g_free);
-      data->backend_list = NULL;
-      g_object_unref (source_object);
-      if (data->cancellable)
-        g_object_unref (data->cancellable);
-      g_free (data);
-
-      return;
-    }
-
-  if (data->backend_list)
-    {
-      if (!g_cancellable_is_cancelled (data->cancellable))
-        {
-          GVariantBuilder include_scheme_builder;
-
-          data->callback (result,
-                          FALSE,
-                          FALSE,
-                          data->user_data);
-
-          g_variant_builder_init (&include_scheme_builder, G_VARIANT_TYPE ("as"));
-          g_variant_builder_add (&include_scheme_builder, "s", data->backend_list->data);
-
-          g_free (data->backend_list->data);
-          data->backend_list = g_list_remove_link (data->backend_list, data->backend_list);
-
-          g_dbus_connection_call (G_DBUS_CONNECTION (g_object_ref (source_object)),
-                                  MECHANISM_BUS,
-                                  "/",
-                                  MECHANISM_BUS,
-                                  "DevicesGet",
-                                  g_variant_new ("(iiasas)",
-                                                 0,
-                                                 0,
-                                                 &include_scheme_builder,
-                                                 NULL),
-                                  G_VARIANT_TYPE ("(sa{ss})"),
-                                  G_DBUS_CALL_FLAGS_NONE,
-                                  DBUS_TIMEOUT,
-                                  data->cancellable,
-                                  get_cups_devices_async_dbus_cb,
-                                  user_data);
-          return;
-        }
-      else
-        {
-          data->callback (result,
-                          TRUE,
-                          TRUE,
-                          data->user_data);
-
-          g_list_free_full (data->backend_list, g_free);
-          data->backend_list = NULL;
-        }
-    }
-  else
-    {
-      data->callback (result,
-                      TRUE,
-                      g_cancellable_is_cancelled (data->cancellable),
-                      data->user_data);
-    }
-
-  g_object_unref (source_object);
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data);
-}
-
-void
-get_cups_devices_async (GCancellable *cancellable,
-                        GCDCallback   callback,
-                        gpointer      user_data)
-{
-  GDBusConnection *bus;
-  GVariantBuilder  include_scheme_builder;
-  GCDData         *data;
-  GError          *error = NULL;
-  gint             i;
-  const gchar     *backends[] =
-    {"hpfax", "ncp", "beh", "bluetooth", "snmp",
-     "dnssd", "hp", "ipp", "lpd", "parallel",
-     "serial", "socket", "usb", NULL};
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-   {
-     g_warning ("Failed to get system bus: %s", error->message);
-     g_error_free (error);
-     callback (NULL, TRUE, FALSE, user_data);
-     return;
-   }
-
-  data = g_new0 (GCDData, 1);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-  for (i = 0; backends[i]; i++)
-    data->backend_list = g_list_prepend (data->backend_list, g_strdup (backends[i]));
-
-  g_variant_builder_init (&include_scheme_builder, G_VARIANT_TYPE ("as"));
-  g_variant_builder_add (&include_scheme_builder, "s", data->backend_list->data);
-
-  g_free (data->backend_list->data);
-  data->backend_list = g_list_remove_link (data->backend_list, data->backend_list);
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          "DevicesGet",
-                          g_variant_new ("(iiasas)",
-                                         0,
-                                         0,
-                                         &include_scheme_builder,
-                                         NULL),
-                          G_VARIANT_TYPE ("(sa{ss})"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          DBUS_TIMEOUT,
-                          cancellable,
-                          get_cups_devices_async_dbus_cb,
-                          data);
-}
-
-void
-pp_print_device_free (PpPrintDevice *device)
-{
-  if (device)
-    {
-      g_free (device->device_class);
-      g_free (device->device_id);
-      g_free (device->device_info);
-      g_free (device->device_make_and_model);
-      g_free (device->device_uri);
-      g_free (device->device_location);
-      g_free (device->device_name);
-      g_free (device->device_ppd);
-      g_free (device);
-    }
-}
-
-typedef struct
-{
-  gchar        *printer_name;
-  gboolean      my_jobs;
-  gint          which_jobs;
-  cups_job_t   *jobs;
-  gint          num_of_jobs;
-  CGJCallback   callback;
-  gpointer      user_data;
-  GMainContext *context;
-} CGJData;
-
-static gboolean
-cups_get_jobs_idle_cb (gpointer user_data)
-{
-  CGJData *data = (CGJData *) user_data;
-
-  data->callback (data->jobs,
-                  data->num_of_jobs,
-                  data->user_data);
-
-  return FALSE;
-}
-
-static void
-cups_get_jobs_data_free (gpointer user_data)
-{
-  CGJData *data = (CGJData *) user_data;
-
-  if (data->context)
-    g_main_context_unref (data->context);
-  g_free (data->printer_name);
-  g_free (data);
-}
-
-static void
-cups_get_jobs_cb (gpointer user_data)
-{
-  CGJData *data = (CGJData *) user_data;
-  GSource *idle_source;
-
-  idle_source = g_idle_source_new ();
-  g_source_set_callback (idle_source,
-                         cups_get_jobs_idle_cb,
-                         data,
-                         cups_get_jobs_data_free);
-  g_source_attach (idle_source, data->context);
-  g_source_unref (idle_source);
-}
-
-static gpointer
-cups_get_jobs_func (gpointer user_data)
-{
-  CGJData *data = (CGJData *) user_data;
-
-  data->num_of_jobs = cupsGetJobs (&data->jobs,
-                                   data->printer_name,
-                                   data->my_jobs ? 1 : 0,
-                                   data->which_jobs);
-
-  cups_get_jobs_cb (data);
-
-  return NULL;
-}
-
-void
-cups_get_jobs_async (const gchar *printer_name,
-                     gboolean     my_jobs,
-                     gint         which_jobs,
-                     CGJCallback  callback,
-                     gpointer     user_data)
-{
-  CGJData *data;
-  GThread *thread;
-  GError  *error = NULL;
-
-  data = g_new0 (CGJData, 1);
-  data->printer_name = g_strdup (printer_name);
-  data->my_jobs = my_jobs;
-  data->which_jobs = which_jobs;
-  data->callback = callback;
-  data->user_data = user_data;
-  data->context = g_main_context_ref_thread_default ();
-
-  thread = g_thread_try_new ("cups-get-jobs",
-                             cups_get_jobs_func,
-                             data,
-                             &error);
-
-  if (!thread)
-    {
-      g_warning ("%s", error->message);
-      callback (NULL, 0, user_data);
-
-      g_error_free (error);
-      cups_get_jobs_data_free (data);
-    }
-  else
-    {
-      g_thread_unref (thread);
-    }
-}
-
-typedef struct
-{
-  GCancellable *cancellable;
-  JCPCallback   callback;
-  gpointer      user_data;
-} JCPData;
-
-static void
-job_cancel_purge_async_dbus_cb (GObject      *source_object,
-                                GAsyncResult *res,
-                                gpointer      user_data)
-{
-  GVariant *output;
-  JCPData  *data = (JCPData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (!g_cancellable_is_cancelled (data->cancellable))
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  data->callback (data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data);
-}
-
-void
-job_cancel_purge_async (gint          job_id,
-                        gboolean      job_purge,
-                        GCancellable *cancellable,
-                        JCPCallback   callback,
-                        gpointer      user_data)
-{
-  GDBusConnection *bus;
-  JCPData         *data;
-  GError          *error = NULL;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get session bus: %s", error->message);
-      g_error_free (error);
-      callback (user_data);
-      return;
-    }
-
-  data = g_new0 (JCPData, 1);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          "JobCancelPurge",
-                          g_variant_new ("(ib)",
-                                         job_id,
-                                         job_purge),
-                          G_VARIANT_TYPE ("(s)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          -1,
-                          NULL,
-                          job_cancel_purge_async_dbus_cb,
-                          data);
-}
-
-typedef struct
-{
-  GCancellable *cancellable;
-  JSHUCallback  callback;
-  gpointer      user_data;
-} JSHUData;
-
-static void
-job_set_hold_until_async_dbus_cb (GObject      *source_object,
-                                  GAsyncResult *res,
-                                  gpointer      user_data)
-{
-  GVariant *output;
-  JSHUData *data = (JSHUData *) user_data;
-  GError   *error = NULL;
-
-  output = g_dbus_connection_call_finish (G_DBUS_CONNECTION (source_object),
-                                          res,
-                                          &error);
-  g_object_unref (source_object);
-
-  if (output)
-    {
-      g_variant_unref (output);
-    }
-  else
-    {
-      if (!g_cancellable_is_cancelled (data->cancellable))
-        g_warning ("%s", error->message);
-      g_error_free (error);
-    }
-
-  data->callback (data->user_data);
-
-  if (data->cancellable)
-    g_object_unref (data->cancellable);
-  g_free (data);
-}
-
-void
-job_set_hold_until_async (gint          job_id,
-                          const gchar  *job_hold_until,
-                          GCancellable *cancellable,
-                          JSHUCallback  callback,
-                          gpointer      user_data)
-{
-  GDBusConnection *bus;
-  JSHUData        *data;
-  GError          *error = NULL;
-
-  bus = g_bus_get_sync (G_BUS_TYPE_SYSTEM, NULL, &error);
-  if (!bus)
-    {
-      g_warning ("Failed to get session bus: %s", error->message);
-      g_error_free (error);
-      callback (user_data);
-      return;
-    }
-
-  data = g_new0 (JSHUData, 1);
-  if (cancellable)
-    data->cancellable = g_object_ref (cancellable);
-  data->callback = callback;
-  data->user_data = user_data;
-
-  g_dbus_connection_call (bus,
-                          MECHANISM_BUS,
-                          "/",
-                          MECHANISM_BUS,
-                          "JobSetHoldUntil",
-                          g_variant_new ("(is)",
-                                         job_id,
-                                         job_hold_until),
-                          G_VARIANT_TYPE ("(s)"),
-                          G_DBUS_CALL_FLAGS_NONE,
-                          -1,
-                          NULL,
-                          job_set_hold_until_async_dbus_cb,
-                          data);
-}
diff --git a/panels/printers/pp-utils.h b/panels/printers/pp-utils.h
deleted file mode 100644
index 7c6cc2b..0000000
--- a/panels/printers/pp-utils.h
+++ /dev/null
@@ -1,298 +0,0 @@
-/* -*- Mode: C; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 8 -*-
- *
- * Copyright 2009-2010  Red Hat, Inc,
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#ifndef __PP_UTILS_H__
-#define __PP_UTILS_H__
-
-#include <gtk/gtk.h>
-#include <cups/cups.h>
-
-#define ALLOWED_CHARACTERS "abcdefghijklmnopqrtsuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_"
-
-#define MECHANISM_BUS "org.opensuse.CupsPkHelper.Mechanism"
-
-#define SCP_BUS   "org.fedoraproject.Config.Printing"
-#define SCP_PATH  "/org/fedoraproject/Config/Printing"
-#define SCP_IFACE "org.fedoraproject.Config.Printing"
-
-G_BEGIN_DECLS
-
-typedef void (*UserResponseCallback) (GtkDialog *dialog, gint response_id, gpointer user_data);
-
-/*
- * Match level of PPD driver.
- */
-enum
-{
-  PPD_NO_MATCH = 0,
-  PPD_GENERIC_MATCH,
-  PPD_CLOSE_MATCH,
-  PPD_EXACT_MATCH,
-  PPD_EXACT_CMD_MATCH
-};
-
-enum
-{
-  ACQUISITION_METHOD_DEFAULT_CUPS_SERVER = 0,
-  ACQUISITION_METHOD_REMOTE_CUPS_SERVER,
-  ACQUISITION_METHOD_SNMP
-};
-
-typedef struct
-{
-  gchar *ppd_name;
-  gchar *ppd_display_name;
-  gint   ppd_match_level;
-} PPDName;
-
-typedef struct
-{
-  gchar    *manufacturer_name;
-  gchar    *manufacturer_display_name;
-  PPDName **ppds;
-  gsize     num_of_ppds;
-} PPDManufacturerItem;
-
-typedef struct
-{
-  PPDManufacturerItem **manufacturers;
-  gsize                 num_of_manufacturers;
-} PPDList;
-
-gchar      *get_tag_value (const gchar *tag_string,
-                           const gchar *tag_name);
-
-char       *get_dest_attr (const char *dest_name,
-                           const char *attr);
-
-gchar      *get_ppd_attribute (const gchar *ppd_file_name,
-                               const gchar *attribute_name);
-
-void        cancel_cups_subscription (gint id);
-
-gint        renew_cups_subscription (gint id,
-                                     const char * const *events,
-                                     gint num_events,
-                                     gint lease_duration);
-
-void        set_local_default_printer (const gchar *printer_name);
-
-gboolean    printer_set_location (const gchar *printer_name,
-                                  const gchar *location);
-
-gboolean    printer_set_accepting_jobs (const gchar *printer_name,
-                                        gboolean     accepting_jobs,
-                                        const gchar *reason);
-
-gboolean    printer_set_enabled (const gchar *printer_name,
-                                 gboolean     enabled);
-
-gboolean    printer_rename (const gchar *old_name,
-                            const gchar *new_name);
-
-gboolean    printer_delete (const gchar *printer_name);
-
-gboolean    printer_set_default (const gchar *printer_name);
-
-gboolean    printer_set_shared (const gchar *printer_name,
-                                gboolean     shared);
-
-gboolean    printer_set_job_sheets (const gchar *printer_name,
-                                    const gchar *start_sheet,
-                                    const gchar *end_sheet);
-
-gboolean    printer_set_policy (const gchar *printer_name,
-                                const gchar *policy,
-                                gboolean     error_policy);
-
-gboolean    printer_set_users (const gchar  *printer_name,
-                               gchar       **users,
-                               gboolean      allowed);
-
-gboolean    class_add_printer (const gchar *class_name,
-                               const gchar *printer_name);
-
-gboolean    printer_is_local (cups_ptype_t  printer_type,
-                              const gchar  *device_uri);
-
-gchar      *printer_get_hostname (cups_ptype_t  printer_type,
-                                  const gchar  *device_uri,
-                                  const gchar  *printer_uri);
-
-void        printer_set_default_media_size (const gchar *printer_name);
-
-typedef void (*PSPCallback) (gchar    *printer_name,
-                             gboolean  success,
-                             gpointer  user_data);
-
-void        printer_set_ppd_async (const gchar  *printer_name,
-                                   const gchar  *ppd_name,
-                                   GCancellable *cancellable,
-                                   PSPCallback   callback,
-                                   gpointer      user_data);
-
-void        printer_set_ppd_file_async (const gchar *printer_name,
-                                        const gchar *ppd_filename,
-                                        GCancellable *cancellable,
-                                        PSPCallback   callback,
-                                        gpointer      user_data);
-
-typedef void (*GPNCallback) (PPDName     **names,
-                             const gchar  *printer_name,
-                             gboolean      cancelled,
-                             gpointer      user_data);
-
-void        get_ppd_names_async (gchar        *printer_name,
-                                 gint          count,
-                                 GCancellable *cancellable,
-                                 GPNCallback   callback,
-                                 gpointer      user_data);
-
-typedef void (*GAPCallback) (PPDList  *ppds,
-                             gpointer  user_data);
-
-void        get_all_ppds_async (GCancellable *cancellable,
-                                GAPCallback   callback,
-                                gpointer      user_data);
-
-PPDList    *ppd_list_copy (PPDList *list);
-void        ppd_list_free (PPDList *list);
-
-enum
-{
-  IPP_ATTRIBUTE_TYPE_INTEGER = 0,
-  IPP_ATTRIBUTE_TYPE_STRING,
-  IPP_ATTRIBUTE_TYPE_RANGE,
-  IPP_ATTRIBUTE_TYPE_BOOLEAN
-};
-
-typedef struct
-{
-  gboolean  boolean_value;
-  gchar    *string_value;
-  gint      integer_value;
-  gint      lower_range;
-  gint      upper_range;
-} IPPAttributeValue;
-
-typedef struct
-{
-  gchar             *attribute_name;
-  IPPAttributeValue *attribute_values;
-  gint               num_of_values;
-  gint               attribute_type;
-} IPPAttribute;
-
-typedef void (*GIACallback) (GHashTable *table,
-                             gpointer    user_data);
-
-void        get_ipp_attributes_async (const gchar  *printer_name,
-                                      gchar       **attributes_names,
-                                      GIACallback   callback,
-                                      gpointer      user_data);
-
-IPPAttribute *ipp_attribute_copy (IPPAttribute *attr);
-
-void        ipp_attribute_free (IPPAttribute *attr);
-
-gchar      *get_standard_manufacturers_name (gchar *name);
-
-typedef void (*PGPCallback) (const gchar *ppd_filename,
-                             gpointer     user_data);
-
-void        printer_get_ppd_async (const gchar *printer_name,
-                                   const gchar *host_name,
-                                   gint         port,
-                                   PGPCallback  callback,
-                                   gpointer     user_data);
-
-typedef void (*GNDCallback) (cups_dest_t *destination,
-                             gpointer     user_data);
-
-void        get_named_dest_async (const gchar *printer_name,
-                                  GNDCallback  callback,
-                                  gpointer     user_data);
-
-typedef void (*PAOCallback) (gboolean success,
-                             gpointer user_data);
-
-void        printer_add_option_async (const gchar   *printer_name,
-                                      const gchar   *option_name,
-                                      gchar        **values,
-                                      gboolean       set_default,
-                                      GCancellable  *cancellable,
-                                      PAOCallback    callback,
-                                      gpointer       user_data);
-
-typedef void (*CGJCallback) (cups_job_t *jobs,
-                             gint        num_of_jobs,
-                             gpointer    user_data);
-
-void        cups_get_jobs_async (const gchar *printer_name,
-                                 gboolean     my_jobs,
-                                 gint         which_jobs,
-                                 CGJCallback  callback,
-                                 gpointer     user_data);
-
-typedef void (*JCPCallback) (gpointer user_data);
-
-void job_cancel_purge_async (gint          job_id,
-                             gboolean      job_purge,
-                             GCancellable *cancellable,
-                             JCPCallback   callback,
-                             gpointer      user_data);
-
-typedef void (*JSHUCallback) (gpointer user_data);
-
-void job_set_hold_until_async (gint          job_id,
-                               const gchar  *job_hold_until,
-                               GCancellable *cancellable,
-                               JSHUCallback  callback,
-                               gpointer      user_data);
-typedef struct{
-  gchar *device_class;
-  gchar *device_id;
-  gchar *device_info;
-  gchar *device_make_and_model;
-  gchar *device_uri;
-  gchar *device_location;
-  gchar *device_name;
-  gchar *device_ppd;
-  gchar *host_name;
-  gint   host_port;
-  gint   acquisition_method;
-} PpPrintDevice;
-
-void        pp_print_device_free (PpPrintDevice *device);
-
-const gchar *get_paper_size_from_locale (void);
-
-typedef void (*GCDCallback) (GList          *devices,
-                             gboolean        finished,
-                             gboolean        cancelled,
-                             gpointer        user_data);
-
-void        get_cups_devices_async (GCancellable *cancellable,
-                                    GCDCallback   callback,
-                                    gpointer      user_data);
-
-G_END_DECLS
-
-#endif /* __PP_UTILS_H */
diff --git a/panels/printers/ppd-selection-dialog.ui b/panels/printers/ppd-selection-dialog.ui
deleted file mode 100644
index e0def83..0000000
--- a/panels/printers/ppd-selection-dialog.ui
+++ /dev/null
@@ -1,206 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<interface>
-  <!-- interface-requires gtk+ 3.0 -->
-  <object class="GtkDialog" id="ppd-selection-dialog">
-    <property name="width_request">500</property>
-    <property name="height_request">350</property>
-    <property name="can_focus">False</property>
-    <property name="border_width">5</property>
-    <property name="title" translatable="yes"> </property>
-    <property name="modal">True</property>
-    <property name="destroy_with_parent">True</property>
-    <property name="type_hint">dialog</property>
-    <child internal-child="vbox">
-      <object class="GtkBox" id="main-vbox">
-        <property name="visible">True</property>
-        <property name="can_focus">False</property>
-        <property name="orientation">vertical</property>
-        <property name="spacing">10</property>
-        <child internal-child="action_area">
-          <object class="GtkButtonBox" id="dialog-action-area1">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <property name="layout_style">end</property>
-            <child>
-              <object class="GtkButton" id="ppd-selection-cancel-button">
-                <property name="label" translatable="yes">Cancel</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkButton" id="ppd-selection-select-button">
-                <property name="label" translatable="yes">Select</property>
-                <property name="use_action_appearance">False</property>
-                <property name="visible">True</property>
-                <property name="sensitive">False</property>
-                <property name="can_focus">True</property>
-                <property name="receives_default">True</property>
-                <property name="use_action_appearance">False</property>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkBox" id="box2">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <child>
-                  <object class="GtkAlignment" id="alignment1">
-                    <property name="width_request">24</property>
-                    <property name="height_request">24</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <child>
-                      <object class="GtkSpinner" id="ppd-spinner">
-                        <property name="can_focus">False</property>
-                        <property name="no_show_all">True</property>
-                      </object>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="progress-label">
-                    <property name="can_focus">False</property>
-                    <property name="no_show_all">True</property>
-                    <property name="label" translatable="yes">Loading drivers database...</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">True</property>
-                    <property name="padding">10</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="fill">True</property>
-                <property name="position">2</property>
-                <property name="secondary">True</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="fill">True</property>
-            <property name="pack_type">end</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkAlignment" id="content-alignment">
-            <property name="visible">True</property>
-            <property name="can_focus">False</property>
-            <child>
-              <object class="GtkBox" id="box1">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="orientation">vertical</property>
-                <property name="spacing">10</property>
-                <child>
-                  <object class="GtkBox" id="box3">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <child>
-                      <object class="GtkScrolledWindow" id="scrolledwindow1">
-                        <property name="width_request">140</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="hscrollbar_policy">never</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkTreeView" id="ppd-selection-manufacturers-treeview">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <child internal-child="selection">
-                              <object class="GtkTreeSelection" id="treeview-selection"/>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">True</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkScrolledWindow" id="scrolledwindow2">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="shadow_type">in</property>
-                        <child>
-                          <object class="GtkTreeView" id="ppd-selection-models-treeview">
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <child internal-child="selection">
-                              <object class="GtkTreeSelection" id="treeview-selection1"/>
-                            </child>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="expand">True</property>
-                        <property name="fill">True</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="pack_type">end</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkLabel" id="options-title">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="xalign">0</property>
-                    <property name="label" translatable="yes">Select Printer Driver</property>
-                    <attributes>
-                      <attribute name="weight" value="bold"/>
-                    </attributes>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-    </child>
-    <action-widgets>
-      <action-widget response="-6">ppd-selection-cancel-button</action-widget>
-      <action-widget response="-5">ppd-selection-select-button</action-widget>
-    </action-widgets>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1"/>
-</interface>
diff --git a/panels/printers/printers-module.c b/panels/printers/printers-module.c
deleted file mode 100644
index fcde594..0000000
--- a/panels/printers/printers-module.c
+++ /dev/null
@@ -1,39 +0,0 @@
-/*
- * Copyright (C) 2010 Red Hat, Inc
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
- *
- */
-
-#include <config.h>
-
-#include "cc-printers-panel.h"
-
-#include <glib/gi18n.h>
-
-void
-g_io_module_load (GIOModule *module)
-{
-  bindtextdomain (GETTEXT_PACKAGE, GNOMELOCALEDIR);
-  bind_textdomain_codeset (GETTEXT_PACKAGE, "UTF-8");
-
-  /* register the panel */
-  cc_printers_panel_register (module);
-}
-
-void
-g_io_module_unload (GIOModule *module)
-{
-}
diff --git a/panels/printers/printers.ui b/panels/printers/printers.ui
deleted file mode 100644
index 696756a..0000000
--- a/panels/printers/printers.ui
+++ /dev/null
@@ -1,619 +0,0 @@
-<?xml version="1.0"?>
-<interface>
-  <requires lib="gtk+" version="2.20"/>
-  <!-- interface-naming-policy project-wide -->
-  <object class="GtkVBox" id="main-vbox">
-    <property name="border_width">10</property>
-    <property name="orientation">vertical</property>
-    <property name="spacing">10</property>
-    <child>
-      <object class="GtkHBox" id="hbox1">
-        <property name="visible">True</property>
-        <property name="spacing">10</property>
-        <child>
-          <object class="GtkVBox" id="vbox4">
-            <property name="visible">True</property>
-            <property name="orientation">vertical</property>
-            <child>
-              <object class="GtkScrolledWindow" id="printers-scrolledwindow">
-                <property name="visible">True</property>
-                <property name="can_focus">True</property>
-                <property name="hscrollbar_policy">never</property>
-                <property name="vscrollbar_policy">automatic</property>
-                <property name="shadow_type">in</property>
-                <child>
-                  <object class="GtkTreeView" id="printers-treeview">
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="headers_visible">False</property>
-                  </object>
-                </child>
-              </object>
-              <packing>
-                <property name="position">0</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkToolbar" id="printers-toolbar">
-                <property name="visible">True</property>
-                <property name="icon_size">1</property>
-                <property name="icon_size_set">True</property>
-                <property name="toolbar-style">icons</property>
-                <style>
-                  <class name="inline-toolbar"/>
-                </style>
-                <child>
-                  <object class="GtkToolButton" id="printer-add-button">
-                    <property name="visible">True</property>
-                    <property name="sensitive">True</property>
-                    <property name="use_underline">True</property>
-                    <property name="icon_name">list-add-symbolic</property>
-                    <property name="label" translatable="yes">Add Printer</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="homogeneous">True</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkToolButton" id="printer-remove-button">
-                    <property name="visible">True</property>
-                    <property name="use_underline">True</property>
-                    <property name="icon_name">list-remove-symbolic</property>
-                    <property name="label" translatable="yes">Remove Printer</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="homogeneous">True</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="expand">False</property>
-                <property name="position">1</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">False</property>
-            <property name="position">0</property>
-          </packing>
-        </child>
-        <child>
-          <object class="GtkNotebook" id="notebook">
-            <property name="visible">True</property>
-            <property name="can_focus">True</property>
-            <property name="show_tabs">False</property>
-            <property name="show_border">False</property>
-            <child>
-              <object class="GtkVBox" id="vbox1">
-                <property name="visible">True</property>
-                <property name="orientation">vertical</property>
-                <property name="spacing">10</property>
-                <child>
-                  <object class="GtkTable" id="table1">
-                    <property name="visible">True</property>
-                    <property name="n_rows">8</property>
-                    <property name="n_columns">3</property>
-                    <property name="column_spacing">18</property>
-                    <property name="row_spacing">10</property>
-                    <child>
-                      <object class="GtkLabel" id="supply-label">
-                        <property name="visible">True</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes" comments="Translators: By supply we mean ink, toner, staples, water, ...">Supply</property>
-                        <style>
-                          <class name="dim-label-ucc"/>
-                        </style>
-                      </object>
-                      <packing>
-                        <property name="top_attach">5</property>
-                        <property name="bottom_attach">6</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label10">
-                        <property name="visible">True</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes" comments="Translators: Location of the printer (e.g. Lab, 1st floor,...).">Location</property>
-                        <style>
-                          <class name="dim-label-ucc"/>
-                        </style>
-                      </object>
-                      <packing>
-                        <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkDrawingArea" id="supply-drawing-area">
-                        <property name="visible">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">3</property>
-                        <property name="top_attach">5</property>
-                        <property name="bottom_attach">6</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="CcEditableEntry" id="printer-location-label">
-                        <property name="visible">True</property>
-                        <property name="xalign">0</property>
-                        <property name="text">---</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">3</property>
-                        <property name="top_attach">2</property>
-                        <property name="bottom_attach">3</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="CcEditableEntry" id="printer-status-label">
-                        <property name="visible">True</property>
-                        <property name="xalign">0</property>
-                        <property name="yalign">0</property>
-                        <property name="text">Printing...</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="top_attach">1</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkCheckButton" id="printer-default-check-button">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">False</property>
-                        <property name="draw_indicator">True</property>
-                        <child>
-                          <object class="GtkLabel" id="label8">
-                            <property name="visible">True</property>
-                            <property name="label" translatable="yes" comments="Translators: This checkbox is checked when the default printer is selected.">_Default</property>
-                            <property name="use_underline">True</property>
-                            <attributes>
-                              <attribute name="style" value="normal"/>
-                            </attributes>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">7</property>
-                        <property name="bottom_attach">8</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label12">
-                        <property name="visible">True</property>
-                        <property name="label" translatable="yes"></property>
-                      </object>
-                      <packing>
-                        <property name="top_attach">7</property>
-                        <property name="bottom_attach">8</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label3">
-                        <property name="visible">True</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes">Jobs</property>
-                        <style>
-                          <class name="dim-label-ucc"/>
-                        </style>
-                      </object>
-                      <packing>
-                        <property name="top_attach">6</property>
-                        <property name="bottom_attach">7</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options"></property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="CcEditableEntry" id="printer-jobs-label">
-                        <property name="visible">True</property>
-                        <property name="xalign">0</property>
-                        <property name="text" translatable="no">0 active</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">6</property>
-                        <property name="bottom_attach">7</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="printer-jobs-button">
-                        <property name="label" translatable="yes" comments="Tanslators: Opens a dialog containing printer's jobs">_Show</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="use_underline">True</property>
-                        <property name="halign">GTK_ALIGN_END</property>
-                        <property name="valign">GTK_ALIGN_CENTER</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
-                        <property name="top_attach">6</property>
-                        <property name="bottom_attach">7</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="CcEditableEntry" id="printer-name-label">
-                        <property name="visible">True</property>
-                        <property name="xalign">0</property>
-                        <property name="yalign">1</property>
-                        <property name="text">Printer</property>
-                        <property name="weight">700</property>
-                        <property name="scale">1.2</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">2</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkImage" id="printer-icon">
-                        <property name="visible">True</property>
-                        <property name="xalign">1</property>
-                        <property name="pixel_size">64</property>
-                        <property name="icon_name">printer</property>
-                      </object>
-                      <packing>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label14">
-                        <property name="visible">True</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes">Model</property>
-                        <style>
-                          <class name="dim-label-ucc"/>
-                        </style>
-                      </object>
-                      <packing>
-                        <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label15">
-                        <property name="visible">True</property>
-                        <property name="xalign">1</property>
-                        <property name="label" translatable="yes">IP Address</property>
-                        <style>
-                          <class name="dim-label-ucc"/>
-                        </style>
-                      </object>
-                      <packing>
-                        <property name="top_attach">4</property>
-                        <property name="bottom_attach">5</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkNotebook" id="printer-model-notebook">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="show_tabs">False</property>
-                        <child>
-                          <object class="GtkButton" id="printer-model-button">
-                            <property name="use_action_appearance">False</property>
-                            <property name="visible">True</property>
-                            <property name="can_focus">True</property>
-                            <property name="receives_default">True</property>
-                            <property name="use_action_appearance">False</property>
-                            <property name="relief">none</property>
-                            <property name="xalign">0</property>
-                          </object>
-                        </child>
-                        <child type="tab">
-                          <object class="GtkLabel" id="label7">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">page 1</property>
-                          </object>
-                          <packing>
-                            <property name="tab_fill">False</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkLabel" id="printer-model-label">
-                            <property name="visible">True</property>
-                            <property name="selectable">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="xalign">0</property>
-                            <property name="label" translatable="yes">label</property>
-                          </object>
-                          <packing>
-                            <property name="position">1</property>
-                          </packing>
-                        </child>
-                        <child type="tab">
-                          <object class="GtkLabel" id="label13">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">page 2</property>
-                          </object>
-                          <packing>
-                            <property name="position">1</property>
-                            <property name="tab_fill">False</property>
-                          </packing>
-                        </child>
-                        <child>
-                          <object class="GtkLabel" id="label17">
-                            <property name="visible">True</property>
-                            <property name="sensitive">False</property>
-                            <property name="can_focus">False</property>
-                            <property name="xalign">0</property>
-                            <property name="xpad">10</property>
-                            <property name="label" translatable="yes">Setting new driver...</property>
-                          </object>
-                          <packing>
-                            <property name="position">2</property>
-                          </packing>
-                        </child>
-                        <child type="tab">
-                          <object class="GtkLabel" id="label16">
-                            <property name="visible">True</property>
-                            <property name="can_focus">False</property>
-                            <property name="label" translatable="yes">page 3</property>
-                          </object>
-                          <packing>
-                            <property name="position">2</property>
-                            <property name="tab_fill">False</property>
-                          </packing>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="right_attach">3</property>
-                        <property name="top_attach">3</property>
-                        <property name="bottom_attach">4</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="CcEditableEntry" id="printer-ip-address-label">
-                        <property name="visible">True</property>
-                        <property name="xalign">0</property>
-                        <property name="text">---</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">1</property>
-                        <property name="top_attach">4</property>
-                        <property name="bottom_attach">5</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkSwitch" id="printer-disable-switch">
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                        <property name="halign">GTK_ALIGN_END</property>
-                        <property name="valign">GTK_ALIGN_CENTER</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
-                        <property name="bottom_attach">2</property>
-                        <property name="x_options">GTK_FILL</property>
-                        <property name="y_options">GTK_FILL</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label18">
-                        <property name="visible">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
-                        <property name="top_attach">4</property>
-                        <property name="bottom_attach">5</property>
-                        <property name="x_options">0</property>
-                        <property name="y_options">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkLabel" id="label20">
-                        <property name="visible">True</property>
-                      </object>
-                      <packing>
-                        <property name="left_attach">2</property>
-                        <property name="right_attach">3</property>
-                        <property name="top_attach">7</property>
-                        <property name="bottom_attach">8</property>
-                        <property name="x_options">0</property>
-                        <property name="y_options">0</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkHButtonBox" id="hbuttonbox1">
-                    <property name="visible">True</property>
-                    <property name="spacing">5</property>
-                    <property name="homogeneous">True</property>
-                    <child>
-                      <object class="GtkButton" id="print-test-page-button">
-                        <property name="label" translatable="yes" comments="Translators: This button executes command which prints test page.">Print _Test Page</property>
-                        <property name="use_underline">True</property>
-                        <property name="visible">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">0</property>
-                      </packing>
-                    </child>
-                    <child>
-                      <object class="GtkButton" id="printer-options-button">
-                        <property name="label" translatable="yes" comments="Translators: This button opens printer's options tab">_Options</property>
-                        <property name="visible">True</property>
-                        <property name="use_underline">True</property>
-                        <property name="can_focus">True</property>
-                        <property name="receives_default">True</property>
-                      </object>
-                      <packing>
-                        <property name="expand">False</property>
-                        <property name="fill">False</property>
-                        <property name="position">1</property>
-                      </packing>
-                    </child>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="pack_type">end</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="tab_expand">True</property>
-              </packing>
-            </child>
-            <child type="tab">
-              <object class="GtkLabel" id="label2">
-                <property name="visible">True</property>
-                <property name="label">Info</property>
-              </object>
-              <packing>
-                <property name="tab_fill">False</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkHButtonBox" id="hbuttonbox2">
-                <property name="visible">True</property>
-                <child>
-                  <object class="GtkButton" id="printer-add-button2">
-                    <property name="label" translatable="yes" comments="Translators: This button adds new printer.">Add New Printer</property>
-                    <property name="visible">True</property>
-                    <property name="can_focus">True</property>
-                    <property name="receives_default">True</property>
-                  </object>
-                  <packing>
-                    <property name="expand">False</property>
-                    <property name="fill">False</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="position">1</property>
-              </packing>
-            </child>
-            <child type="tab">
-              <object class="GtkLabel" id="label21">
-                <property name="visible">True</property>
-                <property name="label">No printers</property>
-              </object>
-              <packing>
-                <property name="position">1</property>
-                <property name="tab_fill">False</property>
-              </packing>
-            </child>
-            <child>
-              <object class="GtkVBox" id="vbox7">
-                <property name="visible">True</property>
-                <property name="can_focus">False</property>
-                <property name="spacing">20</property>
-                <child>
-                  <object class="GtkLabel" id="no-cups-label">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="yalign">1</property>
-                    <property name="label" translatable="yes" comments="Translators: The CUPS server is not running (we can not connect to it).">Sorry! The system printing service
-doesn't seem to be available.</property>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">0</property>
-                  </packing>
-                </child>
-                <child>
-                  <object class="GtkImage" id="image1">
-                    <property name="visible">True</property>
-                    <property name="can_focus">False</property>
-                    <property name="yalign">0</property>
-                    <property name="pixel_size">64</property>
-                    <property name="icon_name">computer-fail</property>
-                  </object>
-                  <packing>
-                    <property name="expand">True</property>
-                    <property name="fill">True</property>
-                    <property name="position">1</property>
-                  </packing>
-                </child>
-              </object>
-              <packing>
-                <property name="position">2</property>
-              </packing>
-            </child>
-            <child type="tab">
-              <object class="GtkLabel" id="label9">
-                <property name="visible">True</property>
-                <property name="label">No cups</property>
-              </object>
-              <packing>
-                <property name="position">2</property>
-                <property name="tab_fill">False</property>
-              </packing>
-            </child>
-          </object>
-          <packing>
-            <property name="expand">True</property>
-            <property name="fill">True</property>
-            <property name="position">1</property>
-          </packing>
-        </child>
-      </object>
-      <packing>
-        <property name="expand">True</property>
-        <property name="fill">True</property>
-        <property name="position">0</property>
-      </packing>
-    </child>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup1">
-   <widgets>
-      <widget name="back-button-1"/>
-      <widget name="back-spacer-label-1"/>
-   </widgets>
-  </object>
-  <object class="GtkSizeGroup" id="sizegroup2">
-   <widgets>
-      <widget name="back-button-2"/>
-      <widget name="back-spacer-label-2"/>
-   </widgets>
-  </object>
-</interface>
diff --git a/panels/printers/unity-printers-panel.desktop.in.in b/panels/printers/unity-printers-panel.desktop.in.in
deleted file mode 100644
index 6d8b81b..0000000
--- a/panels/printers/unity-printers-panel.desktop.in.in
+++ /dev/null
@@ -1,14 +0,0 @@
-[Desktop Entry]
-_Name=Printers
-_Comment=Change printer settings
-Exec=unity-control-center printers
-Icon=printer
-Terminal=false
-Type=Application
-StartupNotify=true
-# The X-Unity-Settings-Panel is necessary to show in the main shell UI
-Categories=GNOME;GTK;Settings;HardwareSettings;X-Unity-Settings-Panel;
-OnlyShowIn=GNOME;
-X-Unity-Settings-Panel=printers
-# Translators: those are keywords for the printing control-center panel
-_Keywords=Printer;Queue;Print;Paper;Ink;Toner;
diff --git a/po/POTFILES.in b/po/POTFILES.in
index f84cf83..48e087a 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -55,19 +55,6 @@ panels/network/panel-common.c
 panels/power/cc-power-panel.c
 panels/power/unity-power-panel.desktop.in.in
 [type: gettext/glade]panels/power/power.ui
-panels/printers/cc-printers-panel.c
-panels/printers/unity-printers-panel.desktop.in.in
-[type: gettext/glade]panels/printers/jobs-dialog.ui
-[type: gettext/glade]panels/printers/new-printer-dialog.ui
-[type: gettext/glade]panels/printers/options-dialog.ui
-[type: gettext/glade]panels/printers/ppd-selection-dialog.ui
-panels/printers/pp-ipp-option-widget.c
-panels/printers/pp-jobs-dialog.c
-panels/printers/pp-new-printer-dialog.c
-panels/printers/pp-options-dialog.c
-panels/printers/pp-ppd-option-widget.c
-panels/printers/pp-ppd-selection-dialog.c
-[type: gettext/glade]panels/printers/printers.ui
 panels/region/unity-region-panel.desktop.in.in
 [type: gettext/glade]panels/region/unity-region-panel.ui
 panels/region/gnome-region-panel-formats.c
diff --git a/po/POTFILES.skip b/po/POTFILES.skip
index c0c3a0e..f3e7dbb 100644
--- a/po/POTFILES.skip
+++ b/po/POTFILES.skip
@@ -8,7 +8,6 @@ panels/mouse/gnome-mouse-panel.desktop.in
 panels/network/gnome-network-panel.desktop.in
 panels/online-accounts/gnome-online-accounts-panel.desktop.in
 panels/power/gnome-power-panel.desktop.in
-panels/printers/gnome-printers-panel.desktop.in
 panels/region/gnome-region-panel.desktop.in
 panels/screen/gnome-screen-panel.desktop.in
 panels/sound/data/gnome-sound-panel.desktop.in
-- 
1.9.2

