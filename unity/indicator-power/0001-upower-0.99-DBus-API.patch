From b78f6b6d900979b04633b2507c2226e8ad254509 Mon Sep 17 00:00:00 2001
From: Xiao-Long Chen <chenxiaolong@cxl.epac.to>
Date: Wed, 9 Apr 2014 13:40:46 -0400
Subject: [PATCH] upower 0.99 DBus API

Please be nice if the code is utter crap :) I'm a newbie with DBus
---
 configure.ac                   |   4 +-
 src/Makefile.am                |  19 ---
 src/device-provider-upower.c   | 375 ++++++++++++++++++-----------------------
 src/device.h                   |  32 +---
 src/org.freedesktop.UPower.xml |  43 -----
 5 files changed, 168 insertions(+), 305 deletions(-)
 delete mode 100644 src/org.freedesktop.UPower.xml

diff --git a/configure.ac b/configure.ac
index ca7e793..23e3f05 100644
--- a/configure.ac
+++ b/configure.ac
@@ -32,12 +32,14 @@ LT_INIT
 # Dependencies
 ###########################
 
+UPOWER_REQUIRED_VERSION=0.99.0
 GLIB_REQUIRED_VERSION=2.35.4
 GIO_REQUIRED_VERSION=2.26
 GIO_UNIX_REQUIRED_VERSION=2.26
 GUDEV_REQUIRED_VERSION=204
 
-PKG_CHECK_MODULES([SERVICE_DEPS],[glib-2.0 >= $GLIB_REQUIRED_VERSION
+PKG_CHECK_MODULES([SERVICE_DEPS],[upower-glib >= $UPOWER_REQUIRED_VERSION
+                                  glib-2.0 >= $GLIB_REQUIRED_VERSION
                                   gio-2.0 >= $GIO_REQUIRED_VERSION
                                   gio-unix-2.0 >= $GIO_UNIX_REQUIRED_VERSION
                                   gudev-1.0 >= $GUDEV_REQUIRED_VERSION
diff --git a/src/Makefile.am b/src/Makefile.am
index 2461592..cab6a17 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -9,30 +9,11 @@ SHARED_CFLAGS = \
 
 ###
 ###
-
-upower_dbus_sources = \
-  dbus-upower.c \
-  dbus-upower.h
-
-$(upower_dbus_sources): org.freedesktop.UPower.xml
-	$(AM_V_GEN) gdbus-codegen \
-	  --c-namespace Dbus \
-	  --interface-prefix org.freedesktop \
-	  --generate-c-code dbus-upower \
-          $^
-
-BUILT_SOURCES += $(upower_dbus_sources)
-CLEANFILES += $(upower_dbus_sources)
-EXTRA_DIST += org.freedesktop.UPower.xml
-
-###
-###
 ###
 
 noinst_LIBRARIES = libindicatorpower-upower.a libindicatorpower-service.a
 
 libindicatorpower_upower_a_SOURCES = \
-  $(upower_dbus_sources) \
   device-provider-upower.c \
   device-provider-upower.h
 
diff --git a/src/device-provider-upower.c b/src/device-provider-upower.c
index 7c12beb..dcb4176 100644
--- a/src/device-provider-upower.c
+++ b/src/device-provider-upower.c
@@ -19,10 +19,15 @@
 
 #include "config.h"
 
-#include "dbus-upower.h"
 #include "device.h"
 #include "device-provider.h"
 #include "device-provider-upower.h"
+#include <glib.h>
+#include <libupower-glib/upower.h>
+
+#define LOGIND_DBUS_NAME      "org.freedesktop.login1"
+#define LOGIND_DBUS_PATH      "/org/freedesktop/login1"
+#define LOGIND_DBUS_INTERFACE "org.freedesktop.login1.Manager"
 
 #define BUS_NAME "org.freedesktop.UPower"
 #define BUS_PATH "/org/freedesktop/UPower"
@@ -35,7 +40,9 @@ struct _IndicatorPowerDeviceProviderUPowerPriv
 {
   GDBusConnection * bus;
 
-  DbusUPower * upower_proxy;
+  GDBusProxy * logind_proxy;
+  UpClient * upower_client;
+  GPtrArray * upower_devices;
   GHashTable * devices; /* dbus object path --> IndicatorPowerDevice */
   GCancellable * cancellable;
 
@@ -66,12 +73,6 @@ G_DEFINE_TYPE_WITH_CODE (
 ****  UPOWER DBUS
 ***/
 
-struct device_get_all_data
-{
-  char * path;
-  IndicatorPowerDeviceProviderUPower * self;
-};
-
 static void
 emit_devices_changed (IndicatorPowerDeviceProviderUPower * self)
 {
@@ -79,97 +80,63 @@ emit_devices_changed (IndicatorPowerDeviceProviderUPower * self)
 }
 
 static void
-on_device_properties_ready (GObject * o, GAsyncResult * res, gpointer gdata)
+update_device_from_object_path (IndicatorPowerDeviceProviderUPower * self,
+                                const char                         * path)
 {
-  GError * error;
-  GVariant * response;
-  struct device_get_all_data * data = gdata;
-
-  error = NULL;
-  response = g_dbus_connection_call_finish (G_DBUS_CONNECTION(o), res, &error);
-  if (error != NULL)
+  UpDevice *device = NULL;
+  guint i;
+  for (i = 0; i < self->priv->upower_devices->len; i++)
     {
-      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-        g_warning ("Error getting properties for UPower device '%s': %s",
-                   data->path, error->message);
+      device = g_ptr_array_index (self->priv->upower_devices, i);
+      if (g_strcmp0 (path, up_device_get_object_path (device)) == 0)
+        {
+          break;
+        }
+    }
 
-      g_error_free (error);
+  IndicatorPowerDevice * ip_device;
+  UpDeviceKind kind;
+  UpDeviceState state;
+  gdouble percentage;
+  gint64 time_to_empty;
+  gint64 time_to_full;
+  time_t time;
+
+  g_object_get (device,
+                "kind", &kind,
+                "state", &state,
+                "percentage", &percentage,
+                "time-to-empty", &time_to_empty,
+                "time-to-full", &time_to_full,
+                NULL);
+
+  time = time_to_empty ? time_to_empty : time_to_full;
+
+  if ((ip_device = g_hash_table_lookup (self->priv->devices, path)))
+    {
+      g_object_set (ip_device, INDICATOR_POWER_DEVICE_KIND, (gint)kind,
+                               INDICATOR_POWER_DEVICE_STATE, (gint)state,
+                               INDICATOR_POWER_DEVICE_OBJECT_PATH, path,
+                               INDICATOR_POWER_DEVICE_PERCENTAGE, percentage,
+                               INDICATOR_POWER_DEVICE_TIME, (guint64)time,
+                               NULL);
     }
   else
     {
-      guint32 kind = 0;
-      guint32 state = 0;
-      gdouble percentage = 0;
-      gint64 time_to_empty = 0;
-      gint64 time_to_full = 0;
-      time_t time;
-      IndicatorPowerDevice * device;
-      IndicatorPowerDeviceProviderUPowerPriv * p = data->self->priv;
-      GVariant * dict = g_variant_get_child_value (response, 0);
-
-      g_variant_lookup (dict, "Type", "u", &kind);
-      g_variant_lookup (dict, "State", "u", &state);
-      g_variant_lookup (dict, "Percentage", "d", &percentage);
-      g_variant_lookup (dict, "TimeToEmpty", "x", &time_to_empty);
-      g_variant_lookup (dict, "TimeToFull", "x", &time_to_full);
-      time = time_to_empty ? time_to_empty : time_to_full;
-
-      if ((device = g_hash_table_lookup (p->devices, data->path)))
-        {
-          g_object_set (device, INDICATOR_POWER_DEVICE_KIND, (gint)kind,
-                                INDICATOR_POWER_DEVICE_STATE, (gint)state,
-                                INDICATOR_POWER_DEVICE_OBJECT_PATH, data->path,
-                                INDICATOR_POWER_DEVICE_PERCENTAGE, percentage,
-                                INDICATOR_POWER_DEVICE_TIME, (guint64)time,
-                                NULL);
-        }
-      else
-        {
-          device = indicator_power_device_new (data->path,
-                                               kind,
-                                               percentage,
-                                               state,
-                                               time);
-
-          g_hash_table_insert (p->devices,
-                               g_strdup (data->path),
-                               g_object_ref (device));
+      ip_device = indicator_power_device_new (path,
+                                           kind,
+                                           percentage,
+                                           state,
+                                           time);
 
-          g_object_unref (device);
-        }
+      g_hash_table_insert (self->priv->devices,
+                           g_strdup (path),
+                           g_object_ref (ip_device));
 
-      emit_devices_changed (data->self);
-      g_variant_unref (dict);
-      g_variant_unref (response);
+      g_object_unref (ip_device);
     }
 
-  g_free (data->path);
-  g_slice_free (struct device_get_all_data, data);
-}
-
-static void
-update_device_from_object_path (IndicatorPowerDeviceProviderUPower * self,
-                                const char                         * path)
-{
-  priv_t * p = self->priv;
-  struct device_get_all_data * data;
-
-  data = g_slice_new (struct device_get_all_data);
-  data->path = g_strdup (path);
-  data->self = self;
-
-  g_dbus_connection_call (p->bus,
-                          BUS_NAME,
-                          path,
-                          "org.freedesktop.DBus.Properties",
-                          "GetAll",
-                          g_variant_new ("(s)", "org.freedesktop.UPower.Device"),
-                          G_VARIANT_TYPE("(a{sv})"),
-                          G_DBUS_CALL_FLAGS_NO_AUTO_START,
-                          -1, /* default timeout */
-                          p->cancellable,
-                          on_device_properties_ready,
-                          data);
+  emit_devices_changed (self);
 }
 
 /*
@@ -228,154 +195,85 @@ refresh_device_soon (IndicatorPowerDeviceProviderUPower * self,
 ***/
 
 static void
-on_upower_device_enumerations_ready (GObject       * proxy,
-                                     GAsyncResult  * res,
-                                     gpointer        gself)
-{
-  GError * err;
-  char ** object_paths;
-
-  err = NULL;
-  dbus_upower_call_enumerate_devices_finish (DBUS_UPOWER(proxy),
-                                             &object_paths,
-                                             res,
-                                             &err);
-
-  if (err != NULL)
-    {
-      g_warning ("Unable to get UPower devices: %s", err->message);
-      g_error_free (err);
-    }
-  else
-    {
-      guint i;
-
-      for (i=0; object_paths && object_paths[i]; i++)
-        refresh_device_soon (gself, object_paths[i]);
-
-      g_strfreev (object_paths);
-    }
-}
-
-static void
-on_upower_device_changed (DbusUPower * unused G_GNUC_UNUSED,
-                          const char * object_path,
-                          gpointer     gself)
+on_upower_device_changed (UpDevice   * device,
+                          GParamSpec * pspec,
+                          gpointer   * gself)
 {
+  const char *object_path = up_device_get_object_path (device);
   refresh_device_soon (gself, object_path);
 }
 
 static void
-on_upower_device_added (DbusUPower * unused G_GNUC_UNUSED,
-                        const char * object_path,
-                        gpointer     gself)
-{
-  refresh_device_soon (gself, object_path);
-}
-
-static void
-on_upower_device_removed (DbusUPower * unused G_GNUC_UNUSED,
-                          const char * object_path,
-                          gpointer     gself)
+on_upower_device_added (UpClient * client,
+                        UpDevice * device,
+                        gpointer   gself)
 {
   IndicatorPowerDeviceProviderUPower * self;
 
   self = INDICATOR_POWER_DEVICE_PROVIDER_UPOWER (gself);
-  g_hash_table_remove (self->priv->devices, object_path);
-  g_hash_table_remove (self->priv->queued_paths, object_path);
 
-  emit_devices_changed (self);
+  g_ptr_array_add (self->priv->upower_devices, g_object_ref (device));
+  g_signal_connect (device, "notify",
+                    G_CALLBACK (on_upower_device_changed), self);
+
+  const gchar *object_path;
+  object_path = up_device_get_object_path (device);
+  refresh_device_soon (gself, object_path);
 }
 
 static void
-on_upower_resuming (DbusUPower * unused G_GNUC_UNUSED,
-                    gpointer     gself)
+on_upower_device_removed (UpClient    * client,
+                          const gchar * object_path,
+                          gpointer      gself)
 {
   IndicatorPowerDeviceProviderUPower * self;
-  GHashTableIter iter;
-  gpointer object_path;
 
   self = INDICATOR_POWER_DEVICE_PROVIDER_UPOWER (gself);
 
-  g_debug ("Resumed from hibernate/sleep; queueing all devices for a refresh");
-  g_hash_table_iter_init (&iter, self->priv->devices);
-  while (g_hash_table_iter_next (&iter, &object_path, NULL))
-    refresh_device_soon (self, object_path);
-}
+  g_hash_table_remove (self->priv->devices, object_path);
+  g_hash_table_remove (self->priv->queued_paths, object_path);
 
-static void
-on_upower_proxy_ready (GObject        * source G_GNUC_UNUSED,
-                       GAsyncResult   * res,
-                       gpointer         gself)
-{
-  GError * err;
-  DbusUPower * proxy;
+  guint i;
 
-  err = NULL;
-  proxy = dbus_upower_proxy_new_finish (res, &err);
-  if (err != NULL)
-    {
-      g_warning ("Unable to get UPower proxy: %s", err->message);
-      g_error_free (err);
-    }
-  else
+  for (i = 0; i < self->priv->upower_devices->len; i++)
     {
-      IndicatorPowerDeviceProviderUPower * self;
-      priv_t * p;
+      UpDevice *device = g_ptr_array_index (self->priv->upower_devices, i);
 
-      self = INDICATOR_POWER_DEVICE_PROVIDER_UPOWER (gself);
-      p = self->priv;
-
-      p->upower_proxy = proxy;
-      g_signal_connect (proxy, "resuming",
-                        G_CALLBACK (on_upower_resuming), self);
-      g_signal_connect (proxy, "device-changed",
-                        G_CALLBACK (on_upower_device_changed), self);
-      g_signal_connect (proxy, "device-added",
-                        G_CALLBACK (on_upower_device_added), self);
-      g_signal_connect (proxy, "device-removed",
-                        G_CALLBACK (on_upower_device_removed), self);
-
-      dbus_upower_call_enumerate_devices (p->upower_proxy,
-                                          p->cancellable,
-                                          on_upower_device_enumerations_ready,
-                                          self);
+      if (g_strcmp0 (object_path, up_device_get_object_path (device)) == 0)
+        {
+          g_ptr_array_remove_index (self->priv->upower_devices, i);
+          break;
+        }
     }
+
+  emit_devices_changed (self);
 }
 
 static void
-on_bus_ready (GObject * source_object G_GNUC_UNUSED,
-              GAsyncResult * res,
-              gpointer gself)
+on_logind_signal (GDBusProxy  * proxy,
+                  const gchar * sender_name,
+                  const gchar * signal_name,
+                  GVariant    * parameters,
+                  gpointer      gself)
 {
-  GError * error;
-  GDBusConnection * tmp;
+  if (g_strcmp0 (signal_name, "PrepareForSleep") != 0)
+    return;
 
-  error = NULL;
-  tmp = g_bus_get_finish (res, &error);
-  if (error != NULL)
-    {
-      if (!g_error_matches (error, G_IO_ERROR, G_IO_ERROR_CANCELLED))
-        g_warning ("Error acquiring bus: %s", error->message);
-      g_error_free (error);
-    }
-  else
+  gboolean is_about_to_suspend;
+  g_variant_get (parameters, "(b)", &is_about_to_suspend);
+  if (!is_about_to_suspend)
     {
+      // Resuming
       IndicatorPowerDeviceProviderUPower * self;
-      priv_t * p;
+      GHashTableIter iter;
+      gpointer object_path;
 
       self = INDICATOR_POWER_DEVICE_PROVIDER_UPOWER (gself);
-      p = self->priv;
 
-      p->bus = tmp;
-
-      dbus_upower_proxy_new (p->bus,
-                             G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES,
-                             BUS_NAME,
-                             BUS_PATH,
-                             p->cancellable,
-                             on_upower_proxy_ready,
-                             self);
+      g_debug ("Resumed from hibernate/sleep; queueing all devices for a refresh");
+      g_hash_table_iter_init (&iter, self->priv->devices);
+      while (g_hash_table_iter_next (&iter, &object_path, NULL))
+        refresh_device_soon (self, object_path);
     }
 }
 
@@ -423,13 +321,23 @@ my_dispose (GObject * o)
       p->queued_paths_timer = 0;
     }
 
-  if (p->upower_proxy != NULL)
+  if (p->logind_proxy != NULL)
+    {
+      g_signal_handlers_disconnect_by_data (p->logind_proxy, self);
+
+      g_clear_object (&p->logind_proxy);
+    }
+
+  if (p->upower_client != NULL)
     {
-      g_signal_handlers_disconnect_by_data (p->upower_proxy, self);
+      g_signal_handlers_disconnect_by_data (p->upower_client, self);
 
-      g_clear_object (&p->upower_proxy);
+      g_clear_object (&p->upower_client);
     }
 
+  g_ptr_array_unref (self->priv->upower_devices);
+  self->priv->upower_devices = NULL;
+
   g_hash_table_remove_all (p->devices);
 
   g_clear_object (&p->bus);
@@ -497,10 +405,55 @@ indicator_power_device_provider_upower_init (IndicatorPowerDeviceProviderUPower
                                            g_free,
                                            NULL);
 
-  g_bus_get (G_BUS_TYPE_SYSTEM,
-             p->cancellable,
-             on_bus_ready,
-             self);
+  /* logind */
+
+  GError * error = NULL;
+
+  p->logind_proxy =
+        g_dbus_proxy_new_for_bus_sync (G_BUS_TYPE_SYSTEM,
+                                       0,
+                                       NULL,
+                                       LOGIND_DBUS_NAME,
+                                       LOGIND_DBUS_PATH,
+                                       LOGIND_DBUS_INTERFACE,
+                                       NULL,
+                                       &error);
+  if (p->logind_proxy == NULL)
+    {
+      g_error ("Logind not available. Stuff won't work correctly");
+      g_error_free (error);
+    }
+
+  g_signal_connect (p->logind_proxy, "g-signal",
+                    G_CALLBACK (on_logind_signal), self);
+
+  /* upower */
+
+  self->priv->upower_devices = g_ptr_array_new_with_free_func (g_object_unref);
+  GPtrArray *devices_tmp;
+  guint i;
+
+  p->upower_client = up_client_new ();
+  devices_tmp = up_client_get_devices (p->upower_client);
+  g_signal_connect (p->upower_client, "device-added",
+                    G_CALLBACK (on_upower_device_added), self);
+  g_signal_connect (p->upower_client, "device-removed",
+                    G_CALLBACK (on_upower_device_removed), self);
+
+  for (i = 0; devices_tmp != NULL && i < devices_tmp->len; i++)
+    {
+      UpDevice *device = g_ptr_array_index (devices_tmp, i);
+
+      g_ptr_array_add (self->priv->upower_devices, g_object_ref (device));
+
+      g_signal_connect (device, "notify",
+                        G_CALLBACK (on_upower_device_changed), self);
+
+      const char *object_path = up_device_get_object_path (device);
+      refresh_device_soon (self, object_path);
+    }
+
+  g_ptr_array_unref (devices_tmp);
 }
 
 /***
diff --git a/src/device.h b/src/device.h
index 3a10f89..1dbd1a4 100644
--- a/src/device.h
+++ b/src/device.h
@@ -25,6 +25,7 @@ License along with this library. If not, see
 #define __INDICATOR_POWER_DEVICE_H__
 
 #include <glib-object.h>
+#include <libupower-glib/upower.h>
 
 G_BEGIN_DECLS
 
@@ -45,37 +46,6 @@ typedef struct _IndicatorPowerDevicePrivate IndicatorPowerDevicePrivate;
 #define INDICATOR_POWER_DEVICE_PERCENTAGE   "percentage"
 #define INDICATOR_POWER_DEVICE_TIME         "time"
 
-typedef enum
-{
-  UP_DEVICE_KIND_UNKNOWN,
-  UP_DEVICE_KIND_LINE_POWER,
-  UP_DEVICE_KIND_BATTERY,
-  UP_DEVICE_KIND_UPS,
-  UP_DEVICE_KIND_MONITOR,
-  UP_DEVICE_KIND_MOUSE,
-  UP_DEVICE_KIND_KEYBOARD,
-  UP_DEVICE_KIND_PDA,
-  UP_DEVICE_KIND_PHONE,
-  UP_DEVICE_KIND_MEDIA_PLAYER,
-  UP_DEVICE_KIND_TABLET,
-  UP_DEVICE_KIND_COMPUTER,
-  UP_DEVICE_KIND_LAST
-}
-UpDeviceKind;
-
-typedef enum
-{
-  UP_DEVICE_STATE_UNKNOWN,
-  UP_DEVICE_STATE_CHARGING,
-  UP_DEVICE_STATE_DISCHARGING,
-  UP_DEVICE_STATE_EMPTY,
-  UP_DEVICE_STATE_FULLY_CHARGED,
-  UP_DEVICE_STATE_PENDING_CHARGE,
-  UP_DEVICE_STATE_PENDING_DISCHARGE,
-  UP_DEVICE_STATE_LAST
-}
-UpDeviceState;
-
 
 /**
  * IndicatorPowerDeviceClass:
diff --git a/src/org.freedesktop.UPower.xml b/src/org.freedesktop.UPower.xml
deleted file mode 100644
index 7b73583..0000000
--- a/src/org.freedesktop.UPower.xml
+++ /dev/null
@@ -1,43 +0,0 @@
-<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
-    "http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
-<node>
-    <interface name="org.freedesktop.UPower">
-        <method name="HibernateAllowed">
-            <arg name="allowed" type="b" direction="out"/>
-        </method>
-        <method name="Hibernate">
-        </method>
-        <method name="SuspendAllowed">
-            <arg name="allowed" type="b" direction="out"/>
-        </method>
-        <method name="Suspend">
-        </method>
-        <method name="AboutToSleep">
-        </method>
-        <method name="EnumerateDevices">
-            <arg name="devices" type="ao" direction="out"/>
-        </method>
-        <signal name="Resuming">
-        </signal>
-        <signal name="Sleeping">
-        </signal>
-        <signal name="Changed">
-        </signal>
-        <signal name="DeviceChanged">
-            <arg type="s"/>
-        </signal>
-        <signal name="DeviceRemoved">
-            <arg type="s"/>
-        </signal>
-        <signal name="DeviceAdded">
-            <arg type="s"/>
-        </signal>
-        <property name="LidIsPresent" type="b" access="read"/>
-        <property name="LidIsClosed" type="b" access="read"/>
-        <property name="OnLowBattery" type="b" access="read"/>
-        <property name="OnBattery" type="b" access="read"/>
-        <property name="CanHibernate" type="b" access="read"/>
-        <property name="CanSuspend" type="b" access="read"/>
-        <property name="DaemonVersion" type="s" access="read"/>
-    </interface>
-</node>
\ No newline at end of file
-- 
1.9.1

