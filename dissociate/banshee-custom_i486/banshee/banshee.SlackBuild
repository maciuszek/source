#!/bin/sh
# Packaged by Ronny Schmatzler - schmatzler@hirnschwund.net
# Contains gstreamer 1.x backports and sqlite 3.8.6.1
#
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# Exit on most errors
set -e

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=banshee
TMP=${TMP:-/tmp/txz/banshee}
PKG=$TMP/package
VERSION=${VERSION:-2.6.2}
ARCH=${ARCH:-i486}
BUILD=${BUILD:-11}
TAG=${TAG:-_banpack}

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"; CHOST="x86_64"
fi


# Build sqlite 3.8.6.1 - since 3.8.7 some queries are horribly slow and make banshee everything BUT fun!
# sqlite 3.8.6.1 gets built and installed into /opt and the package itself.
# Later on, the /opt directory will be emptied out again, but we need it at build time, so we can link against it.

# Enable some features:
sqliteSLKCFLAGS="$SLKCFLAGS -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_FTS3_PARENTHESIS=1 -DSQLITE_ENABLE_ICU -DSQLITE_ENABLE_COLUMN_METADATA=1 -DSQLITE_DISABLE_DIRSYNC=1 -DSQLITE_ENABLE_RTREE=1 -DSQLITE_ENABLE_STAT2=1 -DSQLITE_ENABLE_UNLOCK_NOTIFY=1 -DSQLITE_SECURE_DELETE=1"

rm -rf $PKG
mkdir -p $TMP $PKG
cd $TMP
rm -rf sqlite-src-1581c30c
tar xvf $CWD/sqlite-src-1581c30c.tar.?z* || exit 1
cd sqlite-src-1581c30c || exit 1
chown -R root.root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

CFLAGS="$sqliteSLKCFLAGS" \
CXXFLAGS="$sqliteSLKCFLAGS $(icu-config --cppflags)" \
LDFLAGS="$(icu-config --ldflags)" \
./configure \
  --prefix=/opt/sqlite-banshee/usr \
  --libdir=/opt/sqlite-banshee/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/opt/sqlite-banshee/etc \
  --localstatedir=/opt/sqlite-banshee/var \
  --mandir=/opt/sqlite-banshee/usr/man \
  --docdir=/opt/sqlite-banshee/usr/doc/sqlite-$VERSION \
  --disable-tcl \
  --enable-threadsafe \
  --enable-cross-thread-connections \
  --enable-tempstore=yes \
  --enable-load-extension \
  --enable-static=no \
  --build=$ARCH-slackware-linux 

make -j3
# DESTDIR is very unreliable, so we'll just copy it into the system
# and clean it up further on. Needed for linking against it later.
make install
# Make sure we have it in the package, too.
mkdir -p $PKG/opt
cp -R /opt/sqlite-banshee $PKG/opt/sqlite-banshee

#find $PKG | xargs file | grep -e "executable" -e "shared object" \
#  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null

# Fix up the pkgconfig file
sed -i 's|Libs: -L${libdir} -lsqlite3|Libs: -L${libdir} -lsqlite3 -ldl|g' \
  $PKG/opt/sqlite-banshee/usr/lib${LIBDIRSUFFIX}/pkgconfig/sqlite3.pc
sed -i 's|Libs: -L${libdir} -lsqlite3|Libs: -L${libdir} -lsqlite3 -ldl|g' \
  /opt/sqlite-banshee/usr/lib${LIBDIRSUFFIX}/pkgconfig/sqlite3.pc

# Finished building sqlite
# Now let's build banshee:

SOURCE="http://ftp.gnome.org/pub/GNOME/sources/banshee/2.6/$PKGNAME-$VERSION.tar.xz"

# Download source tarball if still not present
if [ ! -e $CWD/$PKGNAME-$VERSION.tar.xz ]; then
  wget -c $SOURCE
fi

# Create building directory
mkdir -p $TMP $PKG $OUTPUT

cd $TMP
tar -Jxf $CWD/$PKGNAME-$VERSION.tar.xz

echo -e "\E[0;32m+--------------------------+\E[0;0m"
echo -e "\E[0;32m| Start SlackBuild Banshee |\E[0;0m"
echo -e "\E[0;32m+--------------------------+\E[0;0m"

# Adjust permissions and ownerships
cd $PKGNAME-$VERSION
chmod -R u+w,go+r-w,a-s .
chown -R root:root .

# Backport gstreamer1.0 backend
# If you do this, banshee devs will get really mad at you
#
# https://git.gnome.org/browse/banshee/commit/?id=e40923df1bc55129832dff5ca2c782f5040b412f
patch -p1 < $CWD/patches/1-gstreamer-initial.patch
# https://git.gnome.org/browse/banshee/commit/?id=fc80163371e9d7f141767f766a5826713838f163
patch -p1 < $CWD/patches/2-remove-gapless.patch
# https://git.gnome.org/browse/banshee/commit/?id=636980d6d26eb20db4ddc41c36acb5930835e828
patch -p1 < $CWD/patches/3-decodebin.patch
# https://git.gnome.org/browse/banshee/commit/?id=c6ea982e65e19fec7c5eb020cafa99f7278daa15
patch -p1 < $CWD/patches/4-gstwav.patch
# Build 7
# https://git.gnome.org/browse/banshee/commit/?id=bb9b6b9d8da756945e278511139982df437606b0
patch -p1 < $CWD/patches/5-nullcheck.patch
# https://git.gnome.org/browse/banshee/commit/?id=ea128c28c2fc167039cfbe1a8ae489c55fa55c0e
patch -p1 < $CWD/patches/6-gstleftover.patch

# Building Banshee package
LDFLAGS="$SLKLDFLAGS" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
#use dmcs to target .NET 4.0 now
#add /opt to path for gstreamer1.0 and the old (fast) sqlite
export PKG_CONFIG_PATH=/opt/gstreamer1-banshee/usr/lib/pkgconfig:/opt/sqlite-banshee/usr/lib/pkgconfig
./autogen.sh MCS=/usr/bin/dmcs \
		--prefix=/usr \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--enable-release \
		--enable-gapless-playback=no \
		--with-vendor-build-id=www.schmatzler.de \
		--disable-gnome \
		--program-prefix= \
		--program-suffix= \
		--build=$CHOST-slackware-linux
echo -e "\E[0;32mPress any key to build the package!\E[0;0m"
read
make -j4
make install DESTDIR=$PKG

# Changing the rpath doesn't work in the usual way, so we'll just put the path into the startup script
if [ "$ARCH" = "x86_64" ]; then
sed -i '10 s/LD_LIBRARY_PATH=\/usr\/lib64\/banshee:/LD_LIBRARY_PATH=\/opt\/gstreamer1-banshee\/usr\/lib64:\/usr\/lib64\/banshee:/g' $PKG/usr/bin/banshee
else
sed -i '10 s/LD_LIBRARY_PATH=\/usr\/lib\/banshee:/LD_LIBRARY_PATH=\/opt\/gstreamer1-banshee\/usr\/lib:\/usr\/lib\/banshee:/g' $PKG/usr/bin/banshee
fi

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

#Add documentation files: readme, changelog and so on
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cp -a \
 AUTHORS COPYING ChangeLog HACKING NEWS README \
  $PKG/usr/doc/$PKGNAME-$VERSION
chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/*

# Also add the slack-desk file and this slackbuild to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild

# Building some post-install execution script 	
	echo "if [ -x /usr/bin/update-mime-database ]; then
  /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh

# remove sqlite from system, only the package should install it.
rm -rf /opt/sqlite-banshee

# Change to output directory
cd $PKG
chown -R root:root $PKG

# Create txz package
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}


# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi
